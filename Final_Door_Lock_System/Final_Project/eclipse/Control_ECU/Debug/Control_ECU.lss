
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002470  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00002470  00002504  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  0080007a  0080007a  0000251e  2**0
                  ALLOC
  3 .stab         000029a0  00000000  00000000  00002520  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001645  00000000  00000000  00004ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006505  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006645  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000067b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000083fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000092e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a098  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a1f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a485  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ac53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 70 0e 	jmp	0x1ce0	; 0x1ce0 <__vector_4>
      14:	0c 94 3d 0e 	jmp	0x1c7a	; 0x1c7a <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 0a 0e 	jmp	0x1c14	; 0x1c14 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 d7 0d 	jmp	0x1bae	; 0x1bae <__vector_9>
      28:	0c 94 a4 0d 	jmp	0x1b48	; 0x1b48 <__vector_10>
      2c:	0c 94 71 0d 	jmp	0x1ae2	; 0x1ae2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e7       	ldi	r30, 0x70	; 112
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 38       	cpi	r26, 0x85	; 133
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 67 08 	call	0x10ce	; 0x10ce <main>
      8a:	0c 94 36 12 	jmp	0x246c	; 0x246c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1b 12 	jmp	0x2436	; 0x2436 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0b 12 	jmp	0x2416	; 0x2416 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 27 12 	jmp	0x244e	; 0x244e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0b 12 	jmp	0x2416	; 0x2416 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 27 12 	jmp	0x244e	; 0x244e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1b 12 	jmp	0x2436	; 0x2436 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0b 12 	jmp	0x2416	; 0x2416 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 27 12 	jmp	0x244e	; 0x244e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0b 12 	jmp	0x2416	; 0x2416 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 27 12 	jmp	0x244e	; 0x244e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0b 12 	jmp	0x2416	; 0x2416 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 27 12 	jmp	0x244e	; 0x244e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <CTRL_Init>:
 *
 * Return: void
 *
 */
void CTRL_Init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	UART_init(&UART_configurations);				  /* Initialiaze UART module */
     b4e:	8f e6       	ldi	r24, 0x6F	; 111
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	0e 94 ce 10 	call	0x219c	; 0x219c <UART_init>
	TWI_init(&TWI_conigurations);					  /* Initialiaze I2C module */
     b56:	86 e7       	ldi	r24, 0x76	; 118
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	0e 94 35 10 	call	0x206a	; 0x206a <TWI_init>
	Timer_setCallBack(CTRL_timerCallBack, TIMER1_ID); /* Passing the address of the call back funciton to TIMER1 */
     b5e:	84 ef       	ldi	r24, 0xF4	; 244
     b60:	97 e0       	ldi	r25, 0x07	; 7
     b62:	61 e0       	ldi	r22, 0x01	; 1
     b64:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <Timer_setCallBack>
	Timer_init(&TIMER_configuartions);				  /* Start TIMER1 module */
     b68:	88 e6       	ldi	r24, 0x68	; 104
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <Timer_init>
	PIR_init();										  /* Initialiaze PIR sensor */
     b70:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <PIR_init>
	DcMotor_Init();									  /* Initialiaze DC motor */
     b74:	0e 94 ad 08 	call	0x115a	; 0x115a <DcMotor_Init>
	Buzzer_init();									  /* Initialiaze Buzzer */
     b78:	0e 94 84 08 	call	0x1108	; 0x1108 <Buzzer_init>
	/* Enable global interrupts */
	SREG |= (1 << 7);
     b7c:	af e5       	ldi	r26, 0x5F	; 95
     b7e:	b0 e0       	ldi	r27, 0x00	; 0
     b80:	ef e5       	ldi	r30, 0x5F	; 95
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	80 81       	ld	r24, Z
     b86:	80 68       	ori	r24, 0x80	; 128
     b88:	8c 93       	st	X, r24
}
     b8a:	cf 91       	pop	r28
     b8c:	df 91       	pop	r29
     b8e:	08 95       	ret

00000b90 <CTRL_savePassword>:
 *
 * Return: void
 *
 */
void CTRL_savePassword(void)
{
     b90:	df 93       	push	r29
     b92:	cf 93       	push	r28
     b94:	cd b7       	in	r28, 0x3d	; 61
     b96:	de b7       	in	r29, 0x3e	; 62
     b98:	60 97       	sbiw	r28, 0x10	; 16
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	f8 94       	cli
     b9e:	de bf       	out	0x3e, r29	; 62
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	cd bf       	out	0x3d, r28	; 61
	uint8 uart_recieve_buffer = 0;				/* To store the byte in the recieve buffer in a varaible */
     ba4:	18 8a       	std	Y+16, r1	; 0x10
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) /* Loop for number of PASSWORD_LENGTH characters */
     ba6:	1f 86       	std	Y+15, r1	; 0x0f
     ba8:	83 c0       	rjmp	.+262    	; 0xcb0 <CTRL_savePassword+0x120>
	{
		uart_recieve_buffer = UART_recieveByte();								 /* Store in uart_recieve_buffer the uart recieve buffer byte sent from HMI */
     baa:	0e 94 4e 11 	call	0x229c	; 0x229c <UART_recieveByte>
     bae:	88 8b       	std	Y+16, r24	; 0x10
		EEPROM_writeByte(EEPROM_START_MEM_LOC_ADDRESS + i, uart_recieve_buffer); /* Save the uart_recieve_buffer byte in EEPROM_START_MEM_LOC_ADDRESS + i(next byte address) */
     bb0:	8f 85       	ldd	r24, Y+15	; 0x0f
     bb2:	88 2f       	mov	r24, r24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	8f 5e       	subi	r24, 0xEF	; 239
     bb8:	9c 4f       	sbci	r25, 0xFC	; 252
     bba:	68 89       	ldd	r22, Y+16	; 0x10
     bbc:	0e 94 12 09 	call	0x1224	; 0x1224 <EEPROM_writeByte>
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	a0 e2       	ldi	r26, 0x20	; 32
     bc6:	b1 e4       	ldi	r27, 0x41	; 65
     bc8:	8b 87       	std	Y+11, r24	; 0x0b
     bca:	9c 87       	std	Y+12, r25	; 0x0c
     bcc:	ad 87       	std	Y+13, r26	; 0x0d
     bce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bd0:	6b 85       	ldd	r22, Y+11	; 0x0b
     bd2:	7c 85       	ldd	r23, Y+12	; 0x0c
     bd4:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd6:	9e 85       	ldd	r25, Y+14	; 0x0e
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	4a ef       	ldi	r20, 0xFA	; 250
     bde:	54 e4       	ldi	r21, 0x44	; 68
     be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     be4:	dc 01       	movw	r26, r24
     be6:	cb 01       	movw	r24, r22
     be8:	8f 83       	std	Y+7, r24	; 0x07
     bea:	98 87       	std	Y+8, r25	; 0x08
     bec:	a9 87       	std	Y+9, r26	; 0x09
     bee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bf0:	6f 81       	ldd	r22, Y+7	; 0x07
     bf2:	78 85       	ldd	r23, Y+8	; 0x08
     bf4:	89 85       	ldd	r24, Y+9	; 0x09
     bf6:	9a 85       	ldd	r25, Y+10	; 0x0a
     bf8:	20 e0       	ldi	r18, 0x00	; 0
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	40 e8       	ldi	r20, 0x80	; 128
     bfe:	5f e3       	ldi	r21, 0x3F	; 63
     c00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c04:	88 23       	and	r24, r24
     c06:	2c f4       	brge	.+10     	; 0xc12 <CTRL_savePassword+0x82>
		__ticks = 1;
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	9e 83       	std	Y+6, r25	; 0x06
     c0e:	8d 83       	std	Y+5, r24	; 0x05
     c10:	3f c0       	rjmp	.+126    	; 0xc90 <CTRL_savePassword+0x100>
	else if (__tmp > 65535)
     c12:	6f 81       	ldd	r22, Y+7	; 0x07
     c14:	78 85       	ldd	r23, Y+8	; 0x08
     c16:	89 85       	ldd	r24, Y+9	; 0x09
     c18:	9a 85       	ldd	r25, Y+10	; 0x0a
     c1a:	20 e0       	ldi	r18, 0x00	; 0
     c1c:	3f ef       	ldi	r19, 0xFF	; 255
     c1e:	4f e7       	ldi	r20, 0x7F	; 127
     c20:	57 e4       	ldi	r21, 0x47	; 71
     c22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c26:	18 16       	cp	r1, r24
     c28:	4c f5       	brge	.+82     	; 0xc7c <CTRL_savePassword+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c2a:	6b 85       	ldd	r22, Y+11	; 0x0b
     c2c:	7c 85       	ldd	r23, Y+12	; 0x0c
     c2e:	8d 85       	ldd	r24, Y+13	; 0x0d
     c30:	9e 85       	ldd	r25, Y+14	; 0x0e
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	40 e2       	ldi	r20, 0x20	; 32
     c38:	51 e4       	ldi	r21, 0x41	; 65
     c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c3e:	dc 01       	movw	r26, r24
     c40:	cb 01       	movw	r24, r22
     c42:	bc 01       	movw	r22, r24
     c44:	cd 01       	movw	r24, r26
     c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	9e 83       	std	Y+6, r25	; 0x06
     c50:	8d 83       	std	Y+5, r24	; 0x05
     c52:	0f c0       	rjmp	.+30     	; 0xc72 <CTRL_savePassword+0xe2>
     c54:	88 ec       	ldi	r24, 0xC8	; 200
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	9c 83       	std	Y+4, r25	; 0x04
     c5a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c5c:	8b 81       	ldd	r24, Y+3	; 0x03
     c5e:	9c 81       	ldd	r25, Y+4	; 0x04
     c60:	01 97       	sbiw	r24, 0x01	; 1
     c62:	f1 f7       	brne	.-4      	; 0xc60 <CTRL_savePassword+0xd0>
     c64:	9c 83       	std	Y+4, r25	; 0x04
     c66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c68:	8d 81       	ldd	r24, Y+5	; 0x05
     c6a:	9e 81       	ldd	r25, Y+6	; 0x06
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	9e 83       	std	Y+6, r25	; 0x06
     c70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c72:	8d 81       	ldd	r24, Y+5	; 0x05
     c74:	9e 81       	ldd	r25, Y+6	; 0x06
     c76:	00 97       	sbiw	r24, 0x00	; 0
     c78:	69 f7       	brne	.-38     	; 0xc54 <CTRL_savePassword+0xc4>
     c7a:	14 c0       	rjmp	.+40     	; 0xca4 <CTRL_savePassword+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c7c:	6f 81       	ldd	r22, Y+7	; 0x07
     c7e:	78 85       	ldd	r23, Y+8	; 0x08
     c80:	89 85       	ldd	r24, Y+9	; 0x09
     c82:	9a 85       	ldd	r25, Y+10	; 0x0a
     c84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c88:	dc 01       	movw	r26, r24
     c8a:	cb 01       	movw	r24, r22
     c8c:	9e 83       	std	Y+6, r25	; 0x06
     c8e:	8d 83       	std	Y+5, r24	; 0x05
     c90:	8d 81       	ldd	r24, Y+5	; 0x05
     c92:	9e 81       	ldd	r25, Y+6	; 0x06
     c94:	9a 83       	std	Y+2, r25	; 0x02
     c96:	89 83       	std	Y+1, r24	; 0x01
     c98:	89 81       	ldd	r24, Y+1	; 0x01
     c9a:	9a 81       	ldd	r25, Y+2	; 0x02
     c9c:	01 97       	sbiw	r24, 0x01	; 1
     c9e:	f1 f7       	brne	.-4      	; 0xc9c <CTRL_savePassword+0x10c>
     ca0:	9a 83       	std	Y+2, r25	; 0x02
     ca2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);															 /* EEPROM read/write time */
		UART_sendByte(CTRL_READY_TO_RECEIVE);									 /* Send Control ECU is ready to receive */
     ca4:	80 e2       	ldi	r24, 0x20	; 32
     ca6:	0e 94 37 11 	call	0x226e	; 0x226e <UART_sendByte>
 *
 */
void CTRL_savePassword(void)
{
	uint8 uart_recieve_buffer = 0;				/* To store the byte in the recieve buffer in a varaible */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) /* Loop for number of PASSWORD_LENGTH characters */
     caa:	8f 85       	ldd	r24, Y+15	; 0x0f
     cac:	8f 5f       	subi	r24, 0xFF	; 255
     cae:	8f 87       	std	Y+15, r24	; 0x0f
     cb0:	8f 85       	ldd	r24, Y+15	; 0x0f
     cb2:	85 30       	cpi	r24, 0x05	; 5
     cb4:	08 f4       	brcc	.+2      	; 0xcb8 <CTRL_savePassword+0x128>
     cb6:	79 cf       	rjmp	.-270    	; 0xbaa <CTRL_savePassword+0x1a>
		uart_recieve_buffer = UART_recieveByte();								 /* Store in uart_recieve_buffer the uart recieve buffer byte sent from HMI */
		EEPROM_writeByte(EEPROM_START_MEM_LOC_ADDRESS + i, uart_recieve_buffer); /* Save the uart_recieve_buffer byte in EEPROM_START_MEM_LOC_ADDRESS + i(next byte address) */
		_delay_ms(10);															 /* EEPROM read/write time */
		UART_sendByte(CTRL_READY_TO_RECEIVE);									 /* Send Control ECU is ready to receive */
	}
}
     cb8:	60 96       	adiw	r28, 0x10	; 16
     cba:	0f b6       	in	r0, 0x3f	; 63
     cbc:	f8 94       	cli
     cbe:	de bf       	out	0x3e, r29	; 62
     cc0:	0f be       	out	0x3f, r0	; 63
     cc2:	cd bf       	out	0x3d, r28	; 61
     cc4:	cf 91       	pop	r28
     cc6:	df 91       	pop	r29
     cc8:	08 95       	ret

00000cca <CTRL_changePassword>:
 *
 * Return: void
 *
 */
void CTRL_changePassword(void)
{
     cca:	df 93       	push	r29
     ccc:	cf 93       	push	r28
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
     cd2:	61 97       	sbiw	r28, 0x11	; 17
     cd4:	0f b6       	in	r0, 0x3f	; 63
     cd6:	f8 94       	cli
     cd8:	de bf       	out	0x3e, r29	; 62
     cda:	0f be       	out	0x3f, r0	; 63
     cdc:	cd bf       	out	0x3d, r28	; 61
	static uint8 mismatched_counter = 0;		/* To statically hold number of mismatched passwords */
	uint8 eeprom_value;							/* To store current password character in EEPROM */
	uint8 uart_recieve_buffer;					/* To store the byte in the recieve buffer in a varaible */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) /* Loop for number of PASSWORD_LENGTH characters */
     cde:	1f 86       	std	Y+15, r1	; 0x0f
     ce0:	a6 c0       	rjmp	.+332    	; 0xe2e <CTRL_changePassword+0x164>
	{
		EEPROM_readByte(EEPROM_START_MEM_LOC_ADDRESS + i, &eeprom_value); /* Store current address value in password1 at i index */
     ce2:	8f 85       	ldd	r24, Y+15	; 0x0f
     ce4:	88 2f       	mov	r24, r24
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	8f 5e       	subi	r24, 0xEF	; 239
     cea:	9c 4f       	sbci	r25, 0xFC	; 252
     cec:	9e 01       	movw	r18, r28
     cee:	2f 5e       	subi	r18, 0xEF	; 239
     cf0:	3f 4f       	sbci	r19, 0xFF	; 255
     cf2:	b9 01       	movw	r22, r18
     cf4:	0e 94 53 09 	call	0x12a6	; 0x12a6 <EEPROM_readByte>
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	a0 e2       	ldi	r26, 0x20	; 32
     cfe:	b1 e4       	ldi	r27, 0x41	; 65
     d00:	8b 87       	std	Y+11, r24	; 0x0b
     d02:	9c 87       	std	Y+12, r25	; 0x0c
     d04:	ad 87       	std	Y+13, r26	; 0x0d
     d06:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d08:	6b 85       	ldd	r22, Y+11	; 0x0b
     d0a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d0c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d0e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	4a ef       	ldi	r20, 0xFA	; 250
     d16:	54 e4       	ldi	r21, 0x44	; 68
     d18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d1c:	dc 01       	movw	r26, r24
     d1e:	cb 01       	movw	r24, r22
     d20:	8f 83       	std	Y+7, r24	; 0x07
     d22:	98 87       	std	Y+8, r25	; 0x08
     d24:	a9 87       	std	Y+9, r26	; 0x09
     d26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d28:	6f 81       	ldd	r22, Y+7	; 0x07
     d2a:	78 85       	ldd	r23, Y+8	; 0x08
     d2c:	89 85       	ldd	r24, Y+9	; 0x09
     d2e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	40 e8       	ldi	r20, 0x80	; 128
     d36:	5f e3       	ldi	r21, 0x3F	; 63
     d38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d3c:	88 23       	and	r24, r24
     d3e:	2c f4       	brge	.+10     	; 0xd4a <CTRL_changePassword+0x80>
		__ticks = 1;
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	9e 83       	std	Y+6, r25	; 0x06
     d46:	8d 83       	std	Y+5, r24	; 0x05
     d48:	3f c0       	rjmp	.+126    	; 0xdc8 <CTRL_changePassword+0xfe>
	else if (__tmp > 65535)
     d4a:	6f 81       	ldd	r22, Y+7	; 0x07
     d4c:	78 85       	ldd	r23, Y+8	; 0x08
     d4e:	89 85       	ldd	r24, Y+9	; 0x09
     d50:	9a 85       	ldd	r25, Y+10	; 0x0a
     d52:	20 e0       	ldi	r18, 0x00	; 0
     d54:	3f ef       	ldi	r19, 0xFF	; 255
     d56:	4f e7       	ldi	r20, 0x7F	; 127
     d58:	57 e4       	ldi	r21, 0x47	; 71
     d5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d5e:	18 16       	cp	r1, r24
     d60:	4c f5       	brge	.+82     	; 0xdb4 <CTRL_changePassword+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d62:	6b 85       	ldd	r22, Y+11	; 0x0b
     d64:	7c 85       	ldd	r23, Y+12	; 0x0c
     d66:	8d 85       	ldd	r24, Y+13	; 0x0d
     d68:	9e 85       	ldd	r25, Y+14	; 0x0e
     d6a:	20 e0       	ldi	r18, 0x00	; 0
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	40 e2       	ldi	r20, 0x20	; 32
     d70:	51 e4       	ldi	r21, 0x41	; 65
     d72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d76:	dc 01       	movw	r26, r24
     d78:	cb 01       	movw	r24, r22
     d7a:	bc 01       	movw	r22, r24
     d7c:	cd 01       	movw	r24, r26
     d7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d82:	dc 01       	movw	r26, r24
     d84:	cb 01       	movw	r24, r22
     d86:	9e 83       	std	Y+6, r25	; 0x06
     d88:	8d 83       	std	Y+5, r24	; 0x05
     d8a:	0f c0       	rjmp	.+30     	; 0xdaa <CTRL_changePassword+0xe0>
     d8c:	88 ec       	ldi	r24, 0xC8	; 200
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	9c 83       	std	Y+4, r25	; 0x04
     d92:	8b 83       	std	Y+3, r24	; 0x03
     d94:	8b 81       	ldd	r24, Y+3	; 0x03
     d96:	9c 81       	ldd	r25, Y+4	; 0x04
     d98:	01 97       	sbiw	r24, 0x01	; 1
     d9a:	f1 f7       	brne	.-4      	; 0xd98 <CTRL_changePassword+0xce>
     d9c:	9c 83       	std	Y+4, r25	; 0x04
     d9e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     da0:	8d 81       	ldd	r24, Y+5	; 0x05
     da2:	9e 81       	ldd	r25, Y+6	; 0x06
     da4:	01 97       	sbiw	r24, 0x01	; 1
     da6:	9e 83       	std	Y+6, r25	; 0x06
     da8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     daa:	8d 81       	ldd	r24, Y+5	; 0x05
     dac:	9e 81       	ldd	r25, Y+6	; 0x06
     dae:	00 97       	sbiw	r24, 0x00	; 0
     db0:	69 f7       	brne	.-38     	; 0xd8c <CTRL_changePassword+0xc2>
     db2:	14 c0       	rjmp	.+40     	; 0xddc <CTRL_changePassword+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     db4:	6f 81       	ldd	r22, Y+7	; 0x07
     db6:	78 85       	ldd	r23, Y+8	; 0x08
     db8:	89 85       	ldd	r24, Y+9	; 0x09
     dba:	9a 85       	ldd	r25, Y+10	; 0x0a
     dbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dc0:	dc 01       	movw	r26, r24
     dc2:	cb 01       	movw	r24, r22
     dc4:	9e 83       	std	Y+6, r25	; 0x06
     dc6:	8d 83       	std	Y+5, r24	; 0x05
     dc8:	8d 81       	ldd	r24, Y+5	; 0x05
     dca:	9e 81       	ldd	r25, Y+6	; 0x06
     dcc:	9a 83       	std	Y+2, r25	; 0x02
     dce:	89 83       	std	Y+1, r24	; 0x01
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	9a 81       	ldd	r25, Y+2	; 0x02
     dd4:	01 97       	sbiw	r24, 0x01	; 1
     dd6:	f1 f7       	brne	.-4      	; 0xdd4 <CTRL_changePassword+0x10a>
     dd8:	9a 83       	std	Y+2, r25	; 0x02
     dda:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);													  /* EEPROM read/write time*/
		uart_recieve_buffer = UART_recieveByte();						  /* Store in password2 at i index the uart recieve buffer byte sent from HMI */
     ddc:	0e 94 4e 11 	call	0x229c	; 0x229c <UART_recieveByte>
     de0:	88 8b       	std	Y+16, r24	; 0x10
		if (uart_recieve_buffer != eeprom_value)						  /* If a single character mismatch detected */
     de2:	99 89       	ldd	r25, Y+17	; 0x11
     de4:	88 89       	ldd	r24, Y+16	; 0x10
     de6:	89 17       	cp	r24, r25
     de8:	e1 f0       	breq	.+56     	; 0xe22 <CTRL_changePassword+0x158>
		{
			mismatched_counter++;							   /* Count up number of mismatches */
     dea:	80 91 7c 00 	lds	r24, 0x007C
     dee:	8f 5f       	subi	r24, 0xFF	; 255
     df0:	80 93 7c 00 	sts	0x007C, r24
			if (mismatched_counter == MAX_PASSWORD_MISMATCHED) /* If max password mismatches reached */
     df4:	80 91 7c 00 	lds	r24, 0x007C
     df8:	83 30       	cpi	r24, 0x03	; 3
     dfa:	79 f4       	brne	.+30     	; 0xe1a <CTRL_changePassword+0x150>
			{
				mismatched_counter = 0;		 /* Clear mismatch counter for next password entries */
     dfc:	10 92 7c 00 	sts	0x007C, r1
				g_ticks = 0;				 /* Clear Timer ticks to start counting from 0 seconds */
     e00:	10 92 7b 00 	sts	0x007B, r1
     e04:	10 92 7a 00 	sts	0x007A, r1
				g_sys_state = SYSTEM_LOCKED; /* Switch to SYSTEM_LOCKED state */
     e08:	84 e0       	ldi	r24, 0x04	; 4
     e0a:	80 93 84 00 	sts	0x0084, r24
				UART_sendByte(LOCK_SYSTEM);	 /* Send LOCK_SYSTEM to HMI */
     e0e:	83 e2       	ldi	r24, 0x23	; 35
     e10:	0e 94 37 11 	call	0x226e	; 0x226e <UART_sendByte>
				Buzzer_on();				 /* Turn on buzzer as system is in locked state */
     e14:	0e 94 95 08 	call	0x112a	; 0x112a <Buzzer_on>
     e18:	12 c0       	rjmp	.+36     	; 0xe3e <CTRL_changePassword+0x174>
			}
			else /* Else max password mismatches not reached send PASSWORD_MISMATCHED to HMI */
			{
				UART_sendByte(PASSWORD_MISMATCHED);
     e1a:	82 e2       	ldi	r24, 0x22	; 34
     e1c:	0e 94 37 11 	call	0x226e	; 0x226e <UART_sendByte>
     e20:	0e c0       	rjmp	.+28     	; 0xe3e <CTRL_changePassword+0x174>
			}
			return;
		}
		UART_sendByte(CTRL_READY_TO_RECEIVE); /* Send Control ECU is ready to receive */
     e22:	80 e2       	ldi	r24, 0x20	; 32
     e24:	0e 94 37 11 	call	0x226e	; 0x226e <UART_sendByte>
void CTRL_changePassword(void)
{
	static uint8 mismatched_counter = 0;		/* To statically hold number of mismatched passwords */
	uint8 eeprom_value;							/* To store current password character in EEPROM */
	uint8 uart_recieve_buffer;					/* To store the byte in the recieve buffer in a varaible */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) /* Loop for number of PASSWORD_LENGTH characters */
     e28:	8f 85       	ldd	r24, Y+15	; 0x0f
     e2a:	8f 5f       	subi	r24, 0xFF	; 255
     e2c:	8f 87       	std	Y+15, r24	; 0x0f
     e2e:	8f 85       	ldd	r24, Y+15	; 0x0f
     e30:	85 30       	cpi	r24, 0x05	; 5
     e32:	08 f4       	brcc	.+2      	; 0xe36 <CTRL_changePassword+0x16c>
     e34:	56 cf       	rjmp	.-340    	; 0xce2 <CTRL_changePassword+0x18>
			return;
		}
		UART_sendByte(CTRL_READY_TO_RECEIVE); /* Send Control ECU is ready to receive */
	}
	/* As for loop executed without return, execute the code below */
	mismatched_counter = 0;		 /* Clear mismatch counter for next password entries */
     e36:	10 92 7c 00 	sts	0x007C, r1
	CTRL_savePassword();
     e3a:	0e 94 c8 05 	call	0xb90	; 0xb90 <CTRL_savePassword>
}
     e3e:	61 96       	adiw	r28, 0x11	; 17
     e40:	0f b6       	in	r0, 0x3f	; 63
     e42:	f8 94       	cli
     e44:	de bf       	out	0x3e, r29	; 62
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	cd bf       	out	0x3d, r28	; 61
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <CTRL_unlockDoor>:
 *
 * Return: void
 *
 */
void CTRL_unlockDoor(void)
{
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
     e58:	61 97       	sbiw	r28, 0x11	; 17
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	f8 94       	cli
     e5e:	de bf       	out	0x3e, r29	; 62
     e60:	0f be       	out	0x3f, r0	; 63
     e62:	cd bf       	out	0x3d, r28	; 61
	static uint8 mismatched_counter = 0;		/* To statically hold number of mismatched passwords */
	uint8 eeprom_value;							/* To store current password character in EEPROM */
	uint8 uart_recieve_buffer;					/* To store the byte in the recieve buffer in a varaible */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) /* Loop for number of PASSWORD_LENGTH characters */
     e64:	1f 86       	std	Y+15, r1	; 0x0f
     e66:	a6 c0       	rjmp	.+332    	; 0xfb4 <CTRL_unlockDoor+0x164>
	{
		EEPROM_readByte(EEPROM_START_MEM_LOC_ADDRESS + i, &eeprom_value); /* Store current address value in password1 at i index */
     e68:	8f 85       	ldd	r24, Y+15	; 0x0f
     e6a:	88 2f       	mov	r24, r24
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	8f 5e       	subi	r24, 0xEF	; 239
     e70:	9c 4f       	sbci	r25, 0xFC	; 252
     e72:	9e 01       	movw	r18, r28
     e74:	2f 5e       	subi	r18, 0xEF	; 239
     e76:	3f 4f       	sbci	r19, 0xFF	; 255
     e78:	b9 01       	movw	r22, r18
     e7a:	0e 94 53 09 	call	0x12a6	; 0x12a6 <EEPROM_readByte>
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	a0 e2       	ldi	r26, 0x20	; 32
     e84:	b1 e4       	ldi	r27, 0x41	; 65
     e86:	8b 87       	std	Y+11, r24	; 0x0b
     e88:	9c 87       	std	Y+12, r25	; 0x0c
     e8a:	ad 87       	std	Y+13, r26	; 0x0d
     e8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e8e:	6b 85       	ldd	r22, Y+11	; 0x0b
     e90:	7c 85       	ldd	r23, Y+12	; 0x0c
     e92:	8d 85       	ldd	r24, Y+13	; 0x0d
     e94:	9e 85       	ldd	r25, Y+14	; 0x0e
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	4a ef       	ldi	r20, 0xFA	; 250
     e9c:	54 e4       	ldi	r21, 0x44	; 68
     e9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ea2:	dc 01       	movw	r26, r24
     ea4:	cb 01       	movw	r24, r22
     ea6:	8f 83       	std	Y+7, r24	; 0x07
     ea8:	98 87       	std	Y+8, r25	; 0x08
     eaa:	a9 87       	std	Y+9, r26	; 0x09
     eac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     eae:	6f 81       	ldd	r22, Y+7	; 0x07
     eb0:	78 85       	ldd	r23, Y+8	; 0x08
     eb2:	89 85       	ldd	r24, Y+9	; 0x09
     eb4:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb6:	20 e0       	ldi	r18, 0x00	; 0
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	40 e8       	ldi	r20, 0x80	; 128
     ebc:	5f e3       	ldi	r21, 0x3F	; 63
     ebe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ec2:	88 23       	and	r24, r24
     ec4:	2c f4       	brge	.+10     	; 0xed0 <CTRL_unlockDoor+0x80>
		__ticks = 1;
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	9e 83       	std	Y+6, r25	; 0x06
     ecc:	8d 83       	std	Y+5, r24	; 0x05
     ece:	3f c0       	rjmp	.+126    	; 0xf4e <CTRL_unlockDoor+0xfe>
	else if (__tmp > 65535)
     ed0:	6f 81       	ldd	r22, Y+7	; 0x07
     ed2:	78 85       	ldd	r23, Y+8	; 0x08
     ed4:	89 85       	ldd	r24, Y+9	; 0x09
     ed6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	3f ef       	ldi	r19, 0xFF	; 255
     edc:	4f e7       	ldi	r20, 0x7F	; 127
     ede:	57 e4       	ldi	r21, 0x47	; 71
     ee0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ee4:	18 16       	cp	r1, r24
     ee6:	4c f5       	brge	.+82     	; 0xf3a <CTRL_unlockDoor+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ee8:	6b 85       	ldd	r22, Y+11	; 0x0b
     eea:	7c 85       	ldd	r23, Y+12	; 0x0c
     eec:	8d 85       	ldd	r24, Y+13	; 0x0d
     eee:	9e 85       	ldd	r25, Y+14	; 0x0e
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	40 e2       	ldi	r20, 0x20	; 32
     ef6:	51 e4       	ldi	r21, 0x41	; 65
     ef8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     efc:	dc 01       	movw	r26, r24
     efe:	cb 01       	movw	r24, r22
     f00:	bc 01       	movw	r22, r24
     f02:	cd 01       	movw	r24, r26
     f04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f08:	dc 01       	movw	r26, r24
     f0a:	cb 01       	movw	r24, r22
     f0c:	9e 83       	std	Y+6, r25	; 0x06
     f0e:	8d 83       	std	Y+5, r24	; 0x05
     f10:	0f c0       	rjmp	.+30     	; 0xf30 <CTRL_unlockDoor+0xe0>
     f12:	88 ec       	ldi	r24, 0xC8	; 200
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	9c 83       	std	Y+4, r25	; 0x04
     f18:	8b 83       	std	Y+3, r24	; 0x03
     f1a:	8b 81       	ldd	r24, Y+3	; 0x03
     f1c:	9c 81       	ldd	r25, Y+4	; 0x04
     f1e:	01 97       	sbiw	r24, 0x01	; 1
     f20:	f1 f7       	brne	.-4      	; 0xf1e <CTRL_unlockDoor+0xce>
     f22:	9c 83       	std	Y+4, r25	; 0x04
     f24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f26:	8d 81       	ldd	r24, Y+5	; 0x05
     f28:	9e 81       	ldd	r25, Y+6	; 0x06
     f2a:	01 97       	sbiw	r24, 0x01	; 1
     f2c:	9e 83       	std	Y+6, r25	; 0x06
     f2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f30:	8d 81       	ldd	r24, Y+5	; 0x05
     f32:	9e 81       	ldd	r25, Y+6	; 0x06
     f34:	00 97       	sbiw	r24, 0x00	; 0
     f36:	69 f7       	brne	.-38     	; 0xf12 <CTRL_unlockDoor+0xc2>
     f38:	14 c0       	rjmp	.+40     	; 0xf62 <CTRL_unlockDoor+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f3a:	6f 81       	ldd	r22, Y+7	; 0x07
     f3c:	78 85       	ldd	r23, Y+8	; 0x08
     f3e:	89 85       	ldd	r24, Y+9	; 0x09
     f40:	9a 85       	ldd	r25, Y+10	; 0x0a
     f42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f46:	dc 01       	movw	r26, r24
     f48:	cb 01       	movw	r24, r22
     f4a:	9e 83       	std	Y+6, r25	; 0x06
     f4c:	8d 83       	std	Y+5, r24	; 0x05
     f4e:	8d 81       	ldd	r24, Y+5	; 0x05
     f50:	9e 81       	ldd	r25, Y+6	; 0x06
     f52:	9a 83       	std	Y+2, r25	; 0x02
     f54:	89 83       	std	Y+1, r24	; 0x01
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	9a 81       	ldd	r25, Y+2	; 0x02
     f5a:	01 97       	sbiw	r24, 0x01	; 1
     f5c:	f1 f7       	brne	.-4      	; 0xf5a <CTRL_unlockDoor+0x10a>
     f5e:	9a 83       	std	Y+2, r25	; 0x02
     f60:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);													  /* EEPROM read/write time*/
		uart_recieve_buffer = UART_recieveByte();						  /* Store in uart_recieve_buffer the uart recieve buffer byte sent from HMI */
     f62:	0e 94 4e 11 	call	0x229c	; 0x229c <UART_recieveByte>
     f66:	88 8b       	std	Y+16, r24	; 0x10
		if (uart_recieve_buffer != eeprom_value)						  /* If a single character mismatch detected */
     f68:	99 89       	ldd	r25, Y+17	; 0x11
     f6a:	88 89       	ldd	r24, Y+16	; 0x10
     f6c:	89 17       	cp	r24, r25
     f6e:	e1 f0       	breq	.+56     	; 0xfa8 <CTRL_unlockDoor+0x158>
		{
			mismatched_counter++;							   /* Count up number of mismatches */
     f70:	80 91 7d 00 	lds	r24, 0x007D
     f74:	8f 5f       	subi	r24, 0xFF	; 255
     f76:	80 93 7d 00 	sts	0x007D, r24
			if (mismatched_counter == MAX_PASSWORD_MISMATCHED) /* If max password mismatches reached */
     f7a:	80 91 7d 00 	lds	r24, 0x007D
     f7e:	83 30       	cpi	r24, 0x03	; 3
     f80:	79 f4       	brne	.+30     	; 0xfa0 <CTRL_unlockDoor+0x150>
			{
				mismatched_counter = 0;		 /* Clear mismatch counter for next password entries */
     f82:	10 92 7d 00 	sts	0x007D, r1
				g_ticks = 0;				 /* Clear Timer ticks to start counting from 0 seconds */
     f86:	10 92 7b 00 	sts	0x007B, r1
     f8a:	10 92 7a 00 	sts	0x007A, r1
				g_sys_state = SYSTEM_LOCKED; /* Switch to SYSTEM_LOCKED state */
     f8e:	84 e0       	ldi	r24, 0x04	; 4
     f90:	80 93 84 00 	sts	0x0084, r24
				UART_sendByte(LOCK_SYSTEM);	 /* Send LOCK_SYSTEM to HMI */
     f94:	83 e2       	ldi	r24, 0x23	; 35
     f96:	0e 94 37 11 	call	0x226e	; 0x226e <UART_sendByte>
				Buzzer_on();				 /* Turn on buzzer as system is in locked state */
     f9a:	0e 94 95 08 	call	0x112a	; 0x112a <Buzzer_on>
     f9e:	1b c0       	rjmp	.+54     	; 0xfd6 <CTRL_unlockDoor+0x186>
			}
			else /* Else max password mismatches not reached send PASSWORD_MISMATCHED to HMI */
			{
				UART_sendByte(PASSWORD_MISMATCHED);
     fa0:	82 e2       	ldi	r24, 0x22	; 34
     fa2:	0e 94 37 11 	call	0x226e	; 0x226e <UART_sendByte>
     fa6:	17 c0       	rjmp	.+46     	; 0xfd6 <CTRL_unlockDoor+0x186>
			}
			return;
		}
		UART_sendByte(CTRL_READY_TO_RECEIVE); /* Send Control ECU is ready to receive */
     fa8:	80 e2       	ldi	r24, 0x20	; 32
     faa:	0e 94 37 11 	call	0x226e	; 0x226e <UART_sendByte>
void CTRL_unlockDoor(void)
{
	static uint8 mismatched_counter = 0;		/* To statically hold number of mismatched passwords */
	uint8 eeprom_value;							/* To store current password character in EEPROM */
	uint8 uart_recieve_buffer;					/* To store the byte in the recieve buffer in a varaible */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) /* Loop for number of PASSWORD_LENGTH characters */
     fae:	8f 85       	ldd	r24, Y+15	; 0x0f
     fb0:	8f 5f       	subi	r24, 0xFF	; 255
     fb2:	8f 87       	std	Y+15, r24	; 0x0f
     fb4:	8f 85       	ldd	r24, Y+15	; 0x0f
     fb6:	85 30       	cpi	r24, 0x05	; 5
     fb8:	08 f4       	brcc	.+2      	; 0xfbc <CTRL_unlockDoor+0x16c>
     fba:	56 cf       	rjmp	.-340    	; 0xe68 <CTRL_unlockDoor+0x18>
			return;
		}
		UART_sendByte(CTRL_READY_TO_RECEIVE); /* Send Control ECU is ready to receive */
	}
	/* As for loop executed without return, execute the code below */
	mismatched_counter = 0;		 /* Clear mismatch counter for next password entries */
     fbc:	10 92 7d 00 	sts	0x007D, r1
	g_ticks = 0;				  /* Clear Timer ticks to start counting from 0 seconds */
     fc0:	10 92 7b 00 	sts	0x007B, r1
     fc4:	10 92 7a 00 	sts	0x007A, r1
	g_sys_state = DOOR_UNLOCKING; /* Switch to DOOR_UNLOCKING state */
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	80 93 84 00 	sts	0x0084, r24
	DcMotor_Rotate(CW, 100);	  /* Rotate DC motor clockwise to open the door */
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	64 e6       	ldi	r22, 0x64	; 100
     fd2:	0e 94 cd 08 	call	0x119a	; 0x119a <DcMotor_Rotate>
}
     fd6:	61 96       	adiw	r28, 0x11	; 17
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	f8 94       	cli
     fdc:	de bf       	out	0x3e, r29	; 62
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	cd bf       	out	0x3d, r28	; 61
     fe2:	cf 91       	pop	r28
     fe4:	df 91       	pop	r29
     fe6:	08 95       	ret

00000fe8 <CTRL_timerCallBack>:
 *
 * Return: void
 *
 */
void CTRL_timerCallBack(void)
{
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	00 d0       	rcall	.+0      	; 0xfee <CTRL_timerCallBack+0x6>
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;			 /* Increment timer ticks as timer interrupts each 1 second */
     ff2:	80 91 7a 00 	lds	r24, 0x007A
     ff6:	90 91 7b 00 	lds	r25, 0x007B
     ffa:	01 96       	adiw	r24, 0x01	; 1
     ffc:	90 93 7b 00 	sts	0x007B, r25
    1000:	80 93 7a 00 	sts	0x007A, r24
	switch (g_sys_state) /* Check for current state*/
    1004:	80 91 84 00 	lds	r24, 0x0084
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	3a 83       	std	Y+2, r19	; 0x02
    100e:	29 83       	std	Y+1, r18	; 0x01
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	9a 81       	ldd	r25, Y+2	; 0x02
    1014:	82 30       	cpi	r24, 0x02	; 2
    1016:	91 05       	cpc	r25, r1
    1018:	49 f1       	breq	.+82     	; 0x106c <CTRL_timerCallBack+0x84>
    101a:	29 81       	ldd	r18, Y+1	; 0x01
    101c:	3a 81       	ldd	r19, Y+2	; 0x02
    101e:	23 30       	cpi	r18, 0x03	; 3
    1020:	31 05       	cpc	r19, r1
    1022:	34 f4       	brge	.+12     	; 0x1030 <CTRL_timerCallBack+0x48>
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	9a 81       	ldd	r25, Y+2	; 0x02
    1028:	81 30       	cpi	r24, 0x01	; 1
    102a:	91 05       	cpc	r25, r1
    102c:	61 f0       	breq	.+24     	; 0x1046 <CTRL_timerCallBack+0x5e>
    102e:	4a c0       	rjmp	.+148    	; 0x10c4 <CTRL_timerCallBack+0xdc>
    1030:	29 81       	ldd	r18, Y+1	; 0x01
    1032:	3a 81       	ldd	r19, Y+2	; 0x02
    1034:	23 30       	cpi	r18, 0x03	; 3
    1036:	31 05       	cpc	r19, r1
    1038:	61 f1       	breq	.+88     	; 0x1092 <CTRL_timerCallBack+0xaa>
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	9a 81       	ldd	r25, Y+2	; 0x02
    103e:	84 30       	cpi	r24, 0x04	; 4
    1040:	91 05       	cpc	r25, r1
    1042:	a9 f1       	breq	.+106    	; 0x10ae <CTRL_timerCallBack+0xc6>
    1044:	3f c0       	rjmp	.+126    	; 0x10c4 <CTRL_timerCallBack+0xdc>
	{
	case DOOR_UNLOCKING:  /* Door Unlocking state, DC motor rotates CW */
		if (g_ticks == 15)/* If 15 second passed */
    1046:	80 91 7a 00 	lds	r24, 0x007A
    104a:	90 91 7b 00 	lds	r25, 0x007B
    104e:	8f 30       	cpi	r24, 0x0F	; 15
    1050:	91 05       	cpc	r25, r1
    1052:	c1 f5       	brne	.+112    	; 0x10c4 <CTRL_timerCallBack+0xdc>
		{
			g_ticks = 0;				 /* Clear Timer ticks to start counting from 0 seconds */
    1054:	10 92 7b 00 	sts	0x007B, r1
    1058:	10 92 7a 00 	sts	0x007A, r1
			g_sys_state = DOOR_UNLOCKED; /* Switch to DOOR_UNLOCKING state */
    105c:	82 e0       	ldi	r24, 0x02	; 2
    105e:	80 93 84 00 	sts	0x0084, r24
			DcMotor_Rotate(OFF, 0);		 /* Stop DC motor to wait for people to pass */
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	60 e0       	ldi	r22, 0x00	; 0
    1066:	0e 94 cd 08 	call	0x119a	; 0x119a <DcMotor_Rotate>
    106a:	2c c0       	rjmp	.+88     	; 0x10c4 <CTRL_timerCallBack+0xdc>
		}
		break;

	case DOOR_UNLOCKED:								   /* Door Unlocked state, DC motor is off for people to pass */
		if (PIR_getState() == PIR_MOTION_NOT_DETECTED) /* If PIR sensor not detecting a motion close the door */
    106c:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <PIR_getState>
    1070:	88 23       	and	r24, r24
    1072:	41 f5       	brne	.+80     	; 0x10c4 <CTRL_timerCallBack+0xdc>
		{
			g_ticks = 0;					 /* Clear Timer ticks to start counting from 0 seconds */
    1074:	10 92 7b 00 	sts	0x007B, r1
    1078:	10 92 7a 00 	sts	0x007A, r1
			g_sys_state = DOOR_LOCKING;		 /* Switch to DOOR_LOCKING state */
    107c:	83 e0       	ldi	r24, 0x03	; 3
    107e:	80 93 84 00 	sts	0x0084, r24
			UART_sendByte(HMI_DOOR_LOCKING); /* Send HMI_DOOR_LOCKING to HMI */
    1082:	85 e2       	ldi	r24, 0x25	; 37
    1084:	0e 94 37 11 	call	0x226e	; 0x226e <UART_sendByte>
			DcMotor_Rotate(ACW, 100);		 /* Rotate DC Motor clockwise to close the door */
    1088:	82 e0       	ldi	r24, 0x02	; 2
    108a:	64 e6       	ldi	r22, 0x64	; 100
    108c:	0e 94 cd 08 	call	0x119a	; 0x119a <DcMotor_Rotate>
    1090:	19 c0       	rjmp	.+50     	; 0x10c4 <CTRL_timerCallBack+0xdc>
		}

		break;

	case DOOR_LOCKING: /* Door Locking state, DC motor rotates ACW */
		if (g_ticks == 15) /* If 15 second passed */
    1092:	80 91 7a 00 	lds	r24, 0x007A
    1096:	90 91 7b 00 	lds	r25, 0x007B
    109a:	8f 30       	cpi	r24, 0x0F	; 15
    109c:	91 05       	cpc	r25, r1
    109e:	91 f4       	brne	.+36     	; 0x10c4 <CTRL_timerCallBack+0xdc>
		{
			g_sys_state = STANDBY;	/* Switch to STANDBY state */
    10a0:	10 92 84 00 	sts	0x0084, r1
			DcMotor_Rotate(OFF, 0); /* Stop DC Motor as door is closed */
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	60 e0       	ldi	r22, 0x00	; 0
    10a8:	0e 94 cd 08 	call	0x119a	; 0x119a <DcMotor_Rotate>
    10ac:	0b c0       	rjmp	.+22     	; 0x10c4 <CTRL_timerCallBack+0xdc>
		}
		break;

	case SYSTEM_LOCKED: /* System Locked state, System is locked and does not read UART message */
		if (g_ticks == 60) /* If 1 minute passed */
    10ae:	80 91 7a 00 	lds	r24, 0x007A
    10b2:	90 91 7b 00 	lds	r25, 0x007B
    10b6:	8c 33       	cpi	r24, 0x3C	; 60
    10b8:	91 05       	cpc	r25, r1
    10ba:	21 f4       	brne	.+8      	; 0x10c4 <CTRL_timerCallBack+0xdc>
		{
			g_sys_state = STANDBY; /* Switch to STANDBY state */
    10bc:	10 92 84 00 	sts	0x0084, r1
			Buzzer_off();		   /* Turn off buzzer as system returned to Standby state */
    10c0:	0e 94 a1 08 	call	0x1142	; 0x1142 <Buzzer_off>
		break;
	default:
			/* Do Nothing as it's stand by state */
		break;
	}
}
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	cf 91       	pop	r28
    10ca:	df 91       	pop	r29
    10cc:	08 95       	ret

000010ce <main>:
 | 	 	 	 	 	 	 MAIN FUNCTION      				 |
 -------------------------------------------------------------
 */

int main(void)
{
    10ce:	df 93       	push	r29
    10d0:	cf 93       	push	r28
    10d2:	0f 92       	push	r0
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
	CTRL_Init();				   /* Initialize modules needed for Control ECU*/
    10d8:	0e 94 a3 05 	call	0xb46	; 0xb46 <CTRL_Init>
	CTRL_savePassword();		   /* As start of the program call CTRL save password function */
    10dc:	0e 94 c8 05 	call	0xb90	; 0xb90 <CTRL_savePassword>
	uint8 uart_recieve_buffer = 0; /* To store the byte in the recieve buffer in a varaible */
    10e0:	19 82       	std	Y+1, r1	; 0x01
	while (1)					   /* Main Loop*/
	{
		if (g_sys_state != SYSTEM_LOCKED) /* If system state is not locked */
    10e2:	80 91 84 00 	lds	r24, 0x0084
    10e6:	84 30       	cpi	r24, 0x04	; 4
    10e8:	e1 f3       	breq	.-8      	; 0x10e2 <main+0x14>
		{
			uart_recieve_buffer = UART_recieveByte(); /* Store in uart_recieve_buffer the uart recieve buffer byte sent from HMI */
    10ea:	0e 94 4e 11 	call	0x229c	; 0x229c <UART_recieveByte>
    10ee:	89 83       	std	Y+1, r24	; 0x01
			if (uart_recieve_buffer == OPEN_DOOR)	  /* If the uart_recieve_buffer byte message code is OPEN_DOOR */
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	87 32       	cpi	r24, 0x27	; 39
    10f4:	19 f4       	brne	.+6      	; 0x10fc <main+0x2e>
			{
				CTRL_unlockDoor(); /* Call CTRL unlcok door function */
    10f6:	0e 94 28 07 	call	0xe50	; 0xe50 <CTRL_unlockDoor>
    10fa:	f3 cf       	rjmp	.-26     	; 0x10e2 <main+0x14>
			}
			else if (uart_recieve_buffer == CHANGE_PASSWORD) /* If the uart_recieve_buffer byte message code is CHANGE_PASSWORD */
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	86 32       	cpi	r24, 0x26	; 38
    1100:	81 f7       	brne	.-32     	; 0x10e2 <main+0x14>
			{
				CTRL_changePassword(); /* Call CTRL change password function */
    1102:	0e 94 65 06 	call	0xcca	; 0xcca <CTRL_changePassword>
    1106:	ed cf       	rjmp	.-38     	; 0x10e2 <main+0x14>

00001108 <Buzzer_init>:
 *
 * Return: void
 *
 */
void Buzzer_init(void)
{
    1108:	df 93       	push	r29
    110a:	cf 93       	push	r28
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN, PIN_OUTPUT);
    1110:	82 e0       	ldi	r24, 0x02	; 2
    1112:	67 e0       	ldi	r22, 0x07	; 7
    1114:	41 e0       	ldi	r20, 0x01	; 1
    1116:	0e 94 b3 09 	call	0x1366	; 0x1366 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
    111a:	82 e0       	ldi	r24, 0x02	; 2
    111c:	67 e0       	ldi	r22, 0x07	; 7
    111e:	40 e0       	ldi	r20, 0x00	; 0
    1120:	0e 94 9e 0a 	call	0x153c	; 0x153c <GPIO_writePin>
}
    1124:	cf 91       	pop	r28
    1126:	df 91       	pop	r29
    1128:	08 95       	ret

0000112a <Buzzer_on>:
 *
 * Return: void
 *
 */
void Buzzer_on(void)
{
    112a:	df 93       	push	r29
    112c:	cf 93       	push	r28
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_HIGH);
    1132:	82 e0       	ldi	r24, 0x02	; 2
    1134:	67 e0       	ldi	r22, 0x07	; 7
    1136:	41 e0       	ldi	r20, 0x01	; 1
    1138:	0e 94 9e 0a 	call	0x153c	; 0x153c <GPIO_writePin>
}
    113c:	cf 91       	pop	r28
    113e:	df 91       	pop	r29
    1140:	08 95       	ret

00001142 <Buzzer_off>:
 *
 * Return: void
 *
 */
void Buzzer_off(void)
{
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
    114a:	82 e0       	ldi	r24, 0x02	; 2
    114c:	67 e0       	ldi	r22, 0x07	; 7
    114e:	40 e0       	ldi	r20, 0x00	; 0
    1150:	0e 94 9e 0a 	call	0x153c	; 0x153c <GPIO_writePin>
}
    1154:	cf 91       	pop	r28
    1156:	df 91       	pop	r29
    1158:	08 95       	ret

0000115a <DcMotor_Init>:
 *
 * Return: void
 *
 */
void DcMotor_Init(void)
{
    115a:	df 93       	push	r29
    115c:	cf 93       	push	r28
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
	/* Setup DC motor pins as output */
	GPIO_setupPinDirection(DC_MOTOR_PORT_IN, DC_MOTOR_IN1, PIN_OUTPUT);
    1162:	83 e0       	ldi	r24, 0x03	; 3
    1164:	66 e0       	ldi	r22, 0x06	; 6
    1166:	41 e0       	ldi	r20, 0x01	; 1
    1168:	0e 94 b3 09 	call	0x1366	; 0x1366 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT_IN, DC_MOTOR_IN2, PIN_OUTPUT);
    116c:	83 e0       	ldi	r24, 0x03	; 3
    116e:	67 e0       	ldi	r22, 0x07	; 7
    1170:	41 e0       	ldi	r20, 0x01	; 1
    1172:	0e 94 b3 09 	call	0x1366	; 0x1366 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT_EN, DC_MOTOR_EN1, PIN_OUTPUT);
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	63 e0       	ldi	r22, 0x03	; 3
    117a:	41 e0       	ldi	r20, 0x01	; 1
    117c:	0e 94 b3 09 	call	0x1366	; 0x1366 <GPIO_setupPinDirection>
	/* DC Motor is off at initialization */
	GPIO_writePin(DC_MOTOR_PORT_IN, DC_MOTOR_IN1, LOGIC_LOW);
    1180:	83 e0       	ldi	r24, 0x03	; 3
    1182:	66 e0       	ldi	r22, 0x06	; 6
    1184:	40 e0       	ldi	r20, 0x00	; 0
    1186:	0e 94 9e 0a 	call	0x153c	; 0x153c <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT_IN, DC_MOTOR_IN2, LOGIC_LOW);
    118a:	83 e0       	ldi	r24, 0x03	; 3
    118c:	67 e0       	ldi	r22, 0x07	; 7
    118e:	40 e0       	ldi	r20, 0x00	; 0
    1190:	0e 94 9e 0a 	call	0x153c	; 0x153c <GPIO_writePin>
}
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	08 95       	ret

0000119a <DcMotor_Rotate>:
 *
 * Return: void
 *
 */
void DcMotor_Rotate(DcMotor_State state, uint8 speed)
{
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	00 d0       	rcall	.+0      	; 0x11a0 <DcMotor_Rotate+0x6>
    11a0:	00 d0       	rcall	.+0      	; 0x11a2 <DcMotor_Rotate+0x8>
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	6a 83       	std	Y+2, r22	; 0x02
	PWM_Timer0_Start(speed);
    11aa:	8a 81       	ldd	r24, Y+2	; 0x02
    11ac:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <PWM_Timer0_Start>
	switch (state)
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	3c 83       	std	Y+4, r19	; 0x04
    11b8:	2b 83       	std	Y+3, r18	; 0x03
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	9c 81       	ldd	r25, Y+4	; 0x04
    11be:	81 30       	cpi	r24, 0x01	; 1
    11c0:	91 05       	cpc	r25, r1
    11c2:	a1 f0       	breq	.+40     	; 0x11ec <DcMotor_Rotate+0x52>
    11c4:	2b 81       	ldd	r18, Y+3	; 0x03
    11c6:	3c 81       	ldd	r19, Y+4	; 0x04
    11c8:	22 30       	cpi	r18, 0x02	; 2
    11ca:	31 05       	cpc	r19, r1
    11cc:	d1 f0       	breq	.+52     	; 0x1202 <DcMotor_Rotate+0x68>
    11ce:	8b 81       	ldd	r24, Y+3	; 0x03
    11d0:	9c 81       	ldd	r25, Y+4	; 0x04
    11d2:	00 97       	sbiw	r24, 0x00	; 0
    11d4:	01 f5       	brne	.+64     	; 0x1216 <DcMotor_Rotate+0x7c>
	{
	case OFF:
		/* Stop the motor */
		GPIO_writePin(DC_MOTOR_PORT_IN, DC_MOTOR_IN1, LOGIC_LOW);
    11d6:	83 e0       	ldi	r24, 0x03	; 3
    11d8:	66 e0       	ldi	r22, 0x06	; 6
    11da:	40 e0       	ldi	r20, 0x00	; 0
    11dc:	0e 94 9e 0a 	call	0x153c	; 0x153c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_IN, DC_MOTOR_IN2, LOGIC_LOW);
    11e0:	83 e0       	ldi	r24, 0x03	; 3
    11e2:	67 e0       	ldi	r22, 0x07	; 7
    11e4:	40 e0       	ldi	r20, 0x00	; 0
    11e6:	0e 94 9e 0a 	call	0x153c	; 0x153c <GPIO_writePin>
    11ea:	15 c0       	rjmp	.+42     	; 0x1216 <DcMotor_Rotate+0x7c>
		break;
	case CW:
		/* Rotates the motor CW */
		GPIO_writePin(DC_MOTOR_PORT_IN, DC_MOTOR_IN1, LOGIC_HIGH);
    11ec:	83 e0       	ldi	r24, 0x03	; 3
    11ee:	66 e0       	ldi	r22, 0x06	; 6
    11f0:	41 e0       	ldi	r20, 0x01	; 1
    11f2:	0e 94 9e 0a 	call	0x153c	; 0x153c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_IN, DC_MOTOR_IN2, LOGIC_LOW);
    11f6:	83 e0       	ldi	r24, 0x03	; 3
    11f8:	67 e0       	ldi	r22, 0x07	; 7
    11fa:	40 e0       	ldi	r20, 0x00	; 0
    11fc:	0e 94 9e 0a 	call	0x153c	; 0x153c <GPIO_writePin>
    1200:	0a c0       	rjmp	.+20     	; 0x1216 <DcMotor_Rotate+0x7c>
		break;
	case ACW:
		/* Rotates the motor A-CW */
		GPIO_writePin(DC_MOTOR_PORT_IN, DC_MOTOR_IN1, LOGIC_LOW);
    1202:	83 e0       	ldi	r24, 0x03	; 3
    1204:	66 e0       	ldi	r22, 0x06	; 6
    1206:	40 e0       	ldi	r20, 0x00	; 0
    1208:	0e 94 9e 0a 	call	0x153c	; 0x153c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_IN, DC_MOTOR_IN2, LOGIC_HIGH);
    120c:	83 e0       	ldi	r24, 0x03	; 3
    120e:	67 e0       	ldi	r22, 0x07	; 7
    1210:	41 e0       	ldi	r20, 0x01	; 1
    1212:	0e 94 9e 0a 	call	0x153c	; 0x153c <GPIO_writePin>
		break;
	default:
		/* Do Nothing */
		break;
	}
}
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	cf 91       	pop	r28
    1220:	df 91       	pop	r29
    1222:	08 95       	ret

00001224 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	00 d0       	rcall	.+0      	; 0x122a <EEPROM_writeByte+0x6>
    122a:	00 d0       	rcall	.+0      	; 0x122c <EEPROM_writeByte+0x8>
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
    1230:	9a 83       	std	Y+2, r25	; 0x02
    1232:	89 83       	std	Y+1, r24	; 0x01
    1234:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1236:	0e 94 67 10 	call	0x20ce	; 0x20ce <TWI_start>
    if (TWI_getStatus() != TWI_START)
    123a:	0e 94 bf 10 	call	0x217e	; 0x217e <TWI_getStatus>
    123e:	88 30       	cpi	r24, 0x08	; 8
    1240:	11 f0       	breq	.+4      	; 0x1246 <EEPROM_writeByte+0x22>
        return ERROR;
    1242:	1c 82       	std	Y+4, r1	; 0x04
    1244:	28 c0       	rjmp	.+80     	; 0x1296 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	9a 81       	ldd	r25, Y+2	; 0x02
    124a:	80 70       	andi	r24, 0x00	; 0
    124c:	97 70       	andi	r25, 0x07	; 7
    124e:	88 0f       	add	r24, r24
    1250:	89 2f       	mov	r24, r25
    1252:	88 1f       	adc	r24, r24
    1254:	99 0b       	sbc	r25, r25
    1256:	91 95       	neg	r25
    1258:	80 6a       	ori	r24, 0xA0	; 160
    125a:	0e 94 82 10 	call	0x2104	; 0x2104 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    125e:	0e 94 bf 10 	call	0x217e	; 0x217e <TWI_getStatus>
    1262:	88 31       	cpi	r24, 0x18	; 24
    1264:	11 f0       	breq	.+4      	; 0x126a <EEPROM_writeByte+0x46>
        return ERROR; 
    1266:	1c 82       	std	Y+4, r1	; 0x04
    1268:	16 c0       	rjmp	.+44     	; 0x1296 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	0e 94 82 10 	call	0x2104	; 0x2104 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1270:	0e 94 bf 10 	call	0x217e	; 0x217e <TWI_getStatus>
    1274:	88 32       	cpi	r24, 0x28	; 40
    1276:	11 f0       	breq	.+4      	; 0x127c <EEPROM_writeByte+0x58>
        return ERROR;
    1278:	1c 82       	std	Y+4, r1	; 0x04
    127a:	0d c0       	rjmp	.+26     	; 0x1296 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	0e 94 82 10 	call	0x2104	; 0x2104 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1282:	0e 94 bf 10 	call	0x217e	; 0x217e <TWI_getStatus>
    1286:	88 32       	cpi	r24, 0x28	; 40
    1288:	11 f0       	breq	.+4      	; 0x128e <EEPROM_writeByte+0x6a>
        return ERROR;
    128a:	1c 82       	std	Y+4, r1	; 0x04
    128c:	04 c0       	rjmp	.+8      	; 0x1296 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    128e:	0e 94 77 10 	call	0x20ee	; 0x20ee <TWI_stop>
	
    return SUCCESS;
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	8c 83       	std	Y+4, r24	; 0x04
    1296:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	08 95       	ret

000012a6 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	00 d0       	rcall	.+0      	; 0x12ac <EEPROM_readByte+0x6>
    12ac:	00 d0       	rcall	.+0      	; 0x12ae <EEPROM_readByte+0x8>
    12ae:	0f 92       	push	r0
    12b0:	cd b7       	in	r28, 0x3d	; 61
    12b2:	de b7       	in	r29, 0x3e	; 62
    12b4:	9a 83       	std	Y+2, r25	; 0x02
    12b6:	89 83       	std	Y+1, r24	; 0x01
    12b8:	7c 83       	std	Y+4, r23	; 0x04
    12ba:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    12bc:	0e 94 67 10 	call	0x20ce	; 0x20ce <TWI_start>
    if (TWI_getStatus() != TWI_START)
    12c0:	0e 94 bf 10 	call	0x217e	; 0x217e <TWI_getStatus>
    12c4:	88 30       	cpi	r24, 0x08	; 8
    12c6:	11 f0       	breq	.+4      	; 0x12cc <EEPROM_readByte+0x26>
        return ERROR;
    12c8:	1d 82       	std	Y+5, r1	; 0x05
    12ca:	44 c0       	rjmp	.+136    	; 0x1354 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	9a 81       	ldd	r25, Y+2	; 0x02
    12d0:	80 70       	andi	r24, 0x00	; 0
    12d2:	97 70       	andi	r25, 0x07	; 7
    12d4:	88 0f       	add	r24, r24
    12d6:	89 2f       	mov	r24, r25
    12d8:	88 1f       	adc	r24, r24
    12da:	99 0b       	sbc	r25, r25
    12dc:	91 95       	neg	r25
    12de:	80 6a       	ori	r24, 0xA0	; 160
    12e0:	0e 94 82 10 	call	0x2104	; 0x2104 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    12e4:	0e 94 bf 10 	call	0x217e	; 0x217e <TWI_getStatus>
    12e8:	88 31       	cpi	r24, 0x18	; 24
    12ea:	11 f0       	breq	.+4      	; 0x12f0 <EEPROM_readByte+0x4a>
        return ERROR;
    12ec:	1d 82       	std	Y+5, r1	; 0x05
    12ee:	32 c0       	rjmp	.+100    	; 0x1354 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
    12f2:	0e 94 82 10 	call	0x2104	; 0x2104 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    12f6:	0e 94 bf 10 	call	0x217e	; 0x217e <TWI_getStatus>
    12fa:	88 32       	cpi	r24, 0x28	; 40
    12fc:	11 f0       	breq	.+4      	; 0x1302 <EEPROM_readByte+0x5c>
        return ERROR;
    12fe:	1d 82       	std	Y+5, r1	; 0x05
    1300:	29 c0       	rjmp	.+82     	; 0x1354 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1302:	0e 94 67 10 	call	0x20ce	; 0x20ce <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1306:	0e 94 bf 10 	call	0x217e	; 0x217e <TWI_getStatus>
    130a:	80 31       	cpi	r24, 0x10	; 16
    130c:	11 f0       	breq	.+4      	; 0x1312 <EEPROM_readByte+0x6c>
        return ERROR;
    130e:	1d 82       	std	Y+5, r1	; 0x05
    1310:	21 c0       	rjmp	.+66     	; 0x1354 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1312:	89 81       	ldd	r24, Y+1	; 0x01
    1314:	9a 81       	ldd	r25, Y+2	; 0x02
    1316:	80 70       	andi	r24, 0x00	; 0
    1318:	97 70       	andi	r25, 0x07	; 7
    131a:	88 0f       	add	r24, r24
    131c:	89 2f       	mov	r24, r25
    131e:	88 1f       	adc	r24, r24
    1320:	99 0b       	sbc	r25, r25
    1322:	91 95       	neg	r25
    1324:	81 6a       	ori	r24, 0xA1	; 161
    1326:	0e 94 82 10 	call	0x2104	; 0x2104 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    132a:	0e 94 bf 10 	call	0x217e	; 0x217e <TWI_getStatus>
    132e:	80 34       	cpi	r24, 0x40	; 64
    1330:	11 f0       	breq	.+4      	; 0x1336 <EEPROM_readByte+0x90>
        return ERROR;
    1332:	1d 82       	std	Y+5, r1	; 0x05
    1334:	0f c0       	rjmp	.+30     	; 0x1354 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1336:	0e 94 ac 10 	call	0x2158	; 0x2158 <TWI_readByteWithNACK>
    133a:	eb 81       	ldd	r30, Y+3	; 0x03
    133c:	fc 81       	ldd	r31, Y+4	; 0x04
    133e:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1340:	0e 94 bf 10 	call	0x217e	; 0x217e <TWI_getStatus>
    1344:	88 35       	cpi	r24, 0x58	; 88
    1346:	11 f0       	breq	.+4      	; 0x134c <EEPROM_readByte+0xa6>
        return ERROR;
    1348:	1d 82       	std	Y+5, r1	; 0x05
    134a:	04 c0       	rjmp	.+8      	; 0x1354 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    134c:	0e 94 77 10 	call	0x20ee	; 0x20ee <TWI_stop>

    return SUCCESS;
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	8d 83       	std	Y+5, r24	; 0x05
    1354:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	cf 91       	pop	r28
    1362:	df 91       	pop	r29
    1364:	08 95       	ret

00001366 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	00 d0       	rcall	.+0      	; 0x136c <GPIO_setupPinDirection+0x6>
    136c:	00 d0       	rcall	.+0      	; 0x136e <GPIO_setupPinDirection+0x8>
    136e:	0f 92       	push	r0
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	89 83       	std	Y+1, r24	; 0x01
    1376:	6a 83       	std	Y+2, r22	; 0x02
    1378:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	88 30       	cpi	r24, 0x08	; 8
    137e:	08 f0       	brcs	.+2      	; 0x1382 <GPIO_setupPinDirection+0x1c>
    1380:	d5 c0       	rjmp	.+426    	; 0x152c <GPIO_setupPinDirection+0x1c6>
    1382:	89 81       	ldd	r24, Y+1	; 0x01
    1384:	84 30       	cpi	r24, 0x04	; 4
    1386:	08 f0       	brcs	.+2      	; 0x138a <GPIO_setupPinDirection+0x24>
    1388:	d1 c0       	rjmp	.+418    	; 0x152c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	3d 83       	std	Y+5, r19	; 0x05
    1392:	2c 83       	std	Y+4, r18	; 0x04
    1394:	8c 81       	ldd	r24, Y+4	; 0x04
    1396:	9d 81       	ldd	r25, Y+5	; 0x05
    1398:	81 30       	cpi	r24, 0x01	; 1
    139a:	91 05       	cpc	r25, r1
    139c:	09 f4       	brne	.+2      	; 0x13a0 <GPIO_setupPinDirection+0x3a>
    139e:	43 c0       	rjmp	.+134    	; 0x1426 <GPIO_setupPinDirection+0xc0>
    13a0:	2c 81       	ldd	r18, Y+4	; 0x04
    13a2:	3d 81       	ldd	r19, Y+5	; 0x05
    13a4:	22 30       	cpi	r18, 0x02	; 2
    13a6:	31 05       	cpc	r19, r1
    13a8:	2c f4       	brge	.+10     	; 0x13b4 <GPIO_setupPinDirection+0x4e>
    13aa:	8c 81       	ldd	r24, Y+4	; 0x04
    13ac:	9d 81       	ldd	r25, Y+5	; 0x05
    13ae:	00 97       	sbiw	r24, 0x00	; 0
    13b0:	71 f0       	breq	.+28     	; 0x13ce <GPIO_setupPinDirection+0x68>
    13b2:	bc c0       	rjmp	.+376    	; 0x152c <GPIO_setupPinDirection+0x1c6>
    13b4:	2c 81       	ldd	r18, Y+4	; 0x04
    13b6:	3d 81       	ldd	r19, Y+5	; 0x05
    13b8:	22 30       	cpi	r18, 0x02	; 2
    13ba:	31 05       	cpc	r19, r1
    13bc:	09 f4       	brne	.+2      	; 0x13c0 <GPIO_setupPinDirection+0x5a>
    13be:	5f c0       	rjmp	.+190    	; 0x147e <GPIO_setupPinDirection+0x118>
    13c0:	8c 81       	ldd	r24, Y+4	; 0x04
    13c2:	9d 81       	ldd	r25, Y+5	; 0x05
    13c4:	83 30       	cpi	r24, 0x03	; 3
    13c6:	91 05       	cpc	r25, r1
    13c8:	09 f4       	brne	.+2      	; 0x13cc <GPIO_setupPinDirection+0x66>
    13ca:	85 c0       	rjmp	.+266    	; 0x14d6 <GPIO_setupPinDirection+0x170>
    13cc:	af c0       	rjmp	.+350    	; 0x152c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	81 30       	cpi	r24, 0x01	; 1
    13d2:	a1 f4       	brne	.+40     	; 0x13fc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    13d4:	aa e3       	ldi	r26, 0x3A	; 58
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	ea e3       	ldi	r30, 0x3A	; 58
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	48 2f       	mov	r20, r24
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	28 2f       	mov	r18, r24
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	02 2e       	mov	r0, r18
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <GPIO_setupPinDirection+0x8c>
    13ee:	88 0f       	add	r24, r24
    13f0:	99 1f       	adc	r25, r25
    13f2:	0a 94       	dec	r0
    13f4:	e2 f7       	brpl	.-8      	; 0x13ee <GPIO_setupPinDirection+0x88>
    13f6:	84 2b       	or	r24, r20
    13f8:	8c 93       	st	X, r24
    13fa:	98 c0       	rjmp	.+304    	; 0x152c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    13fc:	aa e3       	ldi	r26, 0x3A	; 58
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	ea e3       	ldi	r30, 0x3A	; 58
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	48 2f       	mov	r20, r24
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	02 2e       	mov	r0, r18
    1414:	02 c0       	rjmp	.+4      	; 0x141a <GPIO_setupPinDirection+0xb4>
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	0a 94       	dec	r0
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <GPIO_setupPinDirection+0xb0>
    141e:	80 95       	com	r24
    1420:	84 23       	and	r24, r20
    1422:	8c 93       	st	X, r24
    1424:	83 c0       	rjmp	.+262    	; 0x152c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	81 30       	cpi	r24, 0x01	; 1
    142a:	a1 f4       	brne	.+40     	; 0x1454 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    142c:	a7 e3       	ldi	r26, 0x37	; 55
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	e7 e3       	ldi	r30, 0x37	; 55
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	48 2f       	mov	r20, r24
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	02 2e       	mov	r0, r18
    1444:	02 c0       	rjmp	.+4      	; 0x144a <GPIO_setupPinDirection+0xe4>
    1446:	88 0f       	add	r24, r24
    1448:	99 1f       	adc	r25, r25
    144a:	0a 94       	dec	r0
    144c:	e2 f7       	brpl	.-8      	; 0x1446 <GPIO_setupPinDirection+0xe0>
    144e:	84 2b       	or	r24, r20
    1450:	8c 93       	st	X, r24
    1452:	6c c0       	rjmp	.+216    	; 0x152c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1454:	a7 e3       	ldi	r26, 0x37	; 55
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e7 e3       	ldi	r30, 0x37	; 55
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	48 2f       	mov	r20, r24
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	02 2e       	mov	r0, r18
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <GPIO_setupPinDirection+0x10c>
    146e:	88 0f       	add	r24, r24
    1470:	99 1f       	adc	r25, r25
    1472:	0a 94       	dec	r0
    1474:	e2 f7       	brpl	.-8      	; 0x146e <GPIO_setupPinDirection+0x108>
    1476:	80 95       	com	r24
    1478:	84 23       	and	r24, r20
    147a:	8c 93       	st	X, r24
    147c:	57 c0       	rjmp	.+174    	; 0x152c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	81 30       	cpi	r24, 0x01	; 1
    1482:	a1 f4       	brne	.+40     	; 0x14ac <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1484:	a4 e3       	ldi	r26, 0x34	; 52
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e4 e3       	ldi	r30, 0x34	; 52
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	48 2f       	mov	r20, r24
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	02 2e       	mov	r0, r18
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <GPIO_setupPinDirection+0x13c>
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	0a 94       	dec	r0
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <GPIO_setupPinDirection+0x138>
    14a6:	84 2b       	or	r24, r20
    14a8:	8c 93       	st	X, r24
    14aa:	40 c0       	rjmp	.+128    	; 0x152c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    14ac:	a4 e3       	ldi	r26, 0x34	; 52
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e4 e3       	ldi	r30, 0x34	; 52
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	48 2f       	mov	r20, r24
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	02 2e       	mov	r0, r18
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <GPIO_setupPinDirection+0x164>
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	0a 94       	dec	r0
    14cc:	e2 f7       	brpl	.-8      	; 0x14c6 <GPIO_setupPinDirection+0x160>
    14ce:	80 95       	com	r24
    14d0:	84 23       	and	r24, r20
    14d2:	8c 93       	st	X, r24
    14d4:	2b c0       	rjmp	.+86     	; 0x152c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	81 30       	cpi	r24, 0x01	; 1
    14da:	a1 f4       	brne	.+40     	; 0x1504 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    14dc:	a1 e3       	ldi	r26, 0x31	; 49
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e1 e3       	ldi	r30, 0x31	; 49
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	48 2f       	mov	r20, r24
    14e8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	02 2e       	mov	r0, r18
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <GPIO_setupPinDirection+0x194>
    14f6:	88 0f       	add	r24, r24
    14f8:	99 1f       	adc	r25, r25
    14fa:	0a 94       	dec	r0
    14fc:	e2 f7       	brpl	.-8      	; 0x14f6 <GPIO_setupPinDirection+0x190>
    14fe:	84 2b       	or	r24, r20
    1500:	8c 93       	st	X, r24
    1502:	14 c0       	rjmp	.+40     	; 0x152c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1504:	a1 e3       	ldi	r26, 0x31	; 49
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e1 e3       	ldi	r30, 0x31	; 49
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	48 2f       	mov	r20, r24
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	28 2f       	mov	r18, r24
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	02 2e       	mov	r0, r18
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <GPIO_setupPinDirection+0x1bc>
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	0a 94       	dec	r0
    1524:	e2 f7       	brpl	.-8      	; 0x151e <GPIO_setupPinDirection+0x1b8>
    1526:	80 95       	com	r24
    1528:	84 23       	and	r24, r20
    152a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	cf 91       	pop	r28
    1538:	df 91       	pop	r29
    153a:	08 95       	ret

0000153c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    153c:	df 93       	push	r29
    153e:	cf 93       	push	r28
    1540:	00 d0       	rcall	.+0      	; 0x1542 <GPIO_writePin+0x6>
    1542:	00 d0       	rcall	.+0      	; 0x1544 <GPIO_writePin+0x8>
    1544:	0f 92       	push	r0
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
    154a:	89 83       	std	Y+1, r24	; 0x01
    154c:	6a 83       	std	Y+2, r22	; 0x02
    154e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	88 30       	cpi	r24, 0x08	; 8
    1554:	08 f0       	brcs	.+2      	; 0x1558 <GPIO_writePin+0x1c>
    1556:	d5 c0       	rjmp	.+426    	; 0x1702 <GPIO_writePin+0x1c6>
    1558:	89 81       	ldd	r24, Y+1	; 0x01
    155a:	84 30       	cpi	r24, 0x04	; 4
    155c:	08 f0       	brcs	.+2      	; 0x1560 <GPIO_writePin+0x24>
    155e:	d1 c0       	rjmp	.+418    	; 0x1702 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1560:	89 81       	ldd	r24, Y+1	; 0x01
    1562:	28 2f       	mov	r18, r24
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	3d 83       	std	Y+5, r19	; 0x05
    1568:	2c 83       	std	Y+4, r18	; 0x04
    156a:	8c 81       	ldd	r24, Y+4	; 0x04
    156c:	9d 81       	ldd	r25, Y+5	; 0x05
    156e:	81 30       	cpi	r24, 0x01	; 1
    1570:	91 05       	cpc	r25, r1
    1572:	09 f4       	brne	.+2      	; 0x1576 <GPIO_writePin+0x3a>
    1574:	43 c0       	rjmp	.+134    	; 0x15fc <GPIO_writePin+0xc0>
    1576:	2c 81       	ldd	r18, Y+4	; 0x04
    1578:	3d 81       	ldd	r19, Y+5	; 0x05
    157a:	22 30       	cpi	r18, 0x02	; 2
    157c:	31 05       	cpc	r19, r1
    157e:	2c f4       	brge	.+10     	; 0x158a <GPIO_writePin+0x4e>
    1580:	8c 81       	ldd	r24, Y+4	; 0x04
    1582:	9d 81       	ldd	r25, Y+5	; 0x05
    1584:	00 97       	sbiw	r24, 0x00	; 0
    1586:	71 f0       	breq	.+28     	; 0x15a4 <GPIO_writePin+0x68>
    1588:	bc c0       	rjmp	.+376    	; 0x1702 <GPIO_writePin+0x1c6>
    158a:	2c 81       	ldd	r18, Y+4	; 0x04
    158c:	3d 81       	ldd	r19, Y+5	; 0x05
    158e:	22 30       	cpi	r18, 0x02	; 2
    1590:	31 05       	cpc	r19, r1
    1592:	09 f4       	brne	.+2      	; 0x1596 <GPIO_writePin+0x5a>
    1594:	5f c0       	rjmp	.+190    	; 0x1654 <GPIO_writePin+0x118>
    1596:	8c 81       	ldd	r24, Y+4	; 0x04
    1598:	9d 81       	ldd	r25, Y+5	; 0x05
    159a:	83 30       	cpi	r24, 0x03	; 3
    159c:	91 05       	cpc	r25, r1
    159e:	09 f4       	brne	.+2      	; 0x15a2 <GPIO_writePin+0x66>
    15a0:	85 c0       	rjmp	.+266    	; 0x16ac <GPIO_writePin+0x170>
    15a2:	af c0       	rjmp	.+350    	; 0x1702 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	81 30       	cpi	r24, 0x01	; 1
    15a8:	a1 f4       	brne	.+40     	; 0x15d2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    15aa:	ab e3       	ldi	r26, 0x3B	; 59
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	eb e3       	ldi	r30, 0x3B	; 59
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	48 2f       	mov	r20, r24
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	02 2e       	mov	r0, r18
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <GPIO_writePin+0x8c>
    15c4:	88 0f       	add	r24, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	0a 94       	dec	r0
    15ca:	e2 f7       	brpl	.-8      	; 0x15c4 <GPIO_writePin+0x88>
    15cc:	84 2b       	or	r24, r20
    15ce:	8c 93       	st	X, r24
    15d0:	98 c0       	rjmp	.+304    	; 0x1702 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    15d2:	ab e3       	ldi	r26, 0x3B	; 59
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	eb e3       	ldi	r30, 0x3B	; 59
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	48 2f       	mov	r20, r24
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	28 2f       	mov	r18, r24
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	02 2e       	mov	r0, r18
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <GPIO_writePin+0xb4>
    15ec:	88 0f       	add	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	0a 94       	dec	r0
    15f2:	e2 f7       	brpl	.-8      	; 0x15ec <GPIO_writePin+0xb0>
    15f4:	80 95       	com	r24
    15f6:	84 23       	and	r24, r20
    15f8:	8c 93       	st	X, r24
    15fa:	83 c0       	rjmp	.+262    	; 0x1702 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	81 30       	cpi	r24, 0x01	; 1
    1600:	a1 f4       	brne	.+40     	; 0x162a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1602:	a8 e3       	ldi	r26, 0x38	; 56
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	e8 e3       	ldi	r30, 0x38	; 56
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	48 2f       	mov	r20, r24
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	02 2e       	mov	r0, r18
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <GPIO_writePin+0xe4>
    161c:	88 0f       	add	r24, r24
    161e:	99 1f       	adc	r25, r25
    1620:	0a 94       	dec	r0
    1622:	e2 f7       	brpl	.-8      	; 0x161c <GPIO_writePin+0xe0>
    1624:	84 2b       	or	r24, r20
    1626:	8c 93       	st	X, r24
    1628:	6c c0       	rjmp	.+216    	; 0x1702 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    162a:	a8 e3       	ldi	r26, 0x38	; 56
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	e8 e3       	ldi	r30, 0x38	; 56
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	48 2f       	mov	r20, r24
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	02 2e       	mov	r0, r18
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <GPIO_writePin+0x10c>
    1644:	88 0f       	add	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	0a 94       	dec	r0
    164a:	e2 f7       	brpl	.-8      	; 0x1644 <GPIO_writePin+0x108>
    164c:	80 95       	com	r24
    164e:	84 23       	and	r24, r20
    1650:	8c 93       	st	X, r24
    1652:	57 c0       	rjmp	.+174    	; 0x1702 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1654:	8b 81       	ldd	r24, Y+3	; 0x03
    1656:	81 30       	cpi	r24, 0x01	; 1
    1658:	a1 f4       	brne	.+40     	; 0x1682 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    165a:	a5 e3       	ldi	r26, 0x35	; 53
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	e5 e3       	ldi	r30, 0x35	; 53
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	48 2f       	mov	r20, r24
    1666:	8a 81       	ldd	r24, Y+2	; 0x02
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	02 2e       	mov	r0, r18
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <GPIO_writePin+0x13c>
    1674:	88 0f       	add	r24, r24
    1676:	99 1f       	adc	r25, r25
    1678:	0a 94       	dec	r0
    167a:	e2 f7       	brpl	.-8      	; 0x1674 <GPIO_writePin+0x138>
    167c:	84 2b       	or	r24, r20
    167e:	8c 93       	st	X, r24
    1680:	40 c0       	rjmp	.+128    	; 0x1702 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1682:	a5 e3       	ldi	r26, 0x35	; 53
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e5 e3       	ldi	r30, 0x35	; 53
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	48 2f       	mov	r20, r24
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	28 2f       	mov	r18, r24
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	02 2e       	mov	r0, r18
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <GPIO_writePin+0x164>
    169c:	88 0f       	add	r24, r24
    169e:	99 1f       	adc	r25, r25
    16a0:	0a 94       	dec	r0
    16a2:	e2 f7       	brpl	.-8      	; 0x169c <GPIO_writePin+0x160>
    16a4:	80 95       	com	r24
    16a6:	84 23       	and	r24, r20
    16a8:	8c 93       	st	X, r24
    16aa:	2b c0       	rjmp	.+86     	; 0x1702 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    16ac:	8b 81       	ldd	r24, Y+3	; 0x03
    16ae:	81 30       	cpi	r24, 0x01	; 1
    16b0:	a1 f4       	brne	.+40     	; 0x16da <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    16b2:	a2 e3       	ldi	r26, 0x32	; 50
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	e2 e3       	ldi	r30, 0x32	; 50
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	48 2f       	mov	r20, r24
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	02 2e       	mov	r0, r18
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <GPIO_writePin+0x194>
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	0a 94       	dec	r0
    16d2:	e2 f7       	brpl	.-8      	; 0x16cc <GPIO_writePin+0x190>
    16d4:	84 2b       	or	r24, r20
    16d6:	8c 93       	st	X, r24
    16d8:	14 c0       	rjmp	.+40     	; 0x1702 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    16da:	a2 e3       	ldi	r26, 0x32	; 50
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	e2 e3       	ldi	r30, 0x32	; 50
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	48 2f       	mov	r20, r24
    16e6:	8a 81       	ldd	r24, Y+2	; 0x02
    16e8:	28 2f       	mov	r18, r24
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	02 2e       	mov	r0, r18
    16f2:	02 c0       	rjmp	.+4      	; 0x16f8 <GPIO_writePin+0x1bc>
    16f4:	88 0f       	add	r24, r24
    16f6:	99 1f       	adc	r25, r25
    16f8:	0a 94       	dec	r0
    16fa:	e2 f7       	brpl	.-8      	; 0x16f4 <GPIO_writePin+0x1b8>
    16fc:	80 95       	com	r24
    16fe:	84 23       	and	r24, r20
    1700:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1702:	0f 90       	pop	r0
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
    1708:	0f 90       	pop	r0
    170a:	0f 90       	pop	r0
    170c:	cf 91       	pop	r28
    170e:	df 91       	pop	r29
    1710:	08 95       	ret

00001712 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1712:	df 93       	push	r29
    1714:	cf 93       	push	r28
    1716:	00 d0       	rcall	.+0      	; 0x1718 <GPIO_readPin+0x6>
    1718:	00 d0       	rcall	.+0      	; 0x171a <GPIO_readPin+0x8>
    171a:	0f 92       	push	r0
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    1720:	8a 83       	std	Y+2, r24	; 0x02
    1722:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1724:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	88 30       	cpi	r24, 0x08	; 8
    172a:	08 f0       	brcs	.+2      	; 0x172e <GPIO_readPin+0x1c>
    172c:	84 c0       	rjmp	.+264    	; 0x1836 <GPIO_readPin+0x124>
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	84 30       	cpi	r24, 0x04	; 4
    1732:	08 f0       	brcs	.+2      	; 0x1736 <GPIO_readPin+0x24>
    1734:	80 c0       	rjmp	.+256    	; 0x1836 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1736:	8a 81       	ldd	r24, Y+2	; 0x02
    1738:	28 2f       	mov	r18, r24
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	3d 83       	std	Y+5, r19	; 0x05
    173e:	2c 83       	std	Y+4, r18	; 0x04
    1740:	4c 81       	ldd	r20, Y+4	; 0x04
    1742:	5d 81       	ldd	r21, Y+5	; 0x05
    1744:	41 30       	cpi	r20, 0x01	; 1
    1746:	51 05       	cpc	r21, r1
    1748:	79 f1       	breq	.+94     	; 0x17a8 <GPIO_readPin+0x96>
    174a:	8c 81       	ldd	r24, Y+4	; 0x04
    174c:	9d 81       	ldd	r25, Y+5	; 0x05
    174e:	82 30       	cpi	r24, 0x02	; 2
    1750:	91 05       	cpc	r25, r1
    1752:	34 f4       	brge	.+12     	; 0x1760 <GPIO_readPin+0x4e>
    1754:	2c 81       	ldd	r18, Y+4	; 0x04
    1756:	3d 81       	ldd	r19, Y+5	; 0x05
    1758:	21 15       	cp	r18, r1
    175a:	31 05       	cpc	r19, r1
    175c:	69 f0       	breq	.+26     	; 0x1778 <GPIO_readPin+0x66>
    175e:	6b c0       	rjmp	.+214    	; 0x1836 <GPIO_readPin+0x124>
    1760:	4c 81       	ldd	r20, Y+4	; 0x04
    1762:	5d 81       	ldd	r21, Y+5	; 0x05
    1764:	42 30       	cpi	r20, 0x02	; 2
    1766:	51 05       	cpc	r21, r1
    1768:	b9 f1       	breq	.+110    	; 0x17d8 <GPIO_readPin+0xc6>
    176a:	8c 81       	ldd	r24, Y+4	; 0x04
    176c:	9d 81       	ldd	r25, Y+5	; 0x05
    176e:	83 30       	cpi	r24, 0x03	; 3
    1770:	91 05       	cpc	r25, r1
    1772:	09 f4       	brne	.+2      	; 0x1776 <GPIO_readPin+0x64>
    1774:	49 c0       	rjmp	.+146    	; 0x1808 <GPIO_readPin+0xf6>
    1776:	5f c0       	rjmp	.+190    	; 0x1836 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1778:	e9 e3       	ldi	r30, 0x39	; 57
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	28 2f       	mov	r18, r24
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	8b 81       	ldd	r24, Y+3	; 0x03
    1784:	88 2f       	mov	r24, r24
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	a9 01       	movw	r20, r18
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <GPIO_readPin+0x7e>
    178c:	55 95       	asr	r21
    178e:	47 95       	ror	r20
    1790:	8a 95       	dec	r24
    1792:	e2 f7       	brpl	.-8      	; 0x178c <GPIO_readPin+0x7a>
    1794:	ca 01       	movw	r24, r20
    1796:	81 70       	andi	r24, 0x01	; 1
    1798:	90 70       	andi	r25, 0x00	; 0
    179a:	88 23       	and	r24, r24
    179c:	19 f0       	breq	.+6      	; 0x17a4 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	89 83       	std	Y+1, r24	; 0x01
    17a2:	49 c0       	rjmp	.+146    	; 0x1836 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17a4:	19 82       	std	Y+1, r1	; 0x01
    17a6:	47 c0       	rjmp	.+142    	; 0x1836 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    17a8:	e6 e3       	ldi	r30, 0x36	; 54
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	28 2f       	mov	r18, r24
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	88 2f       	mov	r24, r24
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	a9 01       	movw	r20, r18
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <GPIO_readPin+0xae>
    17bc:	55 95       	asr	r21
    17be:	47 95       	ror	r20
    17c0:	8a 95       	dec	r24
    17c2:	e2 f7       	brpl	.-8      	; 0x17bc <GPIO_readPin+0xaa>
    17c4:	ca 01       	movw	r24, r20
    17c6:	81 70       	andi	r24, 0x01	; 1
    17c8:	90 70       	andi	r25, 0x00	; 0
    17ca:	88 23       	and	r24, r24
    17cc:	19 f0       	breq	.+6      	; 0x17d4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	89 83       	std	Y+1, r24	; 0x01
    17d2:	31 c0       	rjmp	.+98     	; 0x1836 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17d4:	19 82       	std	Y+1, r1	; 0x01
    17d6:	2f c0       	rjmp	.+94     	; 0x1836 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    17d8:	e3 e3       	ldi	r30, 0x33	; 51
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	28 2f       	mov	r18, r24
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
    17e4:	88 2f       	mov	r24, r24
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	a9 01       	movw	r20, r18
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <GPIO_readPin+0xde>
    17ec:	55 95       	asr	r21
    17ee:	47 95       	ror	r20
    17f0:	8a 95       	dec	r24
    17f2:	e2 f7       	brpl	.-8      	; 0x17ec <GPIO_readPin+0xda>
    17f4:	ca 01       	movw	r24, r20
    17f6:	81 70       	andi	r24, 0x01	; 1
    17f8:	90 70       	andi	r25, 0x00	; 0
    17fa:	88 23       	and	r24, r24
    17fc:	19 f0       	breq	.+6      	; 0x1804 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	89 83       	std	Y+1, r24	; 0x01
    1802:	19 c0       	rjmp	.+50     	; 0x1836 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1804:	19 82       	std	Y+1, r1	; 0x01
    1806:	17 c0       	rjmp	.+46     	; 0x1836 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1808:	e0 e3       	ldi	r30, 0x30	; 48
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	28 2f       	mov	r18, r24
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	8b 81       	ldd	r24, Y+3	; 0x03
    1814:	88 2f       	mov	r24, r24
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	a9 01       	movw	r20, r18
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <GPIO_readPin+0x10e>
    181c:	55 95       	asr	r21
    181e:	47 95       	ror	r20
    1820:	8a 95       	dec	r24
    1822:	e2 f7       	brpl	.-8      	; 0x181c <GPIO_readPin+0x10a>
    1824:	ca 01       	movw	r24, r20
    1826:	81 70       	andi	r24, 0x01	; 1
    1828:	90 70       	andi	r25, 0x00	; 0
    182a:	88 23       	and	r24, r24
    182c:	19 f0       	breq	.+6      	; 0x1834 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	89 83       	std	Y+1, r24	; 0x01
    1832:	01 c0       	rjmp	.+2      	; 0x1836 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1834:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1836:	89 81       	ldd	r24, Y+1	; 0x01
}
    1838:	0f 90       	pop	r0
    183a:	0f 90       	pop	r0
    183c:	0f 90       	pop	r0
    183e:	0f 90       	pop	r0
    1840:	0f 90       	pop	r0
    1842:	cf 91       	pop	r28
    1844:	df 91       	pop	r29
    1846:	08 95       	ret

00001848 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1848:	df 93       	push	r29
    184a:	cf 93       	push	r28
    184c:	00 d0       	rcall	.+0      	; 0x184e <GPIO_setupPortDirection+0x6>
    184e:	00 d0       	rcall	.+0      	; 0x1850 <GPIO_setupPortDirection+0x8>
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
    1854:	89 83       	std	Y+1, r24	; 0x01
    1856:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1858:	89 81       	ldd	r24, Y+1	; 0x01
    185a:	84 30       	cpi	r24, 0x04	; 4
    185c:	90 f5       	brcc	.+100    	; 0x18c2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    185e:	89 81       	ldd	r24, Y+1	; 0x01
    1860:	28 2f       	mov	r18, r24
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	3c 83       	std	Y+4, r19	; 0x04
    1866:	2b 83       	std	Y+3, r18	; 0x03
    1868:	8b 81       	ldd	r24, Y+3	; 0x03
    186a:	9c 81       	ldd	r25, Y+4	; 0x04
    186c:	81 30       	cpi	r24, 0x01	; 1
    186e:	91 05       	cpc	r25, r1
    1870:	d1 f0       	breq	.+52     	; 0x18a6 <GPIO_setupPortDirection+0x5e>
    1872:	2b 81       	ldd	r18, Y+3	; 0x03
    1874:	3c 81       	ldd	r19, Y+4	; 0x04
    1876:	22 30       	cpi	r18, 0x02	; 2
    1878:	31 05       	cpc	r19, r1
    187a:	2c f4       	brge	.+10     	; 0x1886 <GPIO_setupPortDirection+0x3e>
    187c:	8b 81       	ldd	r24, Y+3	; 0x03
    187e:	9c 81       	ldd	r25, Y+4	; 0x04
    1880:	00 97       	sbiw	r24, 0x00	; 0
    1882:	61 f0       	breq	.+24     	; 0x189c <GPIO_setupPortDirection+0x54>
    1884:	1e c0       	rjmp	.+60     	; 0x18c2 <GPIO_setupPortDirection+0x7a>
    1886:	2b 81       	ldd	r18, Y+3	; 0x03
    1888:	3c 81       	ldd	r19, Y+4	; 0x04
    188a:	22 30       	cpi	r18, 0x02	; 2
    188c:	31 05       	cpc	r19, r1
    188e:	81 f0       	breq	.+32     	; 0x18b0 <GPIO_setupPortDirection+0x68>
    1890:	8b 81       	ldd	r24, Y+3	; 0x03
    1892:	9c 81       	ldd	r25, Y+4	; 0x04
    1894:	83 30       	cpi	r24, 0x03	; 3
    1896:	91 05       	cpc	r25, r1
    1898:	81 f0       	breq	.+32     	; 0x18ba <GPIO_setupPortDirection+0x72>
    189a:	13 c0       	rjmp	.+38     	; 0x18c2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    189c:	ea e3       	ldi	r30, 0x3A	; 58
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	80 83       	st	Z, r24
    18a4:	0e c0       	rjmp	.+28     	; 0x18c2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    18a6:	e7 e3       	ldi	r30, 0x37	; 55
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	8a 81       	ldd	r24, Y+2	; 0x02
    18ac:	80 83       	st	Z, r24
    18ae:	09 c0       	rjmp	.+18     	; 0x18c2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    18b0:	e4 e3       	ldi	r30, 0x34	; 52
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	80 83       	st	Z, r24
    18b8:	04 c0       	rjmp	.+8      	; 0x18c2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    18ba:	e1 e3       	ldi	r30, 0x31	; 49
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	8a 81       	ldd	r24, Y+2	; 0x02
    18c0:	80 83       	st	Z, r24
			break;
		}
	}
}
    18c2:	0f 90       	pop	r0
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	0f 90       	pop	r0
    18ca:	cf 91       	pop	r28
    18cc:	df 91       	pop	r29
    18ce:	08 95       	ret

000018d0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    18d0:	df 93       	push	r29
    18d2:	cf 93       	push	r28
    18d4:	00 d0       	rcall	.+0      	; 0x18d6 <GPIO_writePort+0x6>
    18d6:	00 d0       	rcall	.+0      	; 0x18d8 <GPIO_writePort+0x8>
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
    18dc:	89 83       	std	Y+1, r24	; 0x01
    18de:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    18e0:	89 81       	ldd	r24, Y+1	; 0x01
    18e2:	84 30       	cpi	r24, 0x04	; 4
    18e4:	90 f5       	brcc	.+100    	; 0x194a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    18e6:	89 81       	ldd	r24, Y+1	; 0x01
    18e8:	28 2f       	mov	r18, r24
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	3c 83       	std	Y+4, r19	; 0x04
    18ee:	2b 83       	std	Y+3, r18	; 0x03
    18f0:	8b 81       	ldd	r24, Y+3	; 0x03
    18f2:	9c 81       	ldd	r25, Y+4	; 0x04
    18f4:	81 30       	cpi	r24, 0x01	; 1
    18f6:	91 05       	cpc	r25, r1
    18f8:	d1 f0       	breq	.+52     	; 0x192e <GPIO_writePort+0x5e>
    18fa:	2b 81       	ldd	r18, Y+3	; 0x03
    18fc:	3c 81       	ldd	r19, Y+4	; 0x04
    18fe:	22 30       	cpi	r18, 0x02	; 2
    1900:	31 05       	cpc	r19, r1
    1902:	2c f4       	brge	.+10     	; 0x190e <GPIO_writePort+0x3e>
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	9c 81       	ldd	r25, Y+4	; 0x04
    1908:	00 97       	sbiw	r24, 0x00	; 0
    190a:	61 f0       	breq	.+24     	; 0x1924 <GPIO_writePort+0x54>
    190c:	1e c0       	rjmp	.+60     	; 0x194a <GPIO_writePort+0x7a>
    190e:	2b 81       	ldd	r18, Y+3	; 0x03
    1910:	3c 81       	ldd	r19, Y+4	; 0x04
    1912:	22 30       	cpi	r18, 0x02	; 2
    1914:	31 05       	cpc	r19, r1
    1916:	81 f0       	breq	.+32     	; 0x1938 <GPIO_writePort+0x68>
    1918:	8b 81       	ldd	r24, Y+3	; 0x03
    191a:	9c 81       	ldd	r25, Y+4	; 0x04
    191c:	83 30       	cpi	r24, 0x03	; 3
    191e:	91 05       	cpc	r25, r1
    1920:	81 f0       	breq	.+32     	; 0x1942 <GPIO_writePort+0x72>
    1922:	13 c0       	rjmp	.+38     	; 0x194a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1924:	eb e3       	ldi	r30, 0x3B	; 59
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	8a 81       	ldd	r24, Y+2	; 0x02
    192a:	80 83       	st	Z, r24
    192c:	0e c0       	rjmp	.+28     	; 0x194a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    192e:	e8 e3       	ldi	r30, 0x38	; 56
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	8a 81       	ldd	r24, Y+2	; 0x02
    1934:	80 83       	st	Z, r24
    1936:	09 c0       	rjmp	.+18     	; 0x194a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1938:	e5 e3       	ldi	r30, 0x35	; 53
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	8a 81       	ldd	r24, Y+2	; 0x02
    193e:	80 83       	st	Z, r24
    1940:	04 c0       	rjmp	.+8      	; 0x194a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1942:	e2 e3       	ldi	r30, 0x32	; 50
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	8a 81       	ldd	r24, Y+2	; 0x02
    1948:	80 83       	st	Z, r24
			break;
		}
	}
}
    194a:	0f 90       	pop	r0
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	cf 91       	pop	r28
    1954:	df 91       	pop	r29
    1956:	08 95       	ret

00001958 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1958:	df 93       	push	r29
    195a:	cf 93       	push	r28
    195c:	00 d0       	rcall	.+0      	; 0x195e <GPIO_readPort+0x6>
    195e:	00 d0       	rcall	.+0      	; 0x1960 <GPIO_readPort+0x8>
    1960:	cd b7       	in	r28, 0x3d	; 61
    1962:	de b7       	in	r29, 0x3e	; 62
    1964:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1966:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1968:	8a 81       	ldd	r24, Y+2	; 0x02
    196a:	84 30       	cpi	r24, 0x04	; 4
    196c:	90 f5       	brcc	.+100    	; 0x19d2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    196e:	8a 81       	ldd	r24, Y+2	; 0x02
    1970:	28 2f       	mov	r18, r24
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	3c 83       	std	Y+4, r19	; 0x04
    1976:	2b 83       	std	Y+3, r18	; 0x03
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	9c 81       	ldd	r25, Y+4	; 0x04
    197c:	81 30       	cpi	r24, 0x01	; 1
    197e:	91 05       	cpc	r25, r1
    1980:	d1 f0       	breq	.+52     	; 0x19b6 <GPIO_readPort+0x5e>
    1982:	2b 81       	ldd	r18, Y+3	; 0x03
    1984:	3c 81       	ldd	r19, Y+4	; 0x04
    1986:	22 30       	cpi	r18, 0x02	; 2
    1988:	31 05       	cpc	r19, r1
    198a:	2c f4       	brge	.+10     	; 0x1996 <GPIO_readPort+0x3e>
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	9c 81       	ldd	r25, Y+4	; 0x04
    1990:	00 97       	sbiw	r24, 0x00	; 0
    1992:	61 f0       	breq	.+24     	; 0x19ac <GPIO_readPort+0x54>
    1994:	1e c0       	rjmp	.+60     	; 0x19d2 <GPIO_readPort+0x7a>
    1996:	2b 81       	ldd	r18, Y+3	; 0x03
    1998:	3c 81       	ldd	r19, Y+4	; 0x04
    199a:	22 30       	cpi	r18, 0x02	; 2
    199c:	31 05       	cpc	r19, r1
    199e:	81 f0       	breq	.+32     	; 0x19c0 <GPIO_readPort+0x68>
    19a0:	8b 81       	ldd	r24, Y+3	; 0x03
    19a2:	9c 81       	ldd	r25, Y+4	; 0x04
    19a4:	83 30       	cpi	r24, 0x03	; 3
    19a6:	91 05       	cpc	r25, r1
    19a8:	81 f0       	breq	.+32     	; 0x19ca <GPIO_readPort+0x72>
    19aa:	13 c0       	rjmp	.+38     	; 0x19d2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    19ac:	e9 e3       	ldi	r30, 0x39	; 57
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	89 83       	std	Y+1, r24	; 0x01
    19b4:	0e c0       	rjmp	.+28     	; 0x19d2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    19b6:	e6 e3       	ldi	r30, 0x36	; 54
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	89 83       	std	Y+1, r24	; 0x01
    19be:	09 c0       	rjmp	.+18     	; 0x19d2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    19c0:	e3 e3       	ldi	r30, 0x33	; 51
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	89 83       	std	Y+1, r24	; 0x01
    19c8:	04 c0       	rjmp	.+8      	; 0x19d2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    19ca:	e0 e3       	ldi	r30, 0x30	; 48
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    19d4:	0f 90       	pop	r0
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	cf 91       	pop	r28
    19de:	df 91       	pop	r29
    19e0:	08 95       	ret

000019e2 <PIR_init>:
 *
 * Return: void
 *
 */
void PIR_init(void)
{
    19e2:	df 93       	push	r29
    19e4:	cf 93       	push	r28
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
	/* Setup PIR sensor PIN as input */
	GPIO_setupPinDirection(PIR_PORT, PIR_PIN, PIN_INPUT);
    19ea:	82 e0       	ldi	r24, 0x02	; 2
    19ec:	62 e0       	ldi	r22, 0x02	; 2
    19ee:	40 e0       	ldi	r20, 0x00	; 0
    19f0:	0e 94 b3 09 	call	0x1366	; 0x1366 <GPIO_setupPinDirection>
}
    19f4:	cf 91       	pop	r28
    19f6:	df 91       	pop	r29
    19f8:	08 95       	ret

000019fa <PIR_getState>:
 *
 * Return: uint8
 *
 */
uint8 PIR_getState(void)
{
    19fa:	df 93       	push	r29
    19fc:	cf 93       	push	r28
    19fe:	cd b7       	in	r28, 0x3d	; 61
    1a00:	de b7       	in	r29, 0x3e	; 62
	/* Return current pin value */
	return GPIO_readPin(PIR_PORT, PIR_PIN);
    1a02:	82 e0       	ldi	r24, 0x02	; 2
    1a04:	62 e0       	ldi	r22, 0x02	; 2
    1a06:	0e 94 89 0b 	call	0x1712	; 0x1712 <GPIO_readPin>
}
    1a0a:	cf 91       	pop	r28
    1a0c:	df 91       	pop	r29
    1a0e:	08 95       	ret

00001a10 <PWM_Timer0_Start>:
 *
 * Return: void
 *
 */
void PWM_Timer0_Start(uint8 duty_cycle)
{
    1a10:	df 93       	push	r29
    1a12:	cf 93       	push	r28
    1a14:	0f 92       	push	r0
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62
    1a1a:	89 83       	std	Y+1, r24	; 0x01
    CLEAR_BIT(TCCR0, FOC0); /* As this is PWM mode clear Timer0 Force Output Compare bit */
    1a1c:	a3 e5       	ldi	r26, 0x53	; 83
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	e3 e5       	ldi	r30, 0x53	; 83
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	8f 77       	andi	r24, 0x7F	; 127
    1a28:	8c 93       	st	X, r24
                            /* Select fast PWM mode bits WGM00= 1, WGM01= 1 */
    SET_BIT(TCCR0, WGM00);
    1a2a:	a3 e5       	ldi	r26, 0x53	; 83
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	e3 e5       	ldi	r30, 0x53	; 83
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	80 64       	ori	r24, 0x40	; 64
    1a36:	8c 93       	st	X, r24
    SET_BIT(TCCR0, WGM01);
    1a38:	a3 e5       	ldi	r26, 0x53	; 83
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	e3 e5       	ldi	r30, 0x53	; 83
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	88 60       	ori	r24, 0x08	; 8
    1a44:	8c 93       	st	X, r24

#if PWM_TIMER0_MODE == PWM_MODE_NON_INVERTING
    /* If non-inverting mode defined */
    SET_BIT(TCCR0, COM01);
    1a46:	a3 e5       	ldi	r26, 0x53	; 83
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	e3 e5       	ldi	r30, 0x53	; 83
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	80 62       	ori	r24, 0x20	; 32
    1a52:	8c 93       	st	X, r24
    CLEAR_BIT(TCCR0, COM00);
    1a54:	a3 e5       	ldi	r26, 0x53	; 83
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	e3 e5       	ldi	r30, 0x53	; 83
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	8f 7e       	andi	r24, 0xEF	; 239
    1a60:	8c 93       	st	X, r24
#elif PWM_TIMER0_PRESCALER == PWM_TIMER0_PRESCALER_8
    CLEAR_BIT(TCCR0, CS02);
    SET_BIT(TCCR0, CS01);
    CLEAR_BIT(TCCR0, CS00);
#elif PWM_TIMER0_PRESCALER == PWM_TIMER0_PRESCALER_64
    CLEAR_BIT(TCCR0, CS02);
    1a62:	a3 e5       	ldi	r26, 0x53	; 83
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	e3 e5       	ldi	r30, 0x53	; 83
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	8b 7f       	andi	r24, 0xFB	; 251
    1a6e:	8c 93       	st	X, r24
    SET_BIT(TCCR0, CS01);
    1a70:	a3 e5       	ldi	r26, 0x53	; 83
    1a72:	b0 e0       	ldi	r27, 0x00	; 0
    1a74:	e3 e5       	ldi	r30, 0x53	; 83
    1a76:	f0 e0       	ldi	r31, 0x00	; 0
    1a78:	80 81       	ld	r24, Z
    1a7a:	82 60       	ori	r24, 0x02	; 2
    1a7c:	8c 93       	st	X, r24
    SET_BIT(TCCR0, CS00);
    1a7e:	a3 e5       	ldi	r26, 0x53	; 83
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	e3 e5       	ldi	r30, 0x53	; 83
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	81 60       	ori	r24, 0x01	; 1
    1a8a:	8c 93       	st	X, r24
    SET_BIT(TCCR0, CS00);
#else
#error "Invalid PWM_PRESCALER setting"
#endif
    /* Setup Timer0 OC0 pin as output*/
    GPIO_setupPinDirection(PWM_TIMER0_OC0_PORT, PWM_TIMER0_OC0_PIN, PIN_OUTPUT);
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	63 e0       	ldi	r22, 0x03	; 3
    1a90:	41 e0       	ldi	r20, 0x01	; 1
    1a92:	0e 94 b3 09 	call	0x1366	; 0x1366 <GPIO_setupPinDirection>
    TCNT0 = 0;                       /* Assign Timer0 initial value to 0 */
    1a96:	e2 e5       	ldi	r30, 0x52	; 82
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	10 82       	st	Z, r1
    if (duty_cycle > MAX_DUTY_CYCLE) /* If duty cycle argument more than maximum duty cycle */
    1a9c:	89 81       	ldd	r24, Y+1	; 0x01
    1a9e:	85 36       	cpi	r24, 0x65	; 101
    1aa0:	10 f0       	brcs	.+4      	; 0x1aa6 <PWM_Timer0_Start+0x96>
    {
        duty_cycle = MAX_DUTY_CYCLE; /* Assign duty cycle to maximum duty cycle */
    1aa2:	84 e6       	ldi	r24, 0x64	; 100
    1aa4:	89 83       	std	Y+1, r24	; 0x01
    {
        duty_cycle = MIN_DUTY_CYCLE; /* Assign duty cycle to minimum duty cycle */
    }
#if PWM_TIMER0_MODE == PWM_MODE_NON_INVERTING
    /* Duty cycle equation for non-inverting mode */
    OCR0 = (uint8)(((uint16)duty_cycle * TIMER0_MAX_COUNT) / MAX_DUTY_CYCLE);
    1aa6:	ec e5       	ldi	r30, 0x5C	; 92
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	89 81       	ldd	r24, Y+1	; 0x01
    1aac:	48 2f       	mov	r20, r24
    1aae:	50 e0       	ldi	r21, 0x00	; 0
    1ab0:	ca 01       	movw	r24, r20
    1ab2:	9c 01       	movw	r18, r24
    1ab4:	22 0f       	add	r18, r18
    1ab6:	33 1f       	adc	r19, r19
    1ab8:	c9 01       	movw	r24, r18
    1aba:	96 95       	lsr	r25
    1abc:	98 2f       	mov	r25, r24
    1abe:	88 27       	eor	r24, r24
    1ac0:	97 95       	ror	r25
    1ac2:	87 95       	ror	r24
    1ac4:	82 1b       	sub	r24, r18
    1ac6:	93 0b       	sbc	r25, r19
    1ac8:	84 0f       	add	r24, r20
    1aca:	95 1f       	adc	r25, r21
    1acc:	24 e6       	ldi	r18, 0x64	; 100
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	b9 01       	movw	r22, r18
    1ad2:	0e 94 c9 11 	call	0x2392	; 0x2392 <__udivmodhi4>
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	80 83       	st	Z, r24
#else
    /* Duty cycle equation for inverting mode */
    OCR0 = (uint8)(TIMER0_MAX_COUNT - (((uint16)duty_cycle * TIMER0_MAX_COUNT) / MAX_DUTY_CYCLE));
#endif
}
    1ada:	0f 90       	pop	r0
    1adc:	cf 91       	pop	r28
    1ade:	df 91       	pop	r29
    1ae0:	08 95       	ret

00001ae2 <__vector_11>:
 | 	 	 	 	    Interrupt Service Routines               |
 -------------------------------------------------------------
 */

ISR(TIMER0_OVF_vect) /* Timer0 Overflow interrupt request */
{
    1ae2:	1f 92       	push	r1
    1ae4:	0f 92       	push	r0
    1ae6:	0f b6       	in	r0, 0x3f	; 63
    1ae8:	0f 92       	push	r0
    1aea:	11 24       	eor	r1, r1
    1aec:	2f 93       	push	r18
    1aee:	3f 93       	push	r19
    1af0:	4f 93       	push	r20
    1af2:	5f 93       	push	r21
    1af4:	6f 93       	push	r22
    1af6:	7f 93       	push	r23
    1af8:	8f 93       	push	r24
    1afa:	9f 93       	push	r25
    1afc:	af 93       	push	r26
    1afe:	bf 93       	push	r27
    1b00:	ef 93       	push	r30
    1b02:	ff 93       	push	r31
    1b04:	df 93       	push	r29
    1b06:	cf 93       	push	r28
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr_TIMER0 != NULL_PTR) /* If pointer doesn't point at NULL */
    1b0c:	80 91 7e 00 	lds	r24, 0x007E
    1b10:	90 91 7f 00 	lds	r25, 0x007F
    1b14:	00 97       	sbiw	r24, 0x00	; 0
    1b16:	29 f0       	breq	.+10     	; 0x1b22 <__vector_11+0x40>
    {
        (*g_callBackPtr_TIMER0)(); /*  As interrupt request, call back the pointer to function */
    1b18:	e0 91 7e 00 	lds	r30, 0x007E
    1b1c:	f0 91 7f 00 	lds	r31, 0x007F
    1b20:	09 95       	icall
    }
}
    1b22:	cf 91       	pop	r28
    1b24:	df 91       	pop	r29
    1b26:	ff 91       	pop	r31
    1b28:	ef 91       	pop	r30
    1b2a:	bf 91       	pop	r27
    1b2c:	af 91       	pop	r26
    1b2e:	9f 91       	pop	r25
    1b30:	8f 91       	pop	r24
    1b32:	7f 91       	pop	r23
    1b34:	6f 91       	pop	r22
    1b36:	5f 91       	pop	r21
    1b38:	4f 91       	pop	r20
    1b3a:	3f 91       	pop	r19
    1b3c:	2f 91       	pop	r18
    1b3e:	0f 90       	pop	r0
    1b40:	0f be       	out	0x3f, r0	; 63
    1b42:	0f 90       	pop	r0
    1b44:	1f 90       	pop	r1
    1b46:	18 95       	reti

00001b48 <__vector_10>:
ISR(TIMER0_COMP_vect) /* Timer0 Compare value interrupt request */
{
    1b48:	1f 92       	push	r1
    1b4a:	0f 92       	push	r0
    1b4c:	0f b6       	in	r0, 0x3f	; 63
    1b4e:	0f 92       	push	r0
    1b50:	11 24       	eor	r1, r1
    1b52:	2f 93       	push	r18
    1b54:	3f 93       	push	r19
    1b56:	4f 93       	push	r20
    1b58:	5f 93       	push	r21
    1b5a:	6f 93       	push	r22
    1b5c:	7f 93       	push	r23
    1b5e:	8f 93       	push	r24
    1b60:	9f 93       	push	r25
    1b62:	af 93       	push	r26
    1b64:	bf 93       	push	r27
    1b66:	ef 93       	push	r30
    1b68:	ff 93       	push	r31
    1b6a:	df 93       	push	r29
    1b6c:	cf 93       	push	r28
    1b6e:	cd b7       	in	r28, 0x3d	; 61
    1b70:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr_TIMER0 != NULL_PTR) /* If pointer doesn't point at NULL */
    1b72:	80 91 7e 00 	lds	r24, 0x007E
    1b76:	90 91 7f 00 	lds	r25, 0x007F
    1b7a:	00 97       	sbiw	r24, 0x00	; 0
    1b7c:	29 f0       	breq	.+10     	; 0x1b88 <__vector_10+0x40>
    {
        (*g_callBackPtr_TIMER0)(); /*  As interrupt request, call back the pointer to function */
    1b7e:	e0 91 7e 00 	lds	r30, 0x007E
    1b82:	f0 91 7f 00 	lds	r31, 0x007F
    1b86:	09 95       	icall
    }
}
    1b88:	cf 91       	pop	r28
    1b8a:	df 91       	pop	r29
    1b8c:	ff 91       	pop	r31
    1b8e:	ef 91       	pop	r30
    1b90:	bf 91       	pop	r27
    1b92:	af 91       	pop	r26
    1b94:	9f 91       	pop	r25
    1b96:	8f 91       	pop	r24
    1b98:	7f 91       	pop	r23
    1b9a:	6f 91       	pop	r22
    1b9c:	5f 91       	pop	r21
    1b9e:	4f 91       	pop	r20
    1ba0:	3f 91       	pop	r19
    1ba2:	2f 91       	pop	r18
    1ba4:	0f 90       	pop	r0
    1ba6:	0f be       	out	0x3f, r0	; 63
    1ba8:	0f 90       	pop	r0
    1baa:	1f 90       	pop	r1
    1bac:	18 95       	reti

00001bae <__vector_9>:
ISR(TIMER1_OVF_vect) /* Timer1 Overflow interrupt request */

{
    1bae:	1f 92       	push	r1
    1bb0:	0f 92       	push	r0
    1bb2:	0f b6       	in	r0, 0x3f	; 63
    1bb4:	0f 92       	push	r0
    1bb6:	11 24       	eor	r1, r1
    1bb8:	2f 93       	push	r18
    1bba:	3f 93       	push	r19
    1bbc:	4f 93       	push	r20
    1bbe:	5f 93       	push	r21
    1bc0:	6f 93       	push	r22
    1bc2:	7f 93       	push	r23
    1bc4:	8f 93       	push	r24
    1bc6:	9f 93       	push	r25
    1bc8:	af 93       	push	r26
    1bca:	bf 93       	push	r27
    1bcc:	ef 93       	push	r30
    1bce:	ff 93       	push	r31
    1bd0:	df 93       	push	r29
    1bd2:	cf 93       	push	r28
    1bd4:	cd b7       	in	r28, 0x3d	; 61
    1bd6:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr_TIMER1 != NULL_PTR) /* If pointer doesn't point at NULL */
    1bd8:	80 91 80 00 	lds	r24, 0x0080
    1bdc:	90 91 81 00 	lds	r25, 0x0081
    1be0:	00 97       	sbiw	r24, 0x00	; 0
    1be2:	29 f0       	breq	.+10     	; 0x1bee <__vector_9+0x40>
    {
        (*g_callBackPtr_TIMER1)(); /*  As interrupt request, call back the pointer to function */
    1be4:	e0 91 80 00 	lds	r30, 0x0080
    1be8:	f0 91 81 00 	lds	r31, 0x0081
    1bec:	09 95       	icall
    }
}
    1bee:	cf 91       	pop	r28
    1bf0:	df 91       	pop	r29
    1bf2:	ff 91       	pop	r31
    1bf4:	ef 91       	pop	r30
    1bf6:	bf 91       	pop	r27
    1bf8:	af 91       	pop	r26
    1bfa:	9f 91       	pop	r25
    1bfc:	8f 91       	pop	r24
    1bfe:	7f 91       	pop	r23
    1c00:	6f 91       	pop	r22
    1c02:	5f 91       	pop	r21
    1c04:	4f 91       	pop	r20
    1c06:	3f 91       	pop	r19
    1c08:	2f 91       	pop	r18
    1c0a:	0f 90       	pop	r0
    1c0c:	0f be       	out	0x3f, r0	; 63
    1c0e:	0f 90       	pop	r0
    1c10:	1f 90       	pop	r1
    1c12:	18 95       	reti

00001c14 <__vector_7>:
ISR(TIMER1_COMPA_vect) /* Timer1 Compare value interrupt request */
{
    1c14:	1f 92       	push	r1
    1c16:	0f 92       	push	r0
    1c18:	0f b6       	in	r0, 0x3f	; 63
    1c1a:	0f 92       	push	r0
    1c1c:	11 24       	eor	r1, r1
    1c1e:	2f 93       	push	r18
    1c20:	3f 93       	push	r19
    1c22:	4f 93       	push	r20
    1c24:	5f 93       	push	r21
    1c26:	6f 93       	push	r22
    1c28:	7f 93       	push	r23
    1c2a:	8f 93       	push	r24
    1c2c:	9f 93       	push	r25
    1c2e:	af 93       	push	r26
    1c30:	bf 93       	push	r27
    1c32:	ef 93       	push	r30
    1c34:	ff 93       	push	r31
    1c36:	df 93       	push	r29
    1c38:	cf 93       	push	r28
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr_TIMER1 != NULL_PTR) /* If pointer doesn't point at NULL */
    1c3e:	80 91 80 00 	lds	r24, 0x0080
    1c42:	90 91 81 00 	lds	r25, 0x0081
    1c46:	00 97       	sbiw	r24, 0x00	; 0
    1c48:	29 f0       	breq	.+10     	; 0x1c54 <__vector_7+0x40>
    {
        (*g_callBackPtr_TIMER1)(); /*  As interrupt request, call back the pointer to function */
    1c4a:	e0 91 80 00 	lds	r30, 0x0080
    1c4e:	f0 91 81 00 	lds	r31, 0x0081
    1c52:	09 95       	icall
    }
}
    1c54:	cf 91       	pop	r28
    1c56:	df 91       	pop	r29
    1c58:	ff 91       	pop	r31
    1c5a:	ef 91       	pop	r30
    1c5c:	bf 91       	pop	r27
    1c5e:	af 91       	pop	r26
    1c60:	9f 91       	pop	r25
    1c62:	8f 91       	pop	r24
    1c64:	7f 91       	pop	r23
    1c66:	6f 91       	pop	r22
    1c68:	5f 91       	pop	r21
    1c6a:	4f 91       	pop	r20
    1c6c:	3f 91       	pop	r19
    1c6e:	2f 91       	pop	r18
    1c70:	0f 90       	pop	r0
    1c72:	0f be       	out	0x3f, r0	; 63
    1c74:	0f 90       	pop	r0
    1c76:	1f 90       	pop	r1
    1c78:	18 95       	reti

00001c7a <__vector_5>:
ISR(TIMER2_OVF_vect) /* Timer2 Overflow interrupt request */
{
    1c7a:	1f 92       	push	r1
    1c7c:	0f 92       	push	r0
    1c7e:	0f b6       	in	r0, 0x3f	; 63
    1c80:	0f 92       	push	r0
    1c82:	11 24       	eor	r1, r1
    1c84:	2f 93       	push	r18
    1c86:	3f 93       	push	r19
    1c88:	4f 93       	push	r20
    1c8a:	5f 93       	push	r21
    1c8c:	6f 93       	push	r22
    1c8e:	7f 93       	push	r23
    1c90:	8f 93       	push	r24
    1c92:	9f 93       	push	r25
    1c94:	af 93       	push	r26
    1c96:	bf 93       	push	r27
    1c98:	ef 93       	push	r30
    1c9a:	ff 93       	push	r31
    1c9c:	df 93       	push	r29
    1c9e:	cf 93       	push	r28
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr_TIMER2 != NULL_PTR) /* If pointer doesn't point at NULL */
    1ca4:	80 91 82 00 	lds	r24, 0x0082
    1ca8:	90 91 83 00 	lds	r25, 0x0083
    1cac:	00 97       	sbiw	r24, 0x00	; 0
    1cae:	29 f0       	breq	.+10     	; 0x1cba <__vector_5+0x40>
    {
        (*g_callBackPtr_TIMER2)(); /*  As interrupt request, call back the pointer to function */
    1cb0:	e0 91 82 00 	lds	r30, 0x0082
    1cb4:	f0 91 83 00 	lds	r31, 0x0083
    1cb8:	09 95       	icall
    }
}
    1cba:	cf 91       	pop	r28
    1cbc:	df 91       	pop	r29
    1cbe:	ff 91       	pop	r31
    1cc0:	ef 91       	pop	r30
    1cc2:	bf 91       	pop	r27
    1cc4:	af 91       	pop	r26
    1cc6:	9f 91       	pop	r25
    1cc8:	8f 91       	pop	r24
    1cca:	7f 91       	pop	r23
    1ccc:	6f 91       	pop	r22
    1cce:	5f 91       	pop	r21
    1cd0:	4f 91       	pop	r20
    1cd2:	3f 91       	pop	r19
    1cd4:	2f 91       	pop	r18
    1cd6:	0f 90       	pop	r0
    1cd8:	0f be       	out	0x3f, r0	; 63
    1cda:	0f 90       	pop	r0
    1cdc:	1f 90       	pop	r1
    1cde:	18 95       	reti

00001ce0 <__vector_4>:
ISR(TIMER2_COMP_vect) /* Timer2 Compare value interrupt request */
{
    1ce0:	1f 92       	push	r1
    1ce2:	0f 92       	push	r0
    1ce4:	0f b6       	in	r0, 0x3f	; 63
    1ce6:	0f 92       	push	r0
    1ce8:	11 24       	eor	r1, r1
    1cea:	2f 93       	push	r18
    1cec:	3f 93       	push	r19
    1cee:	4f 93       	push	r20
    1cf0:	5f 93       	push	r21
    1cf2:	6f 93       	push	r22
    1cf4:	7f 93       	push	r23
    1cf6:	8f 93       	push	r24
    1cf8:	9f 93       	push	r25
    1cfa:	af 93       	push	r26
    1cfc:	bf 93       	push	r27
    1cfe:	ef 93       	push	r30
    1d00:	ff 93       	push	r31
    1d02:	df 93       	push	r29
    1d04:	cf 93       	push	r28
    1d06:	cd b7       	in	r28, 0x3d	; 61
    1d08:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr_TIMER2 != NULL_PTR) /* If pointer doesn't point at NULL */
    1d0a:	80 91 82 00 	lds	r24, 0x0082
    1d0e:	90 91 83 00 	lds	r25, 0x0083
    1d12:	00 97       	sbiw	r24, 0x00	; 0
    1d14:	29 f0       	breq	.+10     	; 0x1d20 <__vector_4+0x40>
    {
        (*g_callBackPtr_TIMER2)(); /*  As interrupt request, call back the pointer to function */
    1d16:	e0 91 82 00 	lds	r30, 0x0082
    1d1a:	f0 91 83 00 	lds	r31, 0x0083
    1d1e:	09 95       	icall
    }
}
    1d20:	cf 91       	pop	r28
    1d22:	df 91       	pop	r29
    1d24:	ff 91       	pop	r31
    1d26:	ef 91       	pop	r30
    1d28:	bf 91       	pop	r27
    1d2a:	af 91       	pop	r26
    1d2c:	9f 91       	pop	r25
    1d2e:	8f 91       	pop	r24
    1d30:	7f 91       	pop	r23
    1d32:	6f 91       	pop	r22
    1d34:	5f 91       	pop	r21
    1d36:	4f 91       	pop	r20
    1d38:	3f 91       	pop	r19
    1d3a:	2f 91       	pop	r18
    1d3c:	0f 90       	pop	r0
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	0f 90       	pop	r0
    1d42:	1f 90       	pop	r1
    1d44:	18 95       	reti

00001d46 <Timer_init>:
 *
 * Return: void
 *
 */
void Timer_init(const Timer_ConfigType *Config_Ptr)
{
    1d46:	df 93       	push	r29
    1d48:	cf 93       	push	r28
    1d4a:	00 d0       	rcall	.+0      	; 0x1d4c <Timer_init+0x6>
    1d4c:	00 d0       	rcall	.+0      	; 0x1d4e <Timer_init+0x8>
    1d4e:	cd b7       	in	r28, 0x3d	; 61
    1d50:	de b7       	in	r29, 0x3e	; 62
    1d52:	9a 83       	std	Y+2, r25	; 0x02
    1d54:	89 83       	std	Y+1, r24	; 0x01
    switch (Config_Ptr->timer_ID) /* Check for timer ID */
    1d56:	e9 81       	ldd	r30, Y+1	; 0x01
    1d58:	fa 81       	ldd	r31, Y+2	; 0x02
    1d5a:	84 81       	ldd	r24, Z+4	; 0x04
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	3c 83       	std	Y+4, r19	; 0x04
    1d62:	2b 83       	std	Y+3, r18	; 0x03
    1d64:	8b 81       	ldd	r24, Y+3	; 0x03
    1d66:	9c 81       	ldd	r25, Y+4	; 0x04
    1d68:	81 30       	cpi	r24, 0x01	; 1
    1d6a:	91 05       	cpc	r25, r1
    1d6c:	09 f4       	brne	.+2      	; 0x1d70 <Timer_init+0x2a>
    1d6e:	4c c0       	rjmp	.+152    	; 0x1e08 <Timer_init+0xc2>
    1d70:	2b 81       	ldd	r18, Y+3	; 0x03
    1d72:	3c 81       	ldd	r19, Y+4	; 0x04
    1d74:	22 30       	cpi	r18, 0x02	; 2
    1d76:	31 05       	cpc	r19, r1
    1d78:	09 f4       	brne	.+2      	; 0x1d7c <Timer_init+0x36>
    1d7a:	88 c0       	rjmp	.+272    	; 0x1e8c <Timer_init+0x146>
    1d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d80:	00 97       	sbiw	r24, 0x00	; 0
    1d82:	09 f0       	breq	.+2      	; 0x1d86 <Timer_init+0x40>
    1d84:	c3 c0       	rjmp	.+390    	; 0x1f0c <Timer_init+0x1c6>
    {
    case TIMER0_ID:
        TCNT0 = Config_Ptr->timer_InitialValue;     /* Assign Timer0 initial value */
    1d86:	a2 e5       	ldi	r26, 0x52	; 82
    1d88:	b0 e0       	ldi	r27, 0x00	; 0
    1d8a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d8c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d8e:	80 81       	ld	r24, Z
    1d90:	91 81       	ldd	r25, Z+1	; 0x01
    1d92:	8c 93       	st	X, r24
        TCCR0 = (1 << FOC0);                        /* As this is a non-PWM mode set Timer0 Force Output bit */
    1d94:	e3 e5       	ldi	r30, 0x53	; 83
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 e8       	ldi	r24, 0x80	; 128
    1d9a:	80 83       	st	Z, r24
        TIMSK |= (1 << TOIE0);                      /* Enable Timer0 overflow interrupt by default */
    1d9c:	a9 e5       	ldi	r26, 0x59	; 89
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	e9 e5       	ldi	r30, 0x59	; 89
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	81 60       	ori	r24, 0x01	; 1
    1da8:	8c 93       	st	X, r24
        if (Config_Ptr->timer_mode == COMPARE_MODE) /* If Compare value mode */
    1daa:	e9 81       	ldd	r30, Y+1	; 0x01
    1dac:	fa 81       	ldd	r31, Y+2	; 0x02
    1dae:	86 81       	ldd	r24, Z+6	; 0x06
    1db0:	81 30       	cpi	r24, 0x01	; 1
    1db2:	e1 f4       	brne	.+56     	; 0x1dec <Timer_init+0xa6>
        {
            TCCR0 |= (1 << WGM01);                       /* Select compare mode bits WGM00= 0, WGM01= 1 */
    1db4:	a3 e5       	ldi	r26, 0x53	; 83
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	e3 e5       	ldi	r30, 0x53	; 83
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	88 60       	ori	r24, 0x08	; 8
    1dc0:	8c 93       	st	X, r24
            OCR0 = Config_Ptr->timer_compare_MatchValue; /* Assign Timer0 Compare value */
    1dc2:	ac e5       	ldi	r26, 0x5C	; 92
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	e9 81       	ldd	r30, Y+1	; 0x01
    1dc8:	fa 81       	ldd	r31, Y+2	; 0x02
    1dca:	82 81       	ldd	r24, Z+2	; 0x02
    1dcc:	93 81       	ldd	r25, Z+3	; 0x03
    1dce:	8c 93       	st	X, r24
            TIMSK &= ~(1 << TOIE0);                      /* Disable Timer0 Overflow interrupt */
    1dd0:	a9 e5       	ldi	r26, 0x59	; 89
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	e9 e5       	ldi	r30, 0x59	; 89
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	8e 7f       	andi	r24, 0xFE	; 254
    1ddc:	8c 93       	st	X, r24
            TIMSK |= (1 << OCIE0);                       /* Enable Timer0 Compare value interrupt */
    1dde:	a9 e5       	ldi	r26, 0x59	; 89
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	e9 e5       	ldi	r30, 0x59	; 89
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	82 60       	ori	r24, 0x02	; 2
    1dea:	8c 93       	st	X, r24
        }
        TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->timer_clock & 0x07); /* Select Timer0 Clock prescale to start start counting */
    1dec:	a3 e5       	ldi	r26, 0x53	; 83
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	e3 e5       	ldi	r30, 0x53	; 83
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	98 2f       	mov	r25, r24
    1df8:	98 7f       	andi	r25, 0xF8	; 248
    1dfa:	e9 81       	ldd	r30, Y+1	; 0x01
    1dfc:	fa 81       	ldd	r31, Y+2	; 0x02
    1dfe:	85 81       	ldd	r24, Z+5	; 0x05
    1e00:	87 70       	andi	r24, 0x07	; 7
    1e02:	89 2b       	or	r24, r25
    1e04:	8c 93       	st	X, r24
    1e06:	82 c0       	rjmp	.+260    	; 0x1f0c <Timer_init+0x1c6>
        break;
    case TIMER1_ID:
        TCNT1 = Config_Ptr->timer_InitialValue;     /* Assign Timer1 initial value */
    1e08:	ac e4       	ldi	r26, 0x4C	; 76
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e0e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e10:	80 81       	ld	r24, Z
    1e12:	91 81       	ldd	r25, Z+1	; 0x01
    1e14:	11 96       	adiw	r26, 0x01	; 1
    1e16:	9c 93       	st	X, r25
    1e18:	8e 93       	st	-X, r24
        TCCR1A = (1 << FOC1A) | (1 << FOC1B);       /* As this is a non-PWM mode set Timer1 Force Output Compare A:B bits */
    1e1a:	ef e4       	ldi	r30, 0x4F	; 79
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	8c e0       	ldi	r24, 0x0C	; 12
    1e20:	80 83       	st	Z, r24
        TIMSK |= (1 << TOIE1);                      /* Enable Timer1 overflow interrupt by default */
    1e22:	a9 e5       	ldi	r26, 0x59	; 89
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	e9 e5       	ldi	r30, 0x59	; 89
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	84 60       	ori	r24, 0x04	; 4
    1e2e:	8c 93       	st	X, r24
        if (Config_Ptr->timer_mode == COMPARE_MODE) /* If Compare value mode */
    1e30:	e9 81       	ldd	r30, Y+1	; 0x01
    1e32:	fa 81       	ldd	r31, Y+2	; 0x02
    1e34:	86 81       	ldd	r24, Z+6	; 0x06
    1e36:	81 30       	cpi	r24, 0x01	; 1
    1e38:	d9 f4       	brne	.+54     	; 0x1e70 <Timer_init+0x12a>
        {
            TCCR1B = (1 << WGM12);                        /* Select compare mode bits WGM10= 0, WGM11= 0, WGM12= 1, WGM13= 0 */
    1e3a:	ee e4       	ldi	r30, 0x4E	; 78
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	88 e0       	ldi	r24, 0x08	; 8
    1e40:	80 83       	st	Z, r24
            OCR1A = Config_Ptr->timer_compare_MatchValue; /* Assign Timer1 Compare value */
    1e42:	aa e4       	ldi	r26, 0x4A	; 74
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	e9 81       	ldd	r30, Y+1	; 0x01
    1e48:	fa 81       	ldd	r31, Y+2	; 0x02
    1e4a:	82 81       	ldd	r24, Z+2	; 0x02
    1e4c:	93 81       	ldd	r25, Z+3	; 0x03
    1e4e:	11 96       	adiw	r26, 0x01	; 1
    1e50:	9c 93       	st	X, r25
    1e52:	8e 93       	st	-X, r24
            TIMSK &= ~(1 << TOIE1);                       /* Disable Timer1 Overflow interrupt */
    1e54:	a9 e5       	ldi	r26, 0x59	; 89
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	e9 e5       	ldi	r30, 0x59	; 89
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	8b 7f       	andi	r24, 0xFB	; 251
    1e60:	8c 93       	st	X, r24
            TIMSK |= (1 << OCIE1A);                       /* Enable Timer1 Compare value interrupt */
    1e62:	a9 e5       	ldi	r26, 0x59	; 89
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	e9 e5       	ldi	r30, 0x59	; 89
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	80 61       	ori	r24, 0x10	; 16
    1e6e:	8c 93       	st	X, r24
        }
        TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->timer_clock & 0x07); /* Select Timer1 Clock prescale to start start counting */
    1e70:	ae e4       	ldi	r26, 0x4E	; 78
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	ee e4       	ldi	r30, 0x4E	; 78
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 81       	ld	r24, Z
    1e7a:	98 2f       	mov	r25, r24
    1e7c:	98 7f       	andi	r25, 0xF8	; 248
    1e7e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e80:	fa 81       	ldd	r31, Y+2	; 0x02
    1e82:	85 81       	ldd	r24, Z+5	; 0x05
    1e84:	87 70       	andi	r24, 0x07	; 7
    1e86:	89 2b       	or	r24, r25
    1e88:	8c 93       	st	X, r24
    1e8a:	40 c0       	rjmp	.+128    	; 0x1f0c <Timer_init+0x1c6>
        break;

    case TIMER2_ID:
        TCNT2 = Config_Ptr->timer_InitialValue;     /* Assign Timer2 initial value */
    1e8c:	a4 e4       	ldi	r26, 0x44	; 68
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	e9 81       	ldd	r30, Y+1	; 0x01
    1e92:	fa 81       	ldd	r31, Y+2	; 0x02
    1e94:	80 81       	ld	r24, Z
    1e96:	91 81       	ldd	r25, Z+1	; 0x01
    1e98:	8c 93       	st	X, r24
        TCCR2 = (1 << FOC2);                        /* As this is a non-PWM mode set Timer2 Force Output Compare bit */
    1e9a:	e5 e4       	ldi	r30, 0x45	; 69
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 e8       	ldi	r24, 0x80	; 128
    1ea0:	80 83       	st	Z, r24
        TIMSK |= (1 << TOIE2);                      /* Enable Timer2 overflow interrupt by default */
    1ea2:	a9 e5       	ldi	r26, 0x59	; 89
    1ea4:	b0 e0       	ldi	r27, 0x00	; 0
    1ea6:	e9 e5       	ldi	r30, 0x59	; 89
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	80 81       	ld	r24, Z
    1eac:	80 64       	ori	r24, 0x40	; 64
    1eae:	8c 93       	st	X, r24
        if (Config_Ptr->timer_mode == COMPARE_MODE) /* If Compare value mode */
    1eb0:	e9 81       	ldd	r30, Y+1	; 0x01
    1eb2:	fa 81       	ldd	r31, Y+2	; 0x02
    1eb4:	86 81       	ldd	r24, Z+6	; 0x06
    1eb6:	81 30       	cpi	r24, 0x01	; 1
    1eb8:	e1 f4       	brne	.+56     	; 0x1ef2 <Timer_init+0x1ac>
        {
            TCCR2 |= (1 << WGM21);                       /* Select compare mode bits WGM20= 0, WGM21= 1 */
    1eba:	a5 e4       	ldi	r26, 0x45	; 69
    1ebc:	b0 e0       	ldi	r27, 0x00	; 0
    1ebe:	e5 e4       	ldi	r30, 0x45	; 69
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	80 81       	ld	r24, Z
    1ec4:	88 60       	ori	r24, 0x08	; 8
    1ec6:	8c 93       	st	X, r24
            OCR2 = Config_Ptr->timer_compare_MatchValue; /* Assign Timer2 Compare value */
    1ec8:	a3 e4       	ldi	r26, 0x43	; 67
    1eca:	b0 e0       	ldi	r27, 0x00	; 0
    1ecc:	e9 81       	ldd	r30, Y+1	; 0x01
    1ece:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed0:	82 81       	ldd	r24, Z+2	; 0x02
    1ed2:	93 81       	ldd	r25, Z+3	; 0x03
    1ed4:	8c 93       	st	X, r24
            TIMSK &= ~(1 << TOIE2);                      /* Disable Timer2 Overflow interrupt */
    1ed6:	a9 e5       	ldi	r26, 0x59	; 89
    1ed8:	b0 e0       	ldi	r27, 0x00	; 0
    1eda:	e9 e5       	ldi	r30, 0x59	; 89
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 81       	ld	r24, Z
    1ee0:	8f 7b       	andi	r24, 0xBF	; 191
    1ee2:	8c 93       	st	X, r24
            TIMSK |= (1 << OCIE2);                       /* Enable Timer2 Compare value interrupt */
    1ee4:	a9 e5       	ldi	r26, 0x59	; 89
    1ee6:	b0 e0       	ldi	r27, 0x00	; 0
    1ee8:	e9 e5       	ldi	r30, 0x59	; 89
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 81       	ld	r24, Z
    1eee:	80 68       	ori	r24, 0x80	; 128
    1ef0:	8c 93       	st	X, r24
        }
        TCCR2 = (TCCR2 & 0xF8) | (Config_Ptr->timer_clock & 0x07); /* Select Timer2 Clock prescale to start start counting */
    1ef2:	a5 e4       	ldi	r26, 0x45	; 69
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	e5 e4       	ldi	r30, 0x45	; 69
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	98 2f       	mov	r25, r24
    1efe:	98 7f       	andi	r25, 0xF8	; 248
    1f00:	e9 81       	ldd	r30, Y+1	; 0x01
    1f02:	fa 81       	ldd	r31, Y+2	; 0x02
    1f04:	85 81       	ldd	r24, Z+5	; 0x05
    1f06:	87 70       	andi	r24, 0x07	; 7
    1f08:	89 2b       	or	r24, r25
    1f0a:	8c 93       	st	X, r24
        break;
    default:
        /* Do Nothing */
        break;
    }
}
    1f0c:	0f 90       	pop	r0
    1f0e:	0f 90       	pop	r0
    1f10:	0f 90       	pop	r0
    1f12:	0f 90       	pop	r0
    1f14:	cf 91       	pop	r28
    1f16:	df 91       	pop	r29
    1f18:	08 95       	ret

00001f1a <Timer_deInit>:
 *
 * Return: void
 *
 */
void Timer_deInit(Timer_ID_Type timer_type)
{
    1f1a:	df 93       	push	r29
    1f1c:	cf 93       	push	r28
    1f1e:	00 d0       	rcall	.+0      	; 0x1f20 <Timer_deInit+0x6>
    1f20:	0f 92       	push	r0
    1f22:	cd b7       	in	r28, 0x3d	; 61
    1f24:	de b7       	in	r29, 0x3e	; 62
    1f26:	89 83       	std	Y+1, r24	; 0x01
    switch (timer_type) /* Check for timer ID */
    1f28:	89 81       	ldd	r24, Y+1	; 0x01
    1f2a:	28 2f       	mov	r18, r24
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	3b 83       	std	Y+3, r19	; 0x03
    1f30:	2a 83       	std	Y+2, r18	; 0x02
    1f32:	8a 81       	ldd	r24, Y+2	; 0x02
    1f34:	9b 81       	ldd	r25, Y+3	; 0x03
    1f36:	81 30       	cpi	r24, 0x01	; 1
    1f38:	91 05       	cpc	r25, r1
    1f3a:	19 f1       	breq	.+70     	; 0x1f82 <Timer_deInit+0x68>
    1f3c:	2a 81       	ldd	r18, Y+2	; 0x02
    1f3e:	3b 81       	ldd	r19, Y+3	; 0x03
    1f40:	22 30       	cpi	r18, 0x02	; 2
    1f42:	31 05       	cpc	r19, r1
    1f44:	d9 f1       	breq	.+118    	; 0x1fbc <Timer_deInit+0xa2>
    1f46:	8a 81       	ldd	r24, Y+2	; 0x02
    1f48:	9b 81       	ldd	r25, Y+3	; 0x03
    1f4a:	00 97       	sbiw	r24, 0x00	; 0
    1f4c:	09 f0       	breq	.+2      	; 0x1f50 <Timer_deInit+0x36>
    1f4e:	4e c0       	rjmp	.+156    	; 0x1fec <Timer_deInit+0xd2>
    {
    case TIMER0_ID:
        TIMSK &= ~(1 << TOIE0); /* Disable Timer0 Overflow interrupt */
    1f50:	a9 e5       	ldi	r26, 0x59	; 89
    1f52:	b0 e0       	ldi	r27, 0x00	; 0
    1f54:	e9 e5       	ldi	r30, 0x59	; 89
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z
    1f5a:	8e 7f       	andi	r24, 0xFE	; 254
    1f5c:	8c 93       	st	X, r24
        TIMSK &= ~(1 << OCIE0); /* Disable Timer0 Compare value interrupt */
    1f5e:	a9 e5       	ldi	r26, 0x59	; 89
    1f60:	b0 e0       	ldi	r27, 0x00	; 0
    1f62:	e9 e5       	ldi	r30, 0x59	; 89
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	8d 7f       	andi	r24, 0xFD	; 253
    1f6a:	8c 93       	st	X, r24
        /* Clear All Timer0 Registers */
        TCCR0 = 0;
    1f6c:	e3 e5       	ldi	r30, 0x53	; 83
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	10 82       	st	Z, r1
        TCNT0 = 0;
    1f72:	e2 e5       	ldi	r30, 0x52	; 82
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	10 82       	st	Z, r1
        g_callBackPtr_TIMER0 = NULL_PTR; /* Assign Timer0 pointer to point to NULL*/
    1f78:	10 92 7f 00 	sts	0x007F, r1
    1f7c:	10 92 7e 00 	sts	0x007E, r1
    1f80:	35 c0       	rjmp	.+106    	; 0x1fec <Timer_deInit+0xd2>
        break;
    case TIMER1_ID:
        TIMSK &= ~(1 << TOIE1);  /* Disable Timer1 Overflow interrupt */
    1f82:	a9 e5       	ldi	r26, 0x59	; 89
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	e9 e5       	ldi	r30, 0x59	; 89
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	80 81       	ld	r24, Z
    1f8c:	8b 7f       	andi	r24, 0xFB	; 251
    1f8e:	8c 93       	st	X, r24
        TIMSK &= ~(1 << OCIE1A); /* Disable Timer1 Compare value interrupt */
    1f90:	a9 e5       	ldi	r26, 0x59	; 89
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
    1f94:	e9 e5       	ldi	r30, 0x59	; 89
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	80 81       	ld	r24, Z
    1f9a:	8f 7e       	andi	r24, 0xEF	; 239
    1f9c:	8c 93       	st	X, r24
        /* Clear All Timer1 Registers */
        TCCR1A = 0;
    1f9e:	ef e4       	ldi	r30, 0x4F	; 79
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	10 82       	st	Z, r1
        TCCR1B = 0;
    1fa4:	ee e4       	ldi	r30, 0x4E	; 78
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	10 82       	st	Z, r1
        TCNT1 = 0;
    1faa:	ec e4       	ldi	r30, 0x4C	; 76
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	11 82       	std	Z+1, r1	; 0x01
    1fb0:	10 82       	st	Z, r1
        g_callBackPtr_TIMER1 = NULL_PTR; /* Assign Timer1 pointer to point to NULL*/
    1fb2:	10 92 81 00 	sts	0x0081, r1
    1fb6:	10 92 80 00 	sts	0x0080, r1
    1fba:	18 c0       	rjmp	.+48     	; 0x1fec <Timer_deInit+0xd2>
        break;
    case TIMER2_ID:
        TIMSK &= ~(1 << TOIE2); /* Disable Timer2 Overflow interrupt */
    1fbc:	a9 e5       	ldi	r26, 0x59	; 89
    1fbe:	b0 e0       	ldi	r27, 0x00	; 0
    1fc0:	e9 e5       	ldi	r30, 0x59	; 89
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	8f 7b       	andi	r24, 0xBF	; 191
    1fc8:	8c 93       	st	X, r24
        TIMSK &= ~(1 << OCIE2); /* Disable Timer2 Compare value interrupt */
    1fca:	a9 e5       	ldi	r26, 0x59	; 89
    1fcc:	b0 e0       	ldi	r27, 0x00	; 0
    1fce:	e9 e5       	ldi	r30, 0x59	; 89
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	80 81       	ld	r24, Z
    1fd4:	8f 77       	andi	r24, 0x7F	; 127
    1fd6:	8c 93       	st	X, r24
        /* Clear All Timer2 Registers */
        TCCR2 = 0;
    1fd8:	e5 e4       	ldi	r30, 0x45	; 69
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	10 82       	st	Z, r1
        TCNT2 = 0;
    1fde:	e4 e4       	ldi	r30, 0x44	; 68
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	10 82       	st	Z, r1
        g_callBackPtr_TIMER2 = NULL_PTR; /* Assign Timer1 pointer to point to NULL*/
    1fe4:	10 92 83 00 	sts	0x0083, r1
    1fe8:	10 92 82 00 	sts	0x0082, r1
        break;
    default:
        /* Do Nothing */
        break;
    }
}
    1fec:	0f 90       	pop	r0
    1fee:	0f 90       	pop	r0
    1ff0:	0f 90       	pop	r0
    1ff2:	cf 91       	pop	r28
    1ff4:	df 91       	pop	r29
    1ff6:	08 95       	ret

00001ff8 <Timer_setCallBack>:
 *
 * Return: void
 *
 */
void Timer_setCallBack(void (*a_ptr)(void), Timer_ID_Type a_timer_ID)
{
    1ff8:	df 93       	push	r29
    1ffa:	cf 93       	push	r28
    1ffc:	00 d0       	rcall	.+0      	; 0x1ffe <Timer_setCallBack+0x6>
    1ffe:	00 d0       	rcall	.+0      	; 0x2000 <Timer_setCallBack+0x8>
    2000:	0f 92       	push	r0
    2002:	cd b7       	in	r28, 0x3d	; 61
    2004:	de b7       	in	r29, 0x3e	; 62
    2006:	9a 83       	std	Y+2, r25	; 0x02
    2008:	89 83       	std	Y+1, r24	; 0x01
    200a:	6b 83       	std	Y+3, r22	; 0x03
    /* Save the address of the Call back function in TimerX global variable */
    switch (a_timer_ID)
    200c:	8b 81       	ldd	r24, Y+3	; 0x03
    200e:	28 2f       	mov	r18, r24
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	3d 83       	std	Y+5, r19	; 0x05
    2014:	2c 83       	std	Y+4, r18	; 0x04
    2016:	8c 81       	ldd	r24, Y+4	; 0x04
    2018:	9d 81       	ldd	r25, Y+5	; 0x05
    201a:	81 30       	cpi	r24, 0x01	; 1
    201c:	91 05       	cpc	r25, r1
    201e:	81 f0       	breq	.+32     	; 0x2040 <Timer_setCallBack+0x48>
    2020:	2c 81       	ldd	r18, Y+4	; 0x04
    2022:	3d 81       	ldd	r19, Y+5	; 0x05
    2024:	22 30       	cpi	r18, 0x02	; 2
    2026:	31 05       	cpc	r19, r1
    2028:	91 f0       	breq	.+36     	; 0x204e <Timer_setCallBack+0x56>
    202a:	8c 81       	ldd	r24, Y+4	; 0x04
    202c:	9d 81       	ldd	r25, Y+5	; 0x05
    202e:	00 97       	sbiw	r24, 0x00	; 0
    2030:	a1 f4       	brne	.+40     	; 0x205a <Timer_setCallBack+0x62>
    {
    case TIMER0_ID:
        /* Save the address of the Call back function in g_callBackPtr_TIMER0 global variable */
        g_callBackPtr_TIMER0 = a_ptr;
    2032:	89 81       	ldd	r24, Y+1	; 0x01
    2034:	9a 81       	ldd	r25, Y+2	; 0x02
    2036:	90 93 7f 00 	sts	0x007F, r25
    203a:	80 93 7e 00 	sts	0x007E, r24
    203e:	0d c0       	rjmp	.+26     	; 0x205a <Timer_setCallBack+0x62>
        break;
    case TIMER1_ID:
        /* Save the address of the Call back function in g_callBackPtr_TIMER1 global variable */
        g_callBackPtr_TIMER1 = a_ptr;
    2040:	89 81       	ldd	r24, Y+1	; 0x01
    2042:	9a 81       	ldd	r25, Y+2	; 0x02
    2044:	90 93 81 00 	sts	0x0081, r25
    2048:	80 93 80 00 	sts	0x0080, r24
    204c:	06 c0       	rjmp	.+12     	; 0x205a <Timer_setCallBack+0x62>
        break;
    case TIMER2_ID:
        /* Save the address of the Call back function in g_callBackPtr_TIMER2 global variable */
        g_callBackPtr_TIMER2 = a_ptr;
    204e:	89 81       	ldd	r24, Y+1	; 0x01
    2050:	9a 81       	ldd	r25, Y+2	; 0x02
    2052:	90 93 83 00 	sts	0x0083, r25
    2056:	80 93 82 00 	sts	0x0082, r24
        break;
    default:
        /* Do Nothing */
        break;
    }
}
    205a:	0f 90       	pop	r0
    205c:	0f 90       	pop	r0
    205e:	0f 90       	pop	r0
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	cf 91       	pop	r28
    2066:	df 91       	pop	r29
    2068:	08 95       	ret

0000206a <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType *Config_Ptr)
{
    206a:	df 93       	push	r29
    206c:	cf 93       	push	r28
    206e:	00 d0       	rcall	.+0      	; 0x2070 <TWI_init+0x6>
    2070:	cd b7       	in	r28, 0x3d	; 61
    2072:	de b7       	in	r29, 0x3e	; 62
    2074:	9a 83       	std	Y+2, r25	; 0x02
    2076:	89 83       	std	Y+1, r24	; 0x01
	/* Bit Rate: standard,full-speed,fast using zero pre-scaler TWPS=00 and F_CPU=8,16 MHz */
	/*F_CPU / (16 + 2(TWBR)*4^TWPS)*/
#if (F_CPU == 8000000UL) /*if CPU Clock FREQ configured as 8MHz*/
	if (Config_Ptr->bit_rate == STANDARD_MODE_100KBITS)
    2078:	e9 81       	ldd	r30, Y+1	; 0x01
    207a:	fa 81       	ldd	r31, Y+2	; 0x02
    207c:	82 81       	ldd	r24, Z+2	; 0x02
    207e:	88 23       	and	r24, r24
    2080:	29 f4       	brne	.+10     	; 0x208c <TWI_init+0x22>
	{
		TWBR = 0x32;
    2082:	e0 e2       	ldi	r30, 0x20	; 32
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	82 e3       	ldi	r24, 0x32	; 50
    2088:	80 83       	st	Z, r24
    208a:	0e c0       	rjmp	.+28     	; 0x20a8 <TWI_init+0x3e>
	}
	else if (Config_Ptr->bit_rate == FULL_SPEED_MODE_400KBITS)
    208c:	e9 81       	ldd	r30, Y+1	; 0x01
    208e:	fa 81       	ldd	r31, Y+2	; 0x02
    2090:	82 81       	ldd	r24, Z+2	; 0x02
    2092:	81 30       	cpi	r24, 0x01	; 1
    2094:	29 f4       	brne	.+10     	; 0x20a0 <TWI_init+0x36>
	{
		TWBR = 0x02;
    2096:	e0 e2       	ldi	r30, 0x20	; 32
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	82 e0       	ldi	r24, 0x02	; 2
    209c:	80 83       	st	Z, r24
    209e:	04 c0       	rjmp	.+8      	; 0x20a8 <TWI_init+0x3e>
	}
	else
	{
		TWBR = 0x32;
    20a0:	e0 e2       	ldi	r30, 0x20	; 32
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	82 e3       	ldi	r24, 0x32	; 50
    20a6:	80 83       	st	Z, r24
		TWBR = 0x72;
	}

#endif /*CPU CLOCK FREQ*/

	TWSR = 0x00; /*TWPS0, TWPS1 = 0 pre-scaler = 1*/
    20a8:	e1 e2       	ldi	r30, 0x21	; 33
    20aa:	f0 e0       	ldi	r31, 0x00	; 0
    20ac:	10 82       	st	Z, r1

	/* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
	 General Call Recognition: Off */

	TWAR = Config_Ptr->address;
    20ae:	a2 e2       	ldi	r26, 0x22	; 34
    20b0:	b0 e0       	ldi	r27, 0x00	; 0
    20b2:	e9 81       	ldd	r30, Y+1	; 0x01
    20b4:	fa 81       	ldd	r31, Y+2	; 0x02
    20b6:	80 81       	ld	r24, Z
    20b8:	91 81       	ldd	r25, Z+1	; 0x01
    20ba:	8c 93       	st	X, r24

	TWCR = (1 << TWEN); /* enable TWI */
    20bc:	e6 e5       	ldi	r30, 0x56	; 86
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	84 e0       	ldi	r24, 0x04	; 4
    20c2:	80 83       	st	Z, r24
}
    20c4:	0f 90       	pop	r0
    20c6:	0f 90       	pop	r0
    20c8:	cf 91       	pop	r28
    20ca:	df 91       	pop	r29
    20cc:	08 95       	ret

000020ce <TWI_start>:

void TWI_start(void)
{
    20ce:	df 93       	push	r29
    20d0:	cf 93       	push	r28
    20d2:	cd b7       	in	r28, 0x3d	; 61
    20d4:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    20d6:	e6 e5       	ldi	r30, 0x56	; 86
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	84 ea       	ldi	r24, 0xA4	; 164
    20dc:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
    20de:	e6 e5       	ldi	r30, 0x56	; 86
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	80 81       	ld	r24, Z
    20e4:	88 23       	and	r24, r24
    20e6:	dc f7       	brge	.-10     	; 0x20de <TWI_start+0x10>
		;
}
    20e8:	cf 91       	pop	r28
    20ea:	df 91       	pop	r29
    20ec:	08 95       	ret

000020ee <TWI_stop>:

void TWI_stop(void)
{
    20ee:	df 93       	push	r29
    20f0:	cf 93       	push	r28
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    20f6:	e6 e5       	ldi	r30, 0x56	; 86
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	84 e9       	ldi	r24, 0x94	; 148
    20fc:	80 83       	st	Z, r24
}
    20fe:	cf 91       	pop	r28
    2100:	df 91       	pop	r29
    2102:	08 95       	ret

00002104 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2104:	df 93       	push	r29
    2106:	cf 93       	push	r28
    2108:	0f 92       	push	r0
    210a:	cd b7       	in	r28, 0x3d	; 61
    210c:	de b7       	in	r29, 0x3e	; 62
    210e:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = data;
    2110:	e3 e2       	ldi	r30, 0x23	; 35
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	89 81       	ldd	r24, Y+1	; 0x01
    2116:	80 83       	st	Z, r24
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    2118:	e6 e5       	ldi	r30, 0x56	; 86
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	84 e8       	ldi	r24, 0x84	; 132
    211e:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
    2120:	e6 e5       	ldi	r30, 0x56	; 86
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	80 81       	ld	r24, Z
    2126:	88 23       	and	r24, r24
    2128:	dc f7       	brge	.-10     	; 0x2120 <TWI_writeByte+0x1c>
		;
}
    212a:	0f 90       	pop	r0
    212c:	cf 91       	pop	r28
    212e:	df 91       	pop	r29
    2130:	08 95       	ret

00002132 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2132:	df 93       	push	r29
    2134:	cf 93       	push	r28
    2136:	cd b7       	in	r28, 0x3d	; 61
    2138:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    213a:	e6 e5       	ldi	r30, 0x56	; 86
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	84 ec       	ldi	r24, 0xC4	; 196
    2140:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
    2142:	e6 e5       	ldi	r30, 0x56	; 86
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	88 23       	and	r24, r24
    214a:	dc f7       	brge	.-10     	; 0x2142 <TWI_readByteWithACK+0x10>
		;
	/* Read Data */
	return TWDR;
    214c:	e3 e2       	ldi	r30, 0x23	; 35
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
}
    2152:	cf 91       	pop	r28
    2154:	df 91       	pop	r29
    2156:	08 95       	ret

00002158 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2158:	df 93       	push	r29
    215a:	cf 93       	push	r28
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    2160:	e6 e5       	ldi	r30, 0x56	; 86
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	84 e8       	ldi	r24, 0x84	; 132
    2166:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while (BIT_IS_CLEAR(TWCR, TWINT))
    2168:	e6 e5       	ldi	r30, 0x56	; 86
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	80 81       	ld	r24, Z
    216e:	88 23       	and	r24, r24
    2170:	dc f7       	brge	.-10     	; 0x2168 <TWI_readByteWithNACK+0x10>
		;
	/* Read Data */
	return TWDR;
    2172:	e3 e2       	ldi	r30, 0x23	; 35
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	80 81       	ld	r24, Z
}
    2178:	cf 91       	pop	r28
    217a:	df 91       	pop	r29
    217c:	08 95       	ret

0000217e <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    217e:	df 93       	push	r29
    2180:	cf 93       	push	r28
    2182:	0f 92       	push	r0
    2184:	cd b7       	in	r28, 0x3d	; 61
    2186:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWSR & 0xF8;
    2188:	e1 e2       	ldi	r30, 0x21	; 33
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	80 81       	ld	r24, Z
    218e:	88 7f       	andi	r24, 0xF8	; 248
    2190:	89 83       	std	Y+1, r24	; 0x01
	return status;
    2192:	89 81       	ldd	r24, Y+1	; 0x01
}
    2194:	0f 90       	pop	r0
    2196:	cf 91       	pop	r28
    2198:	df 91       	pop	r29
    219a:	08 95       	ret

0000219c <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *Config_Ptr)
{
    219c:	df 93       	push	r29
    219e:	cf 93       	push	r28
    21a0:	00 d0       	rcall	.+0      	; 0x21a2 <UART_init+0x6>
    21a2:	00 d0       	rcall	.+0      	; 0x21a4 <UART_init+0x8>
    21a4:	cd b7       	in	r28, 0x3d	; 61
    21a6:	de b7       	in	r29, 0x3e	; 62
    21a8:	9c 83       	std	Y+4, r25	; 0x04
    21aa:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    21ac:	1a 82       	std	Y+2, r1	; 0x02
    21ae:	19 82       	std	Y+1, r1	; 0x01

	/* Set U2X = 1 for double transmission speed */
	UCSRA = (1 << U2X);
    21b0:	eb e2       	ldi	r30, 0x2B	; 43
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	82 e0       	ldi	r24, 0x02	; 2
    21b6:	80 83       	st	Z, r24
	 * RXEN  = 1: Enable Receiver
	 * TXEN  = 1: Enable Transmitter
	 * UCSZ2 = 0: Configure for 5, 6, 7, or 8-bit data mode (not used for 8-bit mode)
	 * RXB8 and TXB8: Not used in 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1 << RXEN) | (1 << TXEN);
    21b8:	ea e2       	ldi	r30, 0x2A	; 42
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	88 e1       	ldi	r24, 0x18	; 24
    21be:	80 83       	st	Z, r24
	 * UPM1:0  = 00: Disable parity bit (no parity)
	 * USBS    = 0: Configure for one stop bit
	 * UCSZ1:0 = 11: Set for 8-bit data mode
	 * UCPOL   = 0: Not used in asynchronous operation (only for synchronous)
	 ***********************************************************************/
	UCSRC = (1 << URSEL) | (Config_Ptr->bit_data << UCSZ0)
    21c0:	a0 e4       	ldi	r26, 0x40	; 64
    21c2:	b0 e0       	ldi	r27, 0x00	; 0
    21c4:	eb 81       	ldd	r30, Y+3	; 0x03
    21c6:	fc 81       	ldd	r31, Y+4	; 0x04
    21c8:	80 81       	ld	r24, Z
    21ca:	88 2f       	mov	r24, r24
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	88 0f       	add	r24, r24
    21d0:	99 1f       	adc	r25, r25
    21d2:	28 2f       	mov	r18, r24
    21d4:	20 68       	ori	r18, 0x80	; 128
    21d6:	eb 81       	ldd	r30, Y+3	; 0x03
    21d8:	fc 81       	ldd	r31, Y+4	; 0x04
    21da:	81 81       	ldd	r24, Z+1	; 0x01
    21dc:	88 2f       	mov	r24, r24
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	82 95       	swap	r24
    21e2:	92 95       	swap	r25
    21e4:	90 7f       	andi	r25, 0xF0	; 240
    21e6:	98 27       	eor	r25, r24
    21e8:	80 7f       	andi	r24, 0xF0	; 240
    21ea:	98 27       	eor	r25, r24
    21ec:	28 2b       	or	r18, r24
    21ee:	eb 81       	ldd	r30, Y+3	; 0x03
    21f0:	fc 81       	ldd	r31, Y+4	; 0x04
    21f2:	82 81       	ldd	r24, Z+2	; 0x02
    21f4:	88 2f       	mov	r24, r24
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	88 0f       	add	r24, r24
    21fa:	99 1f       	adc	r25, r25
    21fc:	88 0f       	add	r24, r24
    21fe:	99 1f       	adc	r25, r25
    2200:	88 0f       	add	r24, r24
    2202:	99 1f       	adc	r25, r25
    2204:	82 2b       	or	r24, r18
    2206:	8c 93       	st	X, r24
			| (Config_Ptr->parity << UPM0) | (Config_Ptr->stop_bit << USBS);

	/* Calculate the UBRR register value */
	ubrr_value = (uint16) (((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    2208:	eb 81       	ldd	r30, Y+3	; 0x03
    220a:	fc 81       	ldd	r31, Y+4	; 0x04
    220c:	83 81       	ldd	r24, Z+3	; 0x03
    220e:	94 81       	ldd	r25, Z+4	; 0x04
    2210:	a5 81       	ldd	r26, Z+5	; 0x05
    2212:	b6 81       	ldd	r27, Z+6	; 0x06
    2214:	88 0f       	add	r24, r24
    2216:	99 1f       	adc	r25, r25
    2218:	aa 1f       	adc	r26, r26
    221a:	bb 1f       	adc	r27, r27
    221c:	88 0f       	add	r24, r24
    221e:	99 1f       	adc	r25, r25
    2220:	aa 1f       	adc	r26, r26
    2222:	bb 1f       	adc	r27, r27
    2224:	88 0f       	add	r24, r24
    2226:	99 1f       	adc	r25, r25
    2228:	aa 1f       	adc	r26, r26
    222a:	bb 1f       	adc	r27, r27
    222c:	9c 01       	movw	r18, r24
    222e:	ad 01       	movw	r20, r26
    2230:	80 e0       	ldi	r24, 0x00	; 0
    2232:	92 e1       	ldi	r25, 0x12	; 18
    2234:	aa e7       	ldi	r26, 0x7A	; 122
    2236:	b0 e0       	ldi	r27, 0x00	; 0
    2238:	bc 01       	movw	r22, r24
    223a:	cd 01       	movw	r24, r26
    223c:	0e 94 dd 11 	call	0x23ba	; 0x23ba <__udivmodsi4>
    2240:	da 01       	movw	r26, r20
    2242:	c9 01       	movw	r24, r18
    2244:	01 97       	sbiw	r24, 0x01	; 1
    2246:	9a 83       	std	Y+2, r25	; 0x02
    2248:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value >> 8;
    224a:	e0 e4       	ldi	r30, 0x40	; 64
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	89 81       	ldd	r24, Y+1	; 0x01
    2250:	9a 81       	ldd	r25, Y+2	; 0x02
    2252:	89 2f       	mov	r24, r25
    2254:	99 27       	eor	r25, r25
    2256:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2258:	e9 e2       	ldi	r30, 0x29	; 41
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	89 81       	ldd	r24, Y+1	; 0x01
    225e:	80 83       	st	Z, r24
}
    2260:	0f 90       	pop	r0
    2262:	0f 90       	pop	r0
    2264:	0f 90       	pop	r0
    2266:	0f 90       	pop	r0
    2268:	cf 91       	pop	r28
    226a:	df 91       	pop	r29
    226c:	08 95       	ret

0000226e <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    226e:	df 93       	push	r29
    2270:	cf 93       	push	r28
    2272:	0f 92       	push	r0
    2274:	cd b7       	in	r28, 0x3d	; 61
    2276:	de b7       	in	r29, 0x3e	; 62
    2278:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while (BIT_IS_CLEAR(UCSRA, UDRE))
    227a:	eb e2       	ldi	r30, 0x2B	; 43
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	80 81       	ld	r24, Z
    2280:	88 2f       	mov	r24, r24
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	80 72       	andi	r24, 0x20	; 32
    2286:	90 70       	andi	r25, 0x00	; 0
    2288:	00 97       	sbiw	r24, 0x00	; 0
    228a:	b9 f3       	breq	.-18     	; 0x227a <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    228c:	ec e2       	ldi	r30, 0x2C	; 44
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	89 81       	ldd	r24, Y+1	; 0x01
    2292:	80 83       	st	Z, r24
	/************************* Another Method *************************
	 UDR = data;
	 while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	 SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    2294:	0f 90       	pop	r0
    2296:	cf 91       	pop	r28
    2298:	df 91       	pop	r29
    229a:	08 95       	ret

0000229c <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    229c:	df 93       	push	r29
    229e:	cf 93       	push	r28
    22a0:	cd b7       	in	r28, 0x3d	; 61
    22a2:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while (BIT_IS_CLEAR(UCSRA, RXC))
    22a4:	eb e2       	ldi	r30, 0x2B	; 43
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	80 81       	ld	r24, Z
    22aa:	88 23       	and	r24, r24
    22ac:	dc f7       	brge	.-10     	; 0x22a4 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    22ae:	ec e2       	ldi	r30, 0x2C	; 44
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	80 81       	ld	r24, Z
}
    22b4:	cf 91       	pop	r28
    22b6:	df 91       	pop	r29
    22b8:	08 95       	ret

000022ba <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    22ba:	df 93       	push	r29
    22bc:	cf 93       	push	r28
    22be:	00 d0       	rcall	.+0      	; 0x22c0 <UART_sendString+0x6>
    22c0:	0f 92       	push	r0
    22c2:	cd b7       	in	r28, 0x3d	; 61
    22c4:	de b7       	in	r29, 0x3e	; 62
    22c6:	9b 83       	std	Y+3, r25	; 0x03
    22c8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    22ca:	19 82       	std	Y+1, r1	; 0x01
    22cc:	0e c0       	rjmp	.+28     	; 0x22ea <UART_sendString+0x30>

	/* Send the whole string */
	while (Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    22ce:	89 81       	ldd	r24, Y+1	; 0x01
    22d0:	28 2f       	mov	r18, r24
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	8a 81       	ldd	r24, Y+2	; 0x02
    22d6:	9b 81       	ldd	r25, Y+3	; 0x03
    22d8:	fc 01       	movw	r30, r24
    22da:	e2 0f       	add	r30, r18
    22dc:	f3 1f       	adc	r31, r19
    22de:	80 81       	ld	r24, Z
    22e0:	0e 94 37 11 	call	0x226e	; 0x226e <UART_sendByte>
		i++;
    22e4:	89 81       	ldd	r24, Y+1	; 0x01
    22e6:	8f 5f       	subi	r24, 0xFF	; 255
    22e8:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while (Str[i] != '\0')
    22ea:	89 81       	ldd	r24, Y+1	; 0x01
    22ec:	28 2f       	mov	r18, r24
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	8a 81       	ldd	r24, Y+2	; 0x02
    22f2:	9b 81       	ldd	r25, Y+3	; 0x03
    22f4:	fc 01       	movw	r30, r24
    22f6:	e2 0f       	add	r30, r18
    22f8:	f3 1f       	adc	r31, r19
    22fa:	80 81       	ld	r24, Z
    22fc:	88 23       	and	r24, r24
    22fe:	39 f7       	brne	.-50     	; 0x22ce <UART_sendString+0x14>
	 {
	 UART_sendByte(*Str);
	 Str++;
	 }
	 *******************************************************************/
}
    2300:	0f 90       	pop	r0
    2302:	0f 90       	pop	r0
    2304:	0f 90       	pop	r0
    2306:	cf 91       	pop	r28
    2308:	df 91       	pop	r29
    230a:	08 95       	ret

0000230c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    230c:	0f 93       	push	r16
    230e:	1f 93       	push	r17
    2310:	df 93       	push	r29
    2312:	cf 93       	push	r28
    2314:	00 d0       	rcall	.+0      	; 0x2316 <UART_receiveString+0xa>
    2316:	0f 92       	push	r0
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
    231c:	9b 83       	std	Y+3, r25	; 0x03
    231e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2320:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2322:	89 81       	ldd	r24, Y+1	; 0x01
    2324:	28 2f       	mov	r18, r24
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	8a 81       	ldd	r24, Y+2	; 0x02
    232a:	9b 81       	ldd	r25, Y+3	; 0x03
    232c:	8c 01       	movw	r16, r24
    232e:	02 0f       	add	r16, r18
    2330:	13 1f       	adc	r17, r19
    2332:	0e 94 4e 11 	call	0x229c	; 0x229c <UART_recieveByte>
    2336:	f8 01       	movw	r30, r16
    2338:	80 83       	st	Z, r24
    233a:	0f c0       	rjmp	.+30     	; 0x235a <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while (Str[i] != '#')
	{
		i++;
    233c:	89 81       	ldd	r24, Y+1	; 0x01
    233e:	8f 5f       	subi	r24, 0xFF	; 255
    2340:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2342:	89 81       	ldd	r24, Y+1	; 0x01
    2344:	28 2f       	mov	r18, r24
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	8a 81       	ldd	r24, Y+2	; 0x02
    234a:	9b 81       	ldd	r25, Y+3	; 0x03
    234c:	8c 01       	movw	r16, r24
    234e:	02 0f       	add	r16, r18
    2350:	13 1f       	adc	r17, r19
    2352:	0e 94 4e 11 	call	0x229c	; 0x229c <UART_recieveByte>
    2356:	f8 01       	movw	r30, r16
    2358:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while (Str[i] != '#')
    235a:	89 81       	ldd	r24, Y+1	; 0x01
    235c:	28 2f       	mov	r18, r24
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	8a 81       	ldd	r24, Y+2	; 0x02
    2362:	9b 81       	ldd	r25, Y+3	; 0x03
    2364:	fc 01       	movw	r30, r24
    2366:	e2 0f       	add	r30, r18
    2368:	f3 1f       	adc	r31, r19
    236a:	80 81       	ld	r24, Z
    236c:	83 32       	cpi	r24, 0x23	; 35
    236e:	31 f7       	brne	.-52     	; 0x233c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2370:	89 81       	ldd	r24, Y+1	; 0x01
    2372:	28 2f       	mov	r18, r24
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	8a 81       	ldd	r24, Y+2	; 0x02
    2378:	9b 81       	ldd	r25, Y+3	; 0x03
    237a:	fc 01       	movw	r30, r24
    237c:	e2 0f       	add	r30, r18
    237e:	f3 1f       	adc	r31, r19
    2380:	10 82       	st	Z, r1
}
    2382:	0f 90       	pop	r0
    2384:	0f 90       	pop	r0
    2386:	0f 90       	pop	r0
    2388:	cf 91       	pop	r28
    238a:	df 91       	pop	r29
    238c:	1f 91       	pop	r17
    238e:	0f 91       	pop	r16
    2390:	08 95       	ret

00002392 <__udivmodhi4>:
    2392:	aa 1b       	sub	r26, r26
    2394:	bb 1b       	sub	r27, r27
    2396:	51 e1       	ldi	r21, 0x11	; 17
    2398:	07 c0       	rjmp	.+14     	; 0x23a8 <__udivmodhi4_ep>

0000239a <__udivmodhi4_loop>:
    239a:	aa 1f       	adc	r26, r26
    239c:	bb 1f       	adc	r27, r27
    239e:	a6 17       	cp	r26, r22
    23a0:	b7 07       	cpc	r27, r23
    23a2:	10 f0       	brcs	.+4      	; 0x23a8 <__udivmodhi4_ep>
    23a4:	a6 1b       	sub	r26, r22
    23a6:	b7 0b       	sbc	r27, r23

000023a8 <__udivmodhi4_ep>:
    23a8:	88 1f       	adc	r24, r24
    23aa:	99 1f       	adc	r25, r25
    23ac:	5a 95       	dec	r21
    23ae:	a9 f7       	brne	.-22     	; 0x239a <__udivmodhi4_loop>
    23b0:	80 95       	com	r24
    23b2:	90 95       	com	r25
    23b4:	bc 01       	movw	r22, r24
    23b6:	cd 01       	movw	r24, r26
    23b8:	08 95       	ret

000023ba <__udivmodsi4>:
    23ba:	a1 e2       	ldi	r26, 0x21	; 33
    23bc:	1a 2e       	mov	r1, r26
    23be:	aa 1b       	sub	r26, r26
    23c0:	bb 1b       	sub	r27, r27
    23c2:	fd 01       	movw	r30, r26
    23c4:	0d c0       	rjmp	.+26     	; 0x23e0 <__udivmodsi4_ep>

000023c6 <__udivmodsi4_loop>:
    23c6:	aa 1f       	adc	r26, r26
    23c8:	bb 1f       	adc	r27, r27
    23ca:	ee 1f       	adc	r30, r30
    23cc:	ff 1f       	adc	r31, r31
    23ce:	a2 17       	cp	r26, r18
    23d0:	b3 07       	cpc	r27, r19
    23d2:	e4 07       	cpc	r30, r20
    23d4:	f5 07       	cpc	r31, r21
    23d6:	20 f0       	brcs	.+8      	; 0x23e0 <__udivmodsi4_ep>
    23d8:	a2 1b       	sub	r26, r18
    23da:	b3 0b       	sbc	r27, r19
    23dc:	e4 0b       	sbc	r30, r20
    23de:	f5 0b       	sbc	r31, r21

000023e0 <__udivmodsi4_ep>:
    23e0:	66 1f       	adc	r22, r22
    23e2:	77 1f       	adc	r23, r23
    23e4:	88 1f       	adc	r24, r24
    23e6:	99 1f       	adc	r25, r25
    23e8:	1a 94       	dec	r1
    23ea:	69 f7       	brne	.-38     	; 0x23c6 <__udivmodsi4_loop>
    23ec:	60 95       	com	r22
    23ee:	70 95       	com	r23
    23f0:	80 95       	com	r24
    23f2:	90 95       	com	r25
    23f4:	9b 01       	movw	r18, r22
    23f6:	ac 01       	movw	r20, r24
    23f8:	bd 01       	movw	r22, r26
    23fa:	cf 01       	movw	r24, r30
    23fc:	08 95       	ret

000023fe <__prologue_saves__>:
    23fe:	2f 92       	push	r2
    2400:	3f 92       	push	r3
    2402:	4f 92       	push	r4
    2404:	5f 92       	push	r5
    2406:	6f 92       	push	r6
    2408:	7f 92       	push	r7
    240a:	8f 92       	push	r8
    240c:	9f 92       	push	r9
    240e:	af 92       	push	r10
    2410:	bf 92       	push	r11
    2412:	cf 92       	push	r12
    2414:	df 92       	push	r13
    2416:	ef 92       	push	r14
    2418:	ff 92       	push	r15
    241a:	0f 93       	push	r16
    241c:	1f 93       	push	r17
    241e:	cf 93       	push	r28
    2420:	df 93       	push	r29
    2422:	cd b7       	in	r28, 0x3d	; 61
    2424:	de b7       	in	r29, 0x3e	; 62
    2426:	ca 1b       	sub	r28, r26
    2428:	db 0b       	sbc	r29, r27
    242a:	0f b6       	in	r0, 0x3f	; 63
    242c:	f8 94       	cli
    242e:	de bf       	out	0x3e, r29	; 62
    2430:	0f be       	out	0x3f, r0	; 63
    2432:	cd bf       	out	0x3d, r28	; 61
    2434:	09 94       	ijmp

00002436 <__epilogue_restores__>:
    2436:	2a 88       	ldd	r2, Y+18	; 0x12
    2438:	39 88       	ldd	r3, Y+17	; 0x11
    243a:	48 88       	ldd	r4, Y+16	; 0x10
    243c:	5f 84       	ldd	r5, Y+15	; 0x0f
    243e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2440:	7d 84       	ldd	r7, Y+13	; 0x0d
    2442:	8c 84       	ldd	r8, Y+12	; 0x0c
    2444:	9b 84       	ldd	r9, Y+11	; 0x0b
    2446:	aa 84       	ldd	r10, Y+10	; 0x0a
    2448:	b9 84       	ldd	r11, Y+9	; 0x09
    244a:	c8 84       	ldd	r12, Y+8	; 0x08
    244c:	df 80       	ldd	r13, Y+7	; 0x07
    244e:	ee 80       	ldd	r14, Y+6	; 0x06
    2450:	fd 80       	ldd	r15, Y+5	; 0x05
    2452:	0c 81       	ldd	r16, Y+4	; 0x04
    2454:	1b 81       	ldd	r17, Y+3	; 0x03
    2456:	aa 81       	ldd	r26, Y+2	; 0x02
    2458:	b9 81       	ldd	r27, Y+1	; 0x01
    245a:	ce 0f       	add	r28, r30
    245c:	d1 1d       	adc	r29, r1
    245e:	0f b6       	in	r0, 0x3f	; 63
    2460:	f8 94       	cli
    2462:	de bf       	out	0x3e, r29	; 62
    2464:	0f be       	out	0x3f, r0	; 63
    2466:	cd bf       	out	0x3d, r28	; 61
    2468:	ed 01       	movw	r28, r26
    246a:	08 95       	ret

0000246c <_exit>:
    246c:	f8 94       	cli

0000246e <__stop_program>:
    246e:	ff cf       	rjmp	.-2      	; 0x246e <__stop_program>
