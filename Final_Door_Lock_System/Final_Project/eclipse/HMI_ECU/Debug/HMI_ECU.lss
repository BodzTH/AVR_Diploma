
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003504  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011a  00800060  00003504  00003598  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080017a  0080017a  000036b2  2**0
                  ALLOC
  3 .stab         0000330c  00000000  00000000  000036b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001677  00000000  00000000  000069c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008037  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008177  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000082e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ae1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bbc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bd28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bfb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c783  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 22 17 	jmp	0x2e44	; 0x2e44 <__vector_4>
      14:	0c 94 ef 16 	jmp	0x2dde	; 0x2dde <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 bc 16 	jmp	0x2d78	; 0x2d78 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 89 16 	jmp	0x2d12	; 0x2d12 <__vector_9>
      28:	0c 94 56 16 	jmp	0x2cac	; 0x2cac <__vector_10>
      2c:	0c 94 23 16 	jmp	0x2c46	; 0x2c46 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e0       	ldi	r30, 0x04	; 4
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 38       	cpi	r26, 0x83	; 131
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 26 0b 	call	0x164c	; 0x164c <main>
      8a:	0c 94 80 1a 	jmp	0x3500	; 0x3500 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 04 1a 	jmp	0x3408	; 0x3408 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e6       	ldi	r26, 0x64	; 100
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 20 1a 	jmp	0x3440	; 0x3440 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 10 1a 	jmp	0x3420	; 0x3420 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2c 1a 	jmp	0x3458	; 0x3458 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 10 1a 	jmp	0x3420	; 0x3420 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2c 1a 	jmp	0x3458	; 0x3458 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 04 1a 	jmp	0x3408	; 0x3408 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e6       	ldi	r24, 0x64	; 100
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 20 1a 	jmp	0x3440	; 0x3440 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 10 1a 	jmp	0x3420	; 0x3420 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2c 1a 	jmp	0x3458	; 0x3458 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 10 1a 	jmp	0x3420	; 0x3420 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2c 1a 	jmp	0x3458	; 0x3458 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 10 1a 	jmp	0x3420	; 0x3420 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2c 1a 	jmp	0x3458	; 0x3458 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 14 1a 	jmp	0x3428	; 0x3428 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 30 1a 	jmp	0x3460	; 0x3460 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <HMI_Init>:
 *
 * Return: void
 *
 */
void HMI_Init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	UART_init(&UART_configurations);				 /* Initialiaze UART module */
     b4e:	83 e7       	ldi	r24, 0x73	; 115
     b50:	91 e0       	ldi	r25, 0x01	; 1
     b52:	0e 94 e7 18 	call	0x31ce	; 0x31ce <UART_init>
	LCD_init();										 /* Initialiaze LCD module */
     b56:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <LCD_init>
	Timer_setCallBack(HMI_timerCallBack, TIMER1_ID); /* Passing the address of the call back funciton to TIMER1 */
     b5a:	86 e8       	ldi	r24, 0x86	; 134
     b5c:	9a e0       	ldi	r25, 0x0A	; 10
     b5e:	61 e0       	ldi	r22, 0x01	; 1
     b60:	0e 94 ae 18 	call	0x315c	; 0x315c <Timer_setCallBack>
	Timer_init(&TIMER_configuartions);				 /* Start TIMER1 module */
     b64:	8c e6       	ldi	r24, 0x6C	; 108
     b66:	91 e0       	ldi	r25, 0x01	; 1
     b68:	0e 94 55 17 	call	0x2eaa	; 0x2eaa <Timer_init>
	/* Enable global interrupts */
	SREG |= (1 << 7);
     b6c:	af e5       	ldi	r26, 0x5F	; 95
     b6e:	b0 e0       	ldi	r27, 0x00	; 0
     b70:	ef e5       	ldi	r30, 0x5F	; 95
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	80 81       	ld	r24, Z
     b76:	80 68       	ori	r24, 0x80	; 128
     b78:	8c 93       	st	X, r24
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <HMI_savePassword>:
 *
 * Return: void
 *
 */
void HMI_savePassword(void)
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
     b88:	ac 97       	sbiw	r28, 0x2c	; 44
     b8a:	0f b6       	in	r0, 0x3f	; 63
     b8c:	f8 94       	cli
     b8e:	de bf       	out	0x3e, r29	; 62
     b90:	0f be       	out	0x3f, r0	; 63
     b92:	cd bf       	out	0x3d, r28	; 61
	uint8 key;							/* Stores keypad pressed key value */
	uint8 password_character_index = 0; /* Holds the index of character in the password array */
     b94:	19 a2       	std	Y+33, r1	; 0x21
	/* Reverse initialized to prevent password less than 5 characters */
	uint8 password1[PASSWORD_LENGTH];		/* To store first password characters */
	uint8 password2[PASSWORD_LENGTH];		/* To store second password characters */
	boolean first_password_entry = TRUE;	/* To check for first password entry */
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	88 a3       	std	Y+32, r24	; 0x20
	boolean matched_input_password = FALSE; /* To check for matched re-entered password */
     b9a:	1f 8e       	std	Y+31, r1	; 0x1f
	/* Display to user first password entery request */
	LCD_clearScreen();					  /* Clear screen */
     b9c:	0e 94 19 16 	call	0x2c32	; 0x2c32 <LCD_clearScreen>
	LCD_displayString("Plz enter pass:"); /* Display message in the first row */
     ba0:	80 e6       	ldi	r24, 0x60	; 96
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <LCD_displayString>
	LCD_moveCursor(1, 0);				  /* Move cursor to second row to display input characters */
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	60 e0       	ldi	r22, 0x00	; 0
     bac:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <LCD_moveCursor>
     bb0:	76 c1       	rjmp	.+748    	; 0xe9e <HMI_savePassword+0x31e>
	while (!matched_input_password)		  /* Stay in loop until matched input password flag is true */
	{
		key = KEYPAD_getPressedKey();	  /* Read pressed key and store it in key variable */
     bb2:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <KEYPAD_getPressedKey>
     bb6:	8a a3       	std	Y+34, r24	; 0x22
		if (first_password_entry == TRUE) /* If first password entry */
     bb8:	88 a1       	ldd	r24, Y+32	; 0x20
     bba:	81 30       	cpi	r24, 0x01	; 1
     bbc:	81 f5       	brne	.+96     	; 0xc1e <HMI_savePassword+0x9e>
		{
			if (key >= 0 && key <= 9 && password_character_index < PASSWORD_LENGTH) /* Read 0 to 9 values only while password length within range */
     bbe:	8a a1       	ldd	r24, Y+34	; 0x22
     bc0:	8a 30       	cpi	r24, 0x0A	; 10
     bc2:	a0 f4       	brcc	.+40     	; 0xbec <HMI_savePassword+0x6c>
     bc4:	89 a1       	ldd	r24, Y+33	; 0x21
     bc6:	85 30       	cpi	r24, 0x05	; 5
     bc8:	88 f4       	brcc	.+34     	; 0xbec <HMI_savePassword+0x6c>
			{
				LCD_displayCharacter('*');				   /* Display asterisk as user input a character */
     bca:	8a e2       	ldi	r24, 0x2A	; 42
     bcc:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_displayCharacter>
				password1[password_character_index] = key; /* Assign password index with key value */
     bd0:	89 a1       	ldd	r24, Y+33	; 0x21
     bd2:	28 2f       	mov	r18, r24
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	ce 01       	movw	r24, r28
     bd8:	83 96       	adiw	r24, 0x23	; 35
     bda:	fc 01       	movw	r30, r24
     bdc:	e2 0f       	add	r30, r18
     bde:	f3 1f       	adc	r31, r19
     be0:	8a a1       	ldd	r24, Y+34	; 0x22
     be2:	80 83       	st	Z, r24
				password_character_index++;				   /* Increment password_character_index for next character input */
     be4:	89 a1       	ldd	r24, Y+33	; 0x21
     be6:	8f 5f       	subi	r24, 0xFF	; 255
     be8:	89 a3       	std	Y+33, r24	; 0x21
     bea:	e7 c0       	rjmp	.+462    	; 0xdba <HMI_savePassword+0x23a>
			}
			else if (key == ENTER_KEY && password_character_index == PASSWORD_LENGTH) /* If key value is the Enter key and same password length entered */
     bec:	8a a1       	ldd	r24, Y+34	; 0x22
     bee:	8d 33       	cpi	r24, 0x3D	; 61
     bf0:	09 f0       	breq	.+2      	; 0xbf4 <HMI_savePassword+0x74>
     bf2:	e3 c0       	rjmp	.+454    	; 0xdba <HMI_savePassword+0x23a>
     bf4:	89 a1       	ldd	r24, Y+33	; 0x21
     bf6:	85 30       	cpi	r24, 0x05	; 5
     bf8:	09 f0       	breq	.+2      	; 0xbfc <HMI_savePassword+0x7c>
     bfa:	df c0       	rjmp	.+446    	; 0xdba <HMI_savePassword+0x23a>
			{
				/* Display to user second password entery request */
				LCD_clearScreen();					   /* Clear screen */
     bfc:	0e 94 19 16 	call	0x2c32	; 0x2c32 <LCD_clearScreen>
				LCD_displayString("Plz re-enter the"); /* Display message in the first row */
     c00:	80 e7       	ldi	r24, 0x70	; 112
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <LCD_displayString>
				LCD_moveCursor(1, 0);				   /* Move cursor to second row to display second message */
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	60 e0       	ldi	r22, 0x00	; 0
     c0c:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <LCD_moveCursor>
				LCD_displayString("same pass: ");	   /* Display message in the second row */
     c10:	81 e8       	ldi	r24, 0x81	; 129
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <LCD_displayString>
				first_password_entry = FALSE;		   /* Flag first password entry as false for second password entry */
     c18:	18 a2       	std	Y+32, r1	; 0x20
				password_character_index = 0;		   /* Clear password character index to begin from first character */
     c1a:	19 a2       	std	Y+33, r1	; 0x21
     c1c:	ce c0       	rjmp	.+412    	; 0xdba <HMI_savePassword+0x23a>
			}
		}
		else /* Else second password entry */
		{
			if (key >= 0 && key <= 9 && password_character_index < PASSWORD_LENGTH) /* Read 0 to 9 values only while password length within range */
     c1e:	8a a1       	ldd	r24, Y+34	; 0x22
     c20:	8a 30       	cpi	r24, 0x0A	; 10
     c22:	a0 f4       	brcc	.+40     	; 0xc4c <HMI_savePassword+0xcc>
     c24:	89 a1       	ldd	r24, Y+33	; 0x21
     c26:	85 30       	cpi	r24, 0x05	; 5
     c28:	88 f4       	brcc	.+34     	; 0xc4c <HMI_savePassword+0xcc>
			{
				LCD_displayCharacter('*');				   /* Display asterisk as user input a character */
     c2a:	8a e2       	ldi	r24, 0x2A	; 42
     c2c:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_displayCharacter>
				password2[password_character_index] = key; /* Assign password index with key value */
     c30:	89 a1       	ldd	r24, Y+33	; 0x21
     c32:	28 2f       	mov	r18, r24
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	ce 01       	movw	r24, r28
     c38:	88 96       	adiw	r24, 0x28	; 40
     c3a:	fc 01       	movw	r30, r24
     c3c:	e2 0f       	add	r30, r18
     c3e:	f3 1f       	adc	r31, r19
     c40:	8a a1       	ldd	r24, Y+34	; 0x22
     c42:	80 83       	st	Z, r24
				password_character_index++;				   /* Increment password_character_index for next character input */
     c44:	89 a1       	ldd	r24, Y+33	; 0x21
     c46:	8f 5f       	subi	r24, 0xFF	; 255
     c48:	89 a3       	std	Y+33, r24	; 0x21
     c4a:	b7 c0       	rjmp	.+366    	; 0xdba <HMI_savePassword+0x23a>
			}
			else if (key == ENTER_KEY && password_character_index == PASSWORD_LENGTH) /* If key value is the Enter key and same password length entered */
     c4c:	8a a1       	ldd	r24, Y+34	; 0x22
     c4e:	8d 33       	cpi	r24, 0x3D	; 61
     c50:	09 f0       	breq	.+2      	; 0xc54 <HMI_savePassword+0xd4>
     c52:	b3 c0       	rjmp	.+358    	; 0xdba <HMI_savePassword+0x23a>
     c54:	89 a1       	ldd	r24, Y+33	; 0x21
     c56:	85 30       	cpi	r24, 0x05	; 5
     c58:	09 f0       	breq	.+2      	; 0xc5c <HMI_savePassword+0xdc>
     c5a:	af c0       	rjmp	.+350    	; 0xdba <HMI_savePassword+0x23a>
			{
				matched_input_password = TRUE;				/* Flag matched input password as true to quit the while loop */
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	8f 8f       	std	Y+31, r24	; 0x1f
				password_character_index = 0;				/* Clear password character index to begin from first character */
     c60:	19 a2       	std	Y+33, r1	; 0x21
				for (uint8 i = 0; i < PASSWORD_LENGTH; i++) /* Loop for number of PASSWORD_LENGTH characters */
     c62:	1e 8e       	std	Y+30, r1	; 0x1e
     c64:	a6 c0       	rjmp	.+332    	; 0xdb2 <HMI_savePassword+0x232>
				{
					if (password1[i] != password2[i]) /* If a single character mismatch detected */
     c66:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c68:	28 2f       	mov	r18, r24
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	ce 01       	movw	r24, r28
     c6e:	83 96       	adiw	r24, 0x23	; 35
     c70:	fc 01       	movw	r30, r24
     c72:	e2 0f       	add	r30, r18
     c74:	f3 1f       	adc	r31, r19
     c76:	40 81       	ld	r20, Z
     c78:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c7a:	28 2f       	mov	r18, r24
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	ce 01       	movw	r24, r28
     c80:	88 96       	adiw	r24, 0x28	; 40
     c82:	fc 01       	movw	r30, r24
     c84:	e2 0f       	add	r30, r18
     c86:	f3 1f       	adc	r31, r19
     c88:	80 81       	ld	r24, Z
     c8a:	48 17       	cp	r20, r24
     c8c:	09 f4       	brne	.+2      	; 0xc90 <HMI_savePassword+0x110>
     c8e:	8e c0       	rjmp	.+284    	; 0xdac <HMI_savePassword+0x22c>
					{
						first_password_entry = TRUE;	/* Flag first password entry as true to begin first password entry again */
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	88 a3       	std	Y+32, r24	; 0x20
						matched_input_password = FALSE; /* Flag matched input password as false to keep reading password entries again */
     c94:	1f 8e       	std	Y+31, r1	; 0x1f
						/* Display to user that password doesn't match */
						LCD_clearScreen();					   /* Clear screen */
     c96:	0e 94 19 16 	call	0x2c32	; 0x2c32 <LCD_clearScreen>
						LCD_displayString("PASSWORD DOESN'T"); /* Display message in the first row */
     c9a:	8d e8       	ldi	r24, 0x8D	; 141
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <LCD_displayString>
						LCD_moveCursor(1, 0);				   /* Move cursor to second row to display second message */
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	60 e0       	ldi	r22, 0x00	; 0
     ca6:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <LCD_moveCursor>
						LCD_displayString("	    MATCH!"); /* Display message in the second row */
     caa:	8e e9       	ldi	r24, 0x9E	; 158
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <LCD_displayString>
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	aa ef       	ldi	r26, 0xFA	; 250
     cb8:	b3 e4       	ldi	r27, 0x43	; 67
     cba:	89 8f       	std	Y+25, r24	; 0x19
     cbc:	9a 8f       	std	Y+26, r25	; 0x1a
     cbe:	ab 8f       	std	Y+27, r26	; 0x1b
     cc0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cc2:	69 8d       	ldd	r22, Y+25	; 0x19
     cc4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cc8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	4a ef       	ldi	r20, 0xFA	; 250
     cd0:	54 e4       	ldi	r21, 0x44	; 68
     cd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cd6:	dc 01       	movw	r26, r24
     cd8:	cb 01       	movw	r24, r22
     cda:	8d 8b       	std	Y+21, r24	; 0x15
     cdc:	9e 8b       	std	Y+22, r25	; 0x16
     cde:	af 8b       	std	Y+23, r26	; 0x17
     ce0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ce2:	6d 89       	ldd	r22, Y+21	; 0x15
     ce4:	7e 89       	ldd	r23, Y+22	; 0x16
     ce6:	8f 89       	ldd	r24, Y+23	; 0x17
     ce8:	98 8d       	ldd	r25, Y+24	; 0x18
     cea:	20 e0       	ldi	r18, 0x00	; 0
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	40 e8       	ldi	r20, 0x80	; 128
     cf0:	5f e3       	ldi	r21, 0x3F	; 63
     cf2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cf6:	88 23       	and	r24, r24
     cf8:	2c f4       	brge	.+10     	; 0xd04 <HMI_savePassword+0x184>
		__ticks = 1;
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	9c 8b       	std	Y+20, r25	; 0x14
     d00:	8b 8b       	std	Y+19, r24	; 0x13
     d02:	3f c0       	rjmp	.+126    	; 0xd82 <HMI_savePassword+0x202>
	else if (__tmp > 65535)
     d04:	6d 89       	ldd	r22, Y+21	; 0x15
     d06:	7e 89       	ldd	r23, Y+22	; 0x16
     d08:	8f 89       	ldd	r24, Y+23	; 0x17
     d0a:	98 8d       	ldd	r25, Y+24	; 0x18
     d0c:	20 e0       	ldi	r18, 0x00	; 0
     d0e:	3f ef       	ldi	r19, 0xFF	; 255
     d10:	4f e7       	ldi	r20, 0x7F	; 127
     d12:	57 e4       	ldi	r21, 0x47	; 71
     d14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d18:	18 16       	cp	r1, r24
     d1a:	4c f5       	brge	.+82     	; 0xd6e <HMI_savePassword+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d1c:	69 8d       	ldd	r22, Y+25	; 0x19
     d1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d20:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d22:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	40 e2       	ldi	r20, 0x20	; 32
     d2a:	51 e4       	ldi	r21, 0x41	; 65
     d2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d30:	dc 01       	movw	r26, r24
     d32:	cb 01       	movw	r24, r22
     d34:	bc 01       	movw	r22, r24
     d36:	cd 01       	movw	r24, r26
     d38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d3c:	dc 01       	movw	r26, r24
     d3e:	cb 01       	movw	r24, r22
     d40:	9c 8b       	std	Y+20, r25	; 0x14
     d42:	8b 8b       	std	Y+19, r24	; 0x13
     d44:	0f c0       	rjmp	.+30     	; 0xd64 <HMI_savePassword+0x1e4>
     d46:	88 ec       	ldi	r24, 0xC8	; 200
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	9a 8b       	std	Y+18, r25	; 0x12
     d4c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d4e:	89 89       	ldd	r24, Y+17	; 0x11
     d50:	9a 89       	ldd	r25, Y+18	; 0x12
     d52:	01 97       	sbiw	r24, 0x01	; 1
     d54:	f1 f7       	brne	.-4      	; 0xd52 <HMI_savePassword+0x1d2>
     d56:	9a 8b       	std	Y+18, r25	; 0x12
     d58:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d5a:	8b 89       	ldd	r24, Y+19	; 0x13
     d5c:	9c 89       	ldd	r25, Y+20	; 0x14
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	9c 8b       	std	Y+20, r25	; 0x14
     d62:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d64:	8b 89       	ldd	r24, Y+19	; 0x13
     d66:	9c 89       	ldd	r25, Y+20	; 0x14
     d68:	00 97       	sbiw	r24, 0x00	; 0
     d6a:	69 f7       	brne	.-38     	; 0xd46 <HMI_savePassword+0x1c6>
     d6c:	14 c0       	rjmp	.+40     	; 0xd96 <HMI_savePassword+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d6e:	6d 89       	ldd	r22, Y+21	; 0x15
     d70:	7e 89       	ldd	r23, Y+22	; 0x16
     d72:	8f 89       	ldd	r24, Y+23	; 0x17
     d74:	98 8d       	ldd	r25, Y+24	; 0x18
     d76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d7a:	dc 01       	movw	r26, r24
     d7c:	cb 01       	movw	r24, r22
     d7e:	9c 8b       	std	Y+20, r25	; 0x14
     d80:	8b 8b       	std	Y+19, r24	; 0x13
     d82:	8b 89       	ldd	r24, Y+19	; 0x13
     d84:	9c 89       	ldd	r25, Y+20	; 0x14
     d86:	98 8b       	std	Y+16, r25	; 0x10
     d88:	8f 87       	std	Y+15, r24	; 0x0f
     d8a:	8f 85       	ldd	r24, Y+15	; 0x0f
     d8c:	98 89       	ldd	r25, Y+16	; 0x10
     d8e:	01 97       	sbiw	r24, 0x01	; 1
     d90:	f1 f7       	brne	.-4      	; 0xd8e <HMI_savePassword+0x20e>
     d92:	98 8b       	std	Y+16, r25	; 0x10
     d94:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(500);						   /* Display for 0.5 second */
						/* Display the password entry message again */
						LCD_clearScreen();					  /* Clear screen */
     d96:	0e 94 19 16 	call	0x2c32	; 0x2c32 <LCD_clearScreen>
						LCD_displayString("Plz enter pass:"); /* Display message in the first row */
     d9a:	80 e6       	ldi	r24, 0x60	; 96
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <LCD_displayString>
						LCD_moveCursor(1, 0);				  /* Move cursor to second row to display input characters */
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	60 e0       	ldi	r22, 0x00	; 0
     da6:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <LCD_moveCursor>
     daa:	07 c0       	rjmp	.+14     	; 0xdba <HMI_savePassword+0x23a>
			}
			else if (key == ENTER_KEY && password_character_index == PASSWORD_LENGTH) /* If key value is the Enter key and same password length entered */
			{
				matched_input_password = TRUE;				/* Flag matched input password as true to quit the while loop */
				password_character_index = 0;				/* Clear password character index to begin from first character */
				for (uint8 i = 0; i < PASSWORD_LENGTH; i++) /* Loop for number of PASSWORD_LENGTH characters */
     dac:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dae:	8f 5f       	subi	r24, 0xFF	; 255
     db0:	8e 8f       	std	Y+30, r24	; 0x1e
     db2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     db4:	85 30       	cpi	r24, 0x05	; 5
     db6:	08 f4       	brcc	.+2      	; 0xdba <HMI_savePassword+0x23a>
     db8:	56 cf       	rjmp	.-340    	; 0xc66 <HMI_savePassword+0xe6>
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	aa ef       	ldi	r26, 0xFA	; 250
     dc0:	b3 e4       	ldi	r27, 0x43	; 67
     dc2:	8b 87       	std	Y+11, r24	; 0x0b
     dc4:	9c 87       	std	Y+12, r25	; 0x0c
     dc6:	ad 87       	std	Y+13, r26	; 0x0d
     dc8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dca:	6b 85       	ldd	r22, Y+11	; 0x0b
     dcc:	7c 85       	ldd	r23, Y+12	; 0x0c
     dce:	8d 85       	ldd	r24, Y+13	; 0x0d
     dd0:	9e 85       	ldd	r25, Y+14	; 0x0e
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	4a ef       	ldi	r20, 0xFA	; 250
     dd8:	54 e4       	ldi	r21, 0x44	; 68
     dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dde:	dc 01       	movw	r26, r24
     de0:	cb 01       	movw	r24, r22
     de2:	8f 83       	std	Y+7, r24	; 0x07
     de4:	98 87       	std	Y+8, r25	; 0x08
     de6:	a9 87       	std	Y+9, r26	; 0x09
     de8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dea:	6f 81       	ldd	r22, Y+7	; 0x07
     dec:	78 85       	ldd	r23, Y+8	; 0x08
     dee:	89 85       	ldd	r24, Y+9	; 0x09
     df0:	9a 85       	ldd	r25, Y+10	; 0x0a
     df2:	20 e0       	ldi	r18, 0x00	; 0
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	40 e8       	ldi	r20, 0x80	; 128
     df8:	5f e3       	ldi	r21, 0x3F	; 63
     dfa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dfe:	88 23       	and	r24, r24
     e00:	2c f4       	brge	.+10     	; 0xe0c <HMI_savePassword+0x28c>
		__ticks = 1;
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	9e 83       	std	Y+6, r25	; 0x06
     e08:	8d 83       	std	Y+5, r24	; 0x05
     e0a:	3f c0       	rjmp	.+126    	; 0xe8a <HMI_savePassword+0x30a>
	else if (__tmp > 65535)
     e0c:	6f 81       	ldd	r22, Y+7	; 0x07
     e0e:	78 85       	ldd	r23, Y+8	; 0x08
     e10:	89 85       	ldd	r24, Y+9	; 0x09
     e12:	9a 85       	ldd	r25, Y+10	; 0x0a
     e14:	20 e0       	ldi	r18, 0x00	; 0
     e16:	3f ef       	ldi	r19, 0xFF	; 255
     e18:	4f e7       	ldi	r20, 0x7F	; 127
     e1a:	57 e4       	ldi	r21, 0x47	; 71
     e1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e20:	18 16       	cp	r1, r24
     e22:	4c f5       	brge	.+82     	; 0xe76 <HMI_savePassword+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e24:	6b 85       	ldd	r22, Y+11	; 0x0b
     e26:	7c 85       	ldd	r23, Y+12	; 0x0c
     e28:	8d 85       	ldd	r24, Y+13	; 0x0d
     e2a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	40 e2       	ldi	r20, 0x20	; 32
     e32:	51 e4       	ldi	r21, 0x41	; 65
     e34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e38:	dc 01       	movw	r26, r24
     e3a:	cb 01       	movw	r24, r22
     e3c:	bc 01       	movw	r22, r24
     e3e:	cd 01       	movw	r24, r26
     e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e44:	dc 01       	movw	r26, r24
     e46:	cb 01       	movw	r24, r22
     e48:	9e 83       	std	Y+6, r25	; 0x06
     e4a:	8d 83       	std	Y+5, r24	; 0x05
     e4c:	0f c0       	rjmp	.+30     	; 0xe6c <HMI_savePassword+0x2ec>
     e4e:	88 ec       	ldi	r24, 0xC8	; 200
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	9c 83       	std	Y+4, r25	; 0x04
     e54:	8b 83       	std	Y+3, r24	; 0x03
     e56:	8b 81       	ldd	r24, Y+3	; 0x03
     e58:	9c 81       	ldd	r25, Y+4	; 0x04
     e5a:	01 97       	sbiw	r24, 0x01	; 1
     e5c:	f1 f7       	brne	.-4      	; 0xe5a <HMI_savePassword+0x2da>
     e5e:	9c 83       	std	Y+4, r25	; 0x04
     e60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e62:	8d 81       	ldd	r24, Y+5	; 0x05
     e64:	9e 81       	ldd	r25, Y+6	; 0x06
     e66:	01 97       	sbiw	r24, 0x01	; 1
     e68:	9e 83       	std	Y+6, r25	; 0x06
     e6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e6c:	8d 81       	ldd	r24, Y+5	; 0x05
     e6e:	9e 81       	ldd	r25, Y+6	; 0x06
     e70:	00 97       	sbiw	r24, 0x00	; 0
     e72:	69 f7       	brne	.-38     	; 0xe4e <HMI_savePassword+0x2ce>
     e74:	14 c0       	rjmp	.+40     	; 0xe9e <HMI_savePassword+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e76:	6f 81       	ldd	r22, Y+7	; 0x07
     e78:	78 85       	ldd	r23, Y+8	; 0x08
     e7a:	89 85       	ldd	r24, Y+9	; 0x09
     e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e82:	dc 01       	movw	r26, r24
     e84:	cb 01       	movw	r24, r22
     e86:	9e 83       	std	Y+6, r25	; 0x06
     e88:	8d 83       	std	Y+5, r24	; 0x05
     e8a:	8d 81       	ldd	r24, Y+5	; 0x05
     e8c:	9e 81       	ldd	r25, Y+6	; 0x06
     e8e:	9a 83       	std	Y+2, r25	; 0x02
     e90:	89 83       	std	Y+1, r24	; 0x01
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	9a 81       	ldd	r25, Y+2	; 0x02
     e96:	01 97       	sbiw	r24, 0x01	; 1
     e98:	f1 f7       	brne	.-4      	; 0xe96 <HMI_savePassword+0x316>
     e9a:	9a 83       	std	Y+2, r25	; 0x02
     e9c:	89 83       	std	Y+1, r24	; 0x01
	boolean matched_input_password = FALSE; /* To check for matched re-entered password */
	/* Display to user first password entery request */
	LCD_clearScreen();					  /* Clear screen */
	LCD_displayString("Plz enter pass:"); /* Display message in the first row */
	LCD_moveCursor(1, 0);				  /* Move cursor to second row to display input characters */
	while (!matched_input_password)		  /* Stay in loop until matched input password flag is true */
     e9e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ea0:	88 23       	and	r24, r24
     ea2:	09 f4       	brne	.+2      	; 0xea6 <HMI_savePassword+0x326>
     ea4:	86 ce       	rjmp	.-756    	; 0xbb2 <HMI_savePassword+0x32>
			}
		}
		_delay_ms(500); /* Press time */
	}
	/* As while loop executed, execute the code below */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) /* Save new password */
     ea6:	1d 8e       	std	Y+29, r1	; 0x1d
     ea8:	12 c0       	rjmp	.+36     	; 0xece <HMI_savePassword+0x34e>
	{
		UART_sendByte(password1[i]); /* Send indexed character byte to CTRL */
     eaa:	8d 8d       	ldd	r24, Y+29	; 0x1d
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	ce 01       	movw	r24, r28
     eb2:	83 96       	adiw	r24, 0x23	; 35
     eb4:	fc 01       	movw	r30, r24
     eb6:	e2 0f       	add	r30, r18
     eb8:	f3 1f       	adc	r31, r19
     eba:	80 81       	ld	r24, Z
     ebc:	0e 94 50 19 	call	0x32a0	; 0x32a0 <UART_sendByte>
		while (UART_recieveByte() != CTRL_READY_TO_RECEIVE); /* Wait until CTRL sends ready to receive code */
     ec0:	0e 94 67 19 	call	0x32ce	; 0x32ce <UART_recieveByte>
     ec4:	80 32       	cpi	r24, 0x20	; 32
     ec6:	e1 f7       	brne	.-8      	; 0xec0 <HMI_savePassword+0x340>
			}
		}
		_delay_ms(500); /* Press time */
	}
	/* As while loop executed, execute the code below */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) /* Save new password */
     ec8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     eca:	8f 5f       	subi	r24, 0xFF	; 255
     ecc:	8d 8f       	std	Y+29, r24	; 0x1d
     ece:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ed0:	85 30       	cpi	r24, 0x05	; 5
     ed2:	58 f3       	brcs	.-42     	; 0xeaa <HMI_savePassword+0x32a>
	{
		UART_sendByte(password1[i]); /* Send indexed character byte to CTRL */
		while (UART_recieveByte() != CTRL_READY_TO_RECEIVE); /* Wait until CTRL sends ready to receive code */
	}
	/* Display the main options */
	LCD_clearScreen();									 /* Clear screen */
     ed4:	0e 94 19 16 	call	0x2c32	; 0x2c32 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "+ : Open Door");	 /* Display open door option in first row */
     ed8:	2a ea       	ldi	r18, 0xAA	; 170
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	60 e0       	ldi	r22, 0x00	; 0
     ee0:	a9 01       	movw	r20, r18
     ee2:	0e 94 dd 15 	call	0x2bba	; 0x2bba <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "- : Change Pass"); /* Display change password option in second row */
     ee6:	28 eb       	ldi	r18, 0xB8	; 184
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	60 e0       	ldi	r22, 0x00	; 0
     eee:	a9 01       	movw	r20, r18
     ef0:	0e 94 dd 15 	call	0x2bba	; 0x2bba <LCD_displayStringRowColumn>
}
     ef4:	ac 96       	adiw	r28, 0x2c	; 44
     ef6:	0f b6       	in	r0, 0x3f	; 63
     ef8:	f8 94       	cli
     efa:	de bf       	out	0x3e, r29	; 62
     efc:	0f be       	out	0x3f, r0	; 63
     efe:	cd bf       	out	0x3d, r28	; 61
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <HMI_changePassword>:
 *
 * Return: void
 *
 */
void HMI_changePassword(void)
{
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
     f0e:	a6 97       	sbiw	r28, 0x26	; 38
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	f8 94       	cli
     f14:	de bf       	out	0x3e, r29	; 62
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	cd bf       	out	0x3d, r28	; 61
	uint8 key;										   /* Stores keypad pressed key value */
	uint8 uart_recieve_buffer = 0;					   /*To store the byte in the recieve buffer in a varaible */
     f1a:	18 a2       	std	Y+32, r1	; 0x20
	uint8 password_character_index = 0;				   /* Holds the index of character in the password array */
     f1c:	1f 8e       	std	Y+31, r1	; 0x1f
	uint8 password[PASSWORD_LENGTH];				   /* To store password characters */
	boolean password_entered = FALSE;				   /* To check for user password confirmation */
     f1e:	1e 8e       	std	Y+30, r1	; 0x1e
	/* Display user first password entery request */
	LCD_clearScreen();					/* Clear screen */
     f20:	0e 94 19 16 	call	0x2c32	; 0x2c32 <LCD_clearScreen>
	LCD_displayString("Plz enter old"); /* Display message in the first row */
     f24:	88 ec       	ldi	r24, 0xC8	; 200
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <LCD_displayString>
	LCD_moveCursor(1, 0);				/* Move cursor to second row to display second message */
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	60 e0       	ldi	r22, 0x00	; 0
     f30:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <LCD_moveCursor>
	LCD_displayString("pass: ");		/* Display message in the second row */
     f34:	86 ed       	ldi	r24, 0xD6	; 214
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <LCD_displayString>
     f3c:	94 c0       	rjmp	.+296    	; 0x1066 <HMI_changePassword+0x160>
	while (!password_entered)			/* Stay in loop until password entred flag is true */
	{
		key = KEYPAD_getPressedKey();											/* Read pressed key and store it in key variable */
     f3e:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <KEYPAD_getPressedKey>
     f42:	89 a3       	std	Y+33, r24	; 0x21
		if (key >= 0 && key <= 9 && password_character_index < PASSWORD_LENGTH) /* Read 0 to 9 values only while password length within range */
     f44:	89 a1       	ldd	r24, Y+33	; 0x21
     f46:	8a 30       	cpi	r24, 0x0A	; 10
     f48:	a0 f4       	brcc	.+40     	; 0xf72 <HMI_changePassword+0x6c>
     f4a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f4c:	85 30       	cpi	r24, 0x05	; 5
     f4e:	88 f4       	brcc	.+34     	; 0xf72 <HMI_changePassword+0x6c>
		{

			LCD_displayCharacter('*');				   /* Display asterisk as user input a character */
     f50:	8a e2       	ldi	r24, 0x2A	; 42
     f52:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_displayCharacter>
			password[password_character_index] = key;  /* Assign password index with key value */
     f56:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	ce 01       	movw	r24, r28
     f5e:	82 96       	adiw	r24, 0x22	; 34
     f60:	fc 01       	movw	r30, r24
     f62:	e2 0f       	add	r30, r18
     f64:	f3 1f       	adc	r31, r19
     f66:	89 a1       	ldd	r24, Y+33	; 0x21
     f68:	80 83       	st	Z, r24
			password_character_index++;				   /* Increment password_character_index for next character input */
     f6a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f6c:	8f 5f       	subi	r24, 0xFF	; 255
     f6e:	8f 8f       	std	Y+31, r24	; 0x1f
     f70:	08 c0       	rjmp	.+16     	; 0xf82 <HMI_changePassword+0x7c>
		}
		else if (key == ENTER_KEY && password_character_index == PASSWORD_LENGTH) /* If key value is the Enter key and same password length entered */
     f72:	89 a1       	ldd	r24, Y+33	; 0x21
     f74:	8d 33       	cpi	r24, 0x3D	; 61
     f76:	29 f4       	brne	.+10     	; 0xf82 <HMI_changePassword+0x7c>
     f78:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f7a:	85 30       	cpi	r24, 0x05	; 5
     f7c:	11 f4       	brne	.+4      	; 0xf82 <HMI_changePassword+0x7c>
		{
			password_entered = TRUE; /* Flag password entered as true to quit the while loop */
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	8e 8f       	std	Y+30, r24	; 0x1e
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	aa ef       	ldi	r26, 0xFA	; 250
     f88:	b3 e4       	ldi	r27, 0x43	; 67
     f8a:	89 8f       	std	Y+25, r24	; 0x19
     f8c:	9a 8f       	std	Y+26, r25	; 0x1a
     f8e:	ab 8f       	std	Y+27, r26	; 0x1b
     f90:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f92:	69 8d       	ldd	r22, Y+25	; 0x19
     f94:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f96:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f98:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f9a:	20 e0       	ldi	r18, 0x00	; 0
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	4a ef       	ldi	r20, 0xFA	; 250
     fa0:	54 e4       	ldi	r21, 0x44	; 68
     fa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fa6:	dc 01       	movw	r26, r24
     fa8:	cb 01       	movw	r24, r22
     faa:	8d 8b       	std	Y+21, r24	; 0x15
     fac:	9e 8b       	std	Y+22, r25	; 0x16
     fae:	af 8b       	std	Y+23, r26	; 0x17
     fb0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fb2:	6d 89       	ldd	r22, Y+21	; 0x15
     fb4:	7e 89       	ldd	r23, Y+22	; 0x16
     fb6:	8f 89       	ldd	r24, Y+23	; 0x17
     fb8:	98 8d       	ldd	r25, Y+24	; 0x18
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	40 e8       	ldi	r20, 0x80	; 128
     fc0:	5f e3       	ldi	r21, 0x3F	; 63
     fc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fc6:	88 23       	and	r24, r24
     fc8:	2c f4       	brge	.+10     	; 0xfd4 <HMI_changePassword+0xce>
		__ticks = 1;
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	9c 8b       	std	Y+20, r25	; 0x14
     fd0:	8b 8b       	std	Y+19, r24	; 0x13
     fd2:	3f c0       	rjmp	.+126    	; 0x1052 <HMI_changePassword+0x14c>
	else if (__tmp > 65535)
     fd4:	6d 89       	ldd	r22, Y+21	; 0x15
     fd6:	7e 89       	ldd	r23, Y+22	; 0x16
     fd8:	8f 89       	ldd	r24, Y+23	; 0x17
     fda:	98 8d       	ldd	r25, Y+24	; 0x18
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	3f ef       	ldi	r19, 0xFF	; 255
     fe0:	4f e7       	ldi	r20, 0x7F	; 127
     fe2:	57 e4       	ldi	r21, 0x47	; 71
     fe4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fe8:	18 16       	cp	r1, r24
     fea:	4c f5       	brge	.+82     	; 0x103e <HMI_changePassword+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fec:	69 8d       	ldd	r22, Y+25	; 0x19
     fee:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ff0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ff2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	40 e2       	ldi	r20, 0x20	; 32
     ffa:	51 e4       	ldi	r21, 0x41	; 65
     ffc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1000:	dc 01       	movw	r26, r24
    1002:	cb 01       	movw	r24, r22
    1004:	bc 01       	movw	r22, r24
    1006:	cd 01       	movw	r24, r26
    1008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    100c:	dc 01       	movw	r26, r24
    100e:	cb 01       	movw	r24, r22
    1010:	9c 8b       	std	Y+20, r25	; 0x14
    1012:	8b 8b       	std	Y+19, r24	; 0x13
    1014:	0f c0       	rjmp	.+30     	; 0x1034 <HMI_changePassword+0x12e>
    1016:	88 ec       	ldi	r24, 0xC8	; 200
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	9a 8b       	std	Y+18, r25	; 0x12
    101c:	89 8b       	std	Y+17, r24	; 0x11
    101e:	89 89       	ldd	r24, Y+17	; 0x11
    1020:	9a 89       	ldd	r25, Y+18	; 0x12
    1022:	01 97       	sbiw	r24, 0x01	; 1
    1024:	f1 f7       	brne	.-4      	; 0x1022 <HMI_changePassword+0x11c>
    1026:	9a 8b       	std	Y+18, r25	; 0x12
    1028:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    102a:	8b 89       	ldd	r24, Y+19	; 0x13
    102c:	9c 89       	ldd	r25, Y+20	; 0x14
    102e:	01 97       	sbiw	r24, 0x01	; 1
    1030:	9c 8b       	std	Y+20, r25	; 0x14
    1032:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1034:	8b 89       	ldd	r24, Y+19	; 0x13
    1036:	9c 89       	ldd	r25, Y+20	; 0x14
    1038:	00 97       	sbiw	r24, 0x00	; 0
    103a:	69 f7       	brne	.-38     	; 0x1016 <HMI_changePassword+0x110>
    103c:	14 c0       	rjmp	.+40     	; 0x1066 <HMI_changePassword+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    103e:	6d 89       	ldd	r22, Y+21	; 0x15
    1040:	7e 89       	ldd	r23, Y+22	; 0x16
    1042:	8f 89       	ldd	r24, Y+23	; 0x17
    1044:	98 8d       	ldd	r25, Y+24	; 0x18
    1046:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    104a:	dc 01       	movw	r26, r24
    104c:	cb 01       	movw	r24, r22
    104e:	9c 8b       	std	Y+20, r25	; 0x14
    1050:	8b 8b       	std	Y+19, r24	; 0x13
    1052:	8b 89       	ldd	r24, Y+19	; 0x13
    1054:	9c 89       	ldd	r25, Y+20	; 0x14
    1056:	98 8b       	std	Y+16, r25	; 0x10
    1058:	8f 87       	std	Y+15, r24	; 0x0f
    105a:	8f 85       	ldd	r24, Y+15	; 0x0f
    105c:	98 89       	ldd	r25, Y+16	; 0x10
    105e:	01 97       	sbiw	r24, 0x01	; 1
    1060:	f1 f7       	brne	.-4      	; 0x105e <HMI_changePassword+0x158>
    1062:	98 8b       	std	Y+16, r25	; 0x10
    1064:	8f 87       	std	Y+15, r24	; 0x0f
	/* Display user first password entery request */
	LCD_clearScreen();					/* Clear screen */
	LCD_displayString("Plz enter old"); /* Display message in the first row */
	LCD_moveCursor(1, 0);				/* Move cursor to second row to display second message */
	LCD_displayString("pass: ");		/* Display message in the second row */
	while (!password_entered)			/* Stay in loop until password entred flag is true */
    1066:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1068:	88 23       	and	r24, r24
    106a:	09 f4       	brne	.+2      	; 0x106e <HMI_changePassword+0x168>
    106c:	68 cf       	rjmp	.-304    	; 0xf3e <HMI_changePassword+0x38>
		{
			password_entered = TRUE; /* Flag password entered as true to quit the while loop */
		}
		_delay_ms(500); /* Press time */
	}
	UART_sendByte(CHANGE_PASSWORD); /* Send to CTRL change password code to call change password function */
    106e:	86 e2       	ldi	r24, 0x26	; 38
    1070:	0e 94 50 19 	call	0x32a0	; 0x32a0 <UART_sendByte>

	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) /* Loop for number of PASSWORD_LENGTH characters */
    1074:	1d 8e       	std	Y+29, r1	; 0x1d
    1076:	b0 c0       	rjmp	.+352    	; 0x11d8 <HMI_changePassword+0x2d2>
	{
		UART_sendByte(password[i]);						/* Send indexed character byte to CTRL */
    1078:	8d 8d       	ldd	r24, Y+29	; 0x1d
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	ce 01       	movw	r24, r28
    1080:	82 96       	adiw	r24, 0x22	; 34
    1082:	fc 01       	movw	r30, r24
    1084:	e2 0f       	add	r30, r18
    1086:	f3 1f       	adc	r31, r19
    1088:	80 81       	ld	r24, Z
    108a:	0e 94 50 19 	call	0x32a0	; 0x32a0 <UART_sendByte>
		uart_recieve_buffer = UART_recieveByte();		/* store in uart_recieve_buffer the uart recieve buffer byte sent from CTRL */
    108e:	0e 94 67 19 	call	0x32ce	; 0x32ce <UART_recieveByte>
    1092:	88 a3       	std	Y+32, r24	; 0x20
		if (uart_recieve_buffer == PASSWORD_MISMATCHED) /* If the uart_recieve_buffer byte message code is PASSWORD_MISMATCHED */
    1094:	88 a1       	ldd	r24, Y+32	; 0x20
    1096:	82 32       	cpi	r24, 0x22	; 34
    1098:	09 f0       	breq	.+2      	; 0x109c <HMI_changePassword+0x196>
    109a:	7b c0       	rjmp	.+246    	; 0x1192 <HMI_changePassword+0x28c>
		{
			/* Display to user that password is wrong */
			LCD_clearScreen();					 /* Clear screen */
    109c:	0e 94 19 16 	call	0x2c32	; 0x2c32 <LCD_clearScreen>
			LCD_displayString("WRONG PASSWORD"); /* Display message in the first row */
    10a0:	8d ed       	ldi	r24, 0xDD	; 221
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <LCD_displayString>
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	aa ef       	ldi	r26, 0xFA	; 250
    10ae:	b3 e4       	ldi	r27, 0x43	; 67
    10b0:	8b 87       	std	Y+11, r24	; 0x0b
    10b2:	9c 87       	std	Y+12, r25	; 0x0c
    10b4:	ad 87       	std	Y+13, r26	; 0x0d
    10b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    10ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    10bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    10be:	9e 85       	ldd	r25, Y+14	; 0x0e
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	4a ef       	ldi	r20, 0xFA	; 250
    10c6:	54 e4       	ldi	r21, 0x44	; 68
    10c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10cc:	dc 01       	movw	r26, r24
    10ce:	cb 01       	movw	r24, r22
    10d0:	8f 83       	std	Y+7, r24	; 0x07
    10d2:	98 87       	std	Y+8, r25	; 0x08
    10d4:	a9 87       	std	Y+9, r26	; 0x09
    10d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10d8:	6f 81       	ldd	r22, Y+7	; 0x07
    10da:	78 85       	ldd	r23, Y+8	; 0x08
    10dc:	89 85       	ldd	r24, Y+9	; 0x09
    10de:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	40 e8       	ldi	r20, 0x80	; 128
    10e6:	5f e3       	ldi	r21, 0x3F	; 63
    10e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10ec:	88 23       	and	r24, r24
    10ee:	2c f4       	brge	.+10     	; 0x10fa <HMI_changePassword+0x1f4>
		__ticks = 1;
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	9e 83       	std	Y+6, r25	; 0x06
    10f6:	8d 83       	std	Y+5, r24	; 0x05
    10f8:	3f c0       	rjmp	.+126    	; 0x1178 <HMI_changePassword+0x272>
	else if (__tmp > 65535)
    10fa:	6f 81       	ldd	r22, Y+7	; 0x07
    10fc:	78 85       	ldd	r23, Y+8	; 0x08
    10fe:	89 85       	ldd	r24, Y+9	; 0x09
    1100:	9a 85       	ldd	r25, Y+10	; 0x0a
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	3f ef       	ldi	r19, 0xFF	; 255
    1106:	4f e7       	ldi	r20, 0x7F	; 127
    1108:	57 e4       	ldi	r21, 0x47	; 71
    110a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    110e:	18 16       	cp	r1, r24
    1110:	4c f5       	brge	.+82     	; 0x1164 <HMI_changePassword+0x25e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1112:	6b 85       	ldd	r22, Y+11	; 0x0b
    1114:	7c 85       	ldd	r23, Y+12	; 0x0c
    1116:	8d 85       	ldd	r24, Y+13	; 0x0d
    1118:	9e 85       	ldd	r25, Y+14	; 0x0e
    111a:	20 e0       	ldi	r18, 0x00	; 0
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	40 e2       	ldi	r20, 0x20	; 32
    1120:	51 e4       	ldi	r21, 0x41	; 65
    1122:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1126:	dc 01       	movw	r26, r24
    1128:	cb 01       	movw	r24, r22
    112a:	bc 01       	movw	r22, r24
    112c:	cd 01       	movw	r24, r26
    112e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1132:	dc 01       	movw	r26, r24
    1134:	cb 01       	movw	r24, r22
    1136:	9e 83       	std	Y+6, r25	; 0x06
    1138:	8d 83       	std	Y+5, r24	; 0x05
    113a:	0f c0       	rjmp	.+30     	; 0x115a <HMI_changePassword+0x254>
    113c:	88 ec       	ldi	r24, 0xC8	; 200
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	9c 83       	std	Y+4, r25	; 0x04
    1142:	8b 83       	std	Y+3, r24	; 0x03
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	9c 81       	ldd	r25, Y+4	; 0x04
    1148:	01 97       	sbiw	r24, 0x01	; 1
    114a:	f1 f7       	brne	.-4      	; 0x1148 <HMI_changePassword+0x242>
    114c:	9c 83       	std	Y+4, r25	; 0x04
    114e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1150:	8d 81       	ldd	r24, Y+5	; 0x05
    1152:	9e 81       	ldd	r25, Y+6	; 0x06
    1154:	01 97       	sbiw	r24, 0x01	; 1
    1156:	9e 83       	std	Y+6, r25	; 0x06
    1158:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    115a:	8d 81       	ldd	r24, Y+5	; 0x05
    115c:	9e 81       	ldd	r25, Y+6	; 0x06
    115e:	00 97       	sbiw	r24, 0x00	; 0
    1160:	69 f7       	brne	.-38     	; 0x113c <HMI_changePassword+0x236>
    1162:	14 c0       	rjmp	.+40     	; 0x118c <HMI_changePassword+0x286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1164:	6f 81       	ldd	r22, Y+7	; 0x07
    1166:	78 85       	ldd	r23, Y+8	; 0x08
    1168:	89 85       	ldd	r24, Y+9	; 0x09
    116a:	9a 85       	ldd	r25, Y+10	; 0x0a
    116c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1170:	dc 01       	movw	r26, r24
    1172:	cb 01       	movw	r24, r22
    1174:	9e 83       	std	Y+6, r25	; 0x06
    1176:	8d 83       	std	Y+5, r24	; 0x05
    1178:	8d 81       	ldd	r24, Y+5	; 0x05
    117a:	9e 81       	ldd	r25, Y+6	; 0x06
    117c:	9a 83       	std	Y+2, r25	; 0x02
    117e:	89 83       	std	Y+1, r24	; 0x01
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	9a 81       	ldd	r25, Y+2	; 0x02
    1184:	01 97       	sbiw	r24, 0x01	; 1
    1186:	f1 f7       	brne	.-4      	; 0x1184 <HMI_changePassword+0x27e>
    1188:	9a 83       	std	Y+2, r25	; 0x02
    118a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);						 /* Display for 0.5 second */
			HMI_changePassword();				 /* Call change password function to begin password entry again */
    118c:	0e 94 83 07 	call	0xf06	; 0xf06 <HMI_changePassword>
    1190:	29 c0       	rjmp	.+82     	; 0x11e4 <HMI_changePassword+0x2de>
			return;								 /* Return to quit the function */
		}
		else if (uart_recieve_buffer == LOCK_SYSTEM) /* If the uart_recieve_buffer byte message code is LOCK_SYSTEM */
    1192:	88 a1       	ldd	r24, Y+32	; 0x20
    1194:	83 32       	cpi	r24, 0x23	; 35
    1196:	b1 f4       	brne	.+44     	; 0x11c4 <HMI_changePassword+0x2be>
		{
			g_ticks = 0;				 /* Clear Timer ticks to start counting from 0 seconds */
    1198:	10 92 7b 01 	sts	0x017B, r1
    119c:	10 92 7a 01 	sts	0x017A, r1
			g_sys_state = SYSTEM_LOCKED; /* Switch to SYSTEM_LOCKED state */
    11a0:	84 e0       	ldi	r24, 0x04	; 4
    11a2:	80 93 82 01 	sts	0x0182, r24
			/* Display to user that the system is locked */
			LCD_clearScreen(); /* Clear screen */
    11a6:	0e 94 19 16 	call	0x2c32	; 0x2c32 <LCD_clearScreen>
			LCD_displayString(" SYSTEM LOCKED");  /* Display message in the first row */
    11aa:	8c ee       	ldi	r24, 0xEC	; 236
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <LCD_displayString>
			LCD_moveCursor(1, 0);				  /* Move cursor to second row to display second message */
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	60 e0       	ldi	r22, 0x00	; 0
    11b6:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <LCD_moveCursor>
			LCD_displayString(" Wait for 1 min"); /* Display message in the second row */
    11ba:	8b ef       	ldi	r24, 0xFB	; 251
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <LCD_displayString>
    11c2:	10 c0       	rjmp	.+32     	; 0x11e4 <HMI_changePassword+0x2de>
			return;								  /* Return to quit the function */
		}
		else if (uart_recieve_buffer == CTRL_READY_TO_RECEIVE) /* If the uart_recieve_buffer byte message code is CTRL_READY_TO_RECEIVE */
    11c4:	88 a1       	ldd	r24, Y+32	; 0x20
    11c6:	80 32       	cpi	r24, 0x20	; 32
    11c8:	21 f0       	breq	.+8      	; 0x11d2 <HMI_changePassword+0x2cc>
		{
			/* Do nothing */
		}
		else
		{
			while (UART_recieveByte() != CTRL_READY_TO_RECEIVE); /* Wait until CTRL sends ready to receive code */
    11ca:	0e 94 67 19 	call	0x32ce	; 0x32ce <UART_recieveByte>
    11ce:	80 32       	cpi	r24, 0x20	; 32
    11d0:	e1 f7       	brne	.-8      	; 0x11ca <HMI_changePassword+0x2c4>
		}
		_delay_ms(500); /* Press time */
	}
	UART_sendByte(CHANGE_PASSWORD); /* Send to CTRL change password code to call change password function */

	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) /* Loop for number of PASSWORD_LENGTH characters */
    11d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11d4:	8f 5f       	subi	r24, 0xFF	; 255
    11d6:	8d 8f       	std	Y+29, r24	; 0x1d
    11d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11da:	85 30       	cpi	r24, 0x05	; 5
    11dc:	08 f4       	brcc	.+2      	; 0x11e0 <HMI_changePassword+0x2da>
    11de:	4c cf       	rjmp	.-360    	; 0x1078 <HMI_changePassword+0x172>
		else
		{
			while (UART_recieveByte() != CTRL_READY_TO_RECEIVE); /* Wait until CTRL sends ready to receive code */
		}
	}
	HMI_savePassword(); /* As for loop executed without return, call the save password function */
    11e0:	0e 94 c0 05 	call	0xb80	; 0xb80 <HMI_savePassword>
}
    11e4:	a6 96       	adiw	r28, 0x26	; 38
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	f8 94       	cli
    11ea:	de bf       	out	0x3e, r29	; 62
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	cd bf       	out	0x3d, r28	; 61
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <HMI_unlockDoor>:
 *
 * Return: void
 *
 */
void HMI_unlockDoor(void)
{
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    11fe:	a6 97       	sbiw	r28, 0x26	; 38
    1200:	0f b6       	in	r0, 0x3f	; 63
    1202:	f8 94       	cli
    1204:	de bf       	out	0x3e, r29	; 62
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	cd bf       	out	0x3d, r28	; 61
	uint8 key;							/* Stores keypad pressed key value */
	uint8 uart_recieve_buffer = 0;		/*To store the byte in the recieve buffer in a varaible */
    120a:	18 a2       	std	Y+32, r1	; 0x20
	uint8 password_character_index = 0; /* Holds the index of character in the password array */
    120c:	1f 8e       	std	Y+31, r1	; 0x1f
	uint8 password[PASSWORD_LENGTH];	/* To store password characters */
	boolean password_entered = FALSE;	/* To check for user password confirmation */
    120e:	1e 8e       	std	Y+30, r1	; 0x1e
	/* Display user first password entery request */
	LCD_clearScreen();					/* Clear screen */
    1210:	0e 94 19 16 	call	0x2c32	; 0x2c32 <LCD_clearScreen>
	LCD_displayString("Plz enter old"); /* Display message in the first row */
    1214:	88 ec       	ldi	r24, 0xC8	; 200
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <LCD_displayString>
	LCD_moveCursor(1, 0);				/* Move cursor to second row to display second message */
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	60 e0       	ldi	r22, 0x00	; 0
    1220:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <LCD_moveCursor>
	LCD_displayString("pass: ");		/* Display message in the second row */
    1224:	86 ed       	ldi	r24, 0xD6	; 214
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <LCD_displayString>
    122c:	94 c0       	rjmp	.+296    	; 0x1356 <HMI_unlockDoor+0x160>
	while (!password_entered)			/* Stay in loop until password entred flag is true */
	{
		key = KEYPAD_getPressedKey();											/* Read pressed key and store it in key variable */
    122e:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <KEYPAD_getPressedKey>
    1232:	89 a3       	std	Y+33, r24	; 0x21
		if (key >= 0 && key <= 9 && password_character_index < PASSWORD_LENGTH) /* Read 0 to 9 values only while password length within range */
    1234:	89 a1       	ldd	r24, Y+33	; 0x21
    1236:	8a 30       	cpi	r24, 0x0A	; 10
    1238:	a0 f4       	brcc	.+40     	; 0x1262 <HMI_unlockDoor+0x6c>
    123a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    123c:	85 30       	cpi	r24, 0x05	; 5
    123e:	88 f4       	brcc	.+34     	; 0x1262 <HMI_unlockDoor+0x6c>
		{

			LCD_displayCharacter('*');				   /* Display asterisk as user input a character */
    1240:	8a e2       	ldi	r24, 0x2A	; 42
    1242:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_displayCharacter>
			password[password_character_index] = key;  /* Assign password index with key value */
    1246:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1248:	28 2f       	mov	r18, r24
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	ce 01       	movw	r24, r28
    124e:	82 96       	adiw	r24, 0x22	; 34
    1250:	fc 01       	movw	r30, r24
    1252:	e2 0f       	add	r30, r18
    1254:	f3 1f       	adc	r31, r19
    1256:	89 a1       	ldd	r24, Y+33	; 0x21
    1258:	80 83       	st	Z, r24
			password_character_index++;				   /* Increment password_character_index for next character input */
    125a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    125c:	8f 5f       	subi	r24, 0xFF	; 255
    125e:	8f 8f       	std	Y+31, r24	; 0x1f
    1260:	08 c0       	rjmp	.+16     	; 0x1272 <HMI_unlockDoor+0x7c>
		}
		else if (key == ENTER_KEY && password_character_index == PASSWORD_LENGTH) /* If key value is the Enter key and same password length entered */
    1262:	89 a1       	ldd	r24, Y+33	; 0x21
    1264:	8d 33       	cpi	r24, 0x3D	; 61
    1266:	29 f4       	brne	.+10     	; 0x1272 <HMI_unlockDoor+0x7c>
    1268:	8f 8d       	ldd	r24, Y+31	; 0x1f
    126a:	85 30       	cpi	r24, 0x05	; 5
    126c:	11 f4       	brne	.+4      	; 0x1272 <HMI_unlockDoor+0x7c>
		{
			password_entered = TRUE; /* Flag password entered as true to quit the while loop */
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	8e 8f       	std	Y+30, r24	; 0x1e
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	aa ef       	ldi	r26, 0xFA	; 250
    1278:	b3 e4       	ldi	r27, 0x43	; 67
    127a:	89 8f       	std	Y+25, r24	; 0x19
    127c:	9a 8f       	std	Y+26, r25	; 0x1a
    127e:	ab 8f       	std	Y+27, r26	; 0x1b
    1280:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1282:	69 8d       	ldd	r22, Y+25	; 0x19
    1284:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1286:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1288:	9c 8d       	ldd	r25, Y+28	; 0x1c
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	4a ef       	ldi	r20, 0xFA	; 250
    1290:	54 e4       	ldi	r21, 0x44	; 68
    1292:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1296:	dc 01       	movw	r26, r24
    1298:	cb 01       	movw	r24, r22
    129a:	8d 8b       	std	Y+21, r24	; 0x15
    129c:	9e 8b       	std	Y+22, r25	; 0x16
    129e:	af 8b       	std	Y+23, r26	; 0x17
    12a0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12a2:	6d 89       	ldd	r22, Y+21	; 0x15
    12a4:	7e 89       	ldd	r23, Y+22	; 0x16
    12a6:	8f 89       	ldd	r24, Y+23	; 0x17
    12a8:	98 8d       	ldd	r25, Y+24	; 0x18
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	40 e8       	ldi	r20, 0x80	; 128
    12b0:	5f e3       	ldi	r21, 0x3F	; 63
    12b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12b6:	88 23       	and	r24, r24
    12b8:	2c f4       	brge	.+10     	; 0x12c4 <HMI_unlockDoor+0xce>
		__ticks = 1;
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	9c 8b       	std	Y+20, r25	; 0x14
    12c0:	8b 8b       	std	Y+19, r24	; 0x13
    12c2:	3f c0       	rjmp	.+126    	; 0x1342 <HMI_unlockDoor+0x14c>
	else if (__tmp > 65535)
    12c4:	6d 89       	ldd	r22, Y+21	; 0x15
    12c6:	7e 89       	ldd	r23, Y+22	; 0x16
    12c8:	8f 89       	ldd	r24, Y+23	; 0x17
    12ca:	98 8d       	ldd	r25, Y+24	; 0x18
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	3f ef       	ldi	r19, 0xFF	; 255
    12d0:	4f e7       	ldi	r20, 0x7F	; 127
    12d2:	57 e4       	ldi	r21, 0x47	; 71
    12d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12d8:	18 16       	cp	r1, r24
    12da:	4c f5       	brge	.+82     	; 0x132e <HMI_unlockDoor+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12dc:	69 8d       	ldd	r22, Y+25	; 0x19
    12de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	40 e2       	ldi	r20, 0x20	; 32
    12ea:	51 e4       	ldi	r21, 0x41	; 65
    12ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f0:	dc 01       	movw	r26, r24
    12f2:	cb 01       	movw	r24, r22
    12f4:	bc 01       	movw	r22, r24
    12f6:	cd 01       	movw	r24, r26
    12f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12fc:	dc 01       	movw	r26, r24
    12fe:	cb 01       	movw	r24, r22
    1300:	9c 8b       	std	Y+20, r25	; 0x14
    1302:	8b 8b       	std	Y+19, r24	; 0x13
    1304:	0f c0       	rjmp	.+30     	; 0x1324 <HMI_unlockDoor+0x12e>
    1306:	88 ec       	ldi	r24, 0xC8	; 200
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	9a 8b       	std	Y+18, r25	; 0x12
    130c:	89 8b       	std	Y+17, r24	; 0x11
    130e:	89 89       	ldd	r24, Y+17	; 0x11
    1310:	9a 89       	ldd	r25, Y+18	; 0x12
    1312:	01 97       	sbiw	r24, 0x01	; 1
    1314:	f1 f7       	brne	.-4      	; 0x1312 <HMI_unlockDoor+0x11c>
    1316:	9a 8b       	std	Y+18, r25	; 0x12
    1318:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    131a:	8b 89       	ldd	r24, Y+19	; 0x13
    131c:	9c 89       	ldd	r25, Y+20	; 0x14
    131e:	01 97       	sbiw	r24, 0x01	; 1
    1320:	9c 8b       	std	Y+20, r25	; 0x14
    1322:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1324:	8b 89       	ldd	r24, Y+19	; 0x13
    1326:	9c 89       	ldd	r25, Y+20	; 0x14
    1328:	00 97       	sbiw	r24, 0x00	; 0
    132a:	69 f7       	brne	.-38     	; 0x1306 <HMI_unlockDoor+0x110>
    132c:	14 c0       	rjmp	.+40     	; 0x1356 <HMI_unlockDoor+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    132e:	6d 89       	ldd	r22, Y+21	; 0x15
    1330:	7e 89       	ldd	r23, Y+22	; 0x16
    1332:	8f 89       	ldd	r24, Y+23	; 0x17
    1334:	98 8d       	ldd	r25, Y+24	; 0x18
    1336:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    133a:	dc 01       	movw	r26, r24
    133c:	cb 01       	movw	r24, r22
    133e:	9c 8b       	std	Y+20, r25	; 0x14
    1340:	8b 8b       	std	Y+19, r24	; 0x13
    1342:	8b 89       	ldd	r24, Y+19	; 0x13
    1344:	9c 89       	ldd	r25, Y+20	; 0x14
    1346:	98 8b       	std	Y+16, r25	; 0x10
    1348:	8f 87       	std	Y+15, r24	; 0x0f
    134a:	8f 85       	ldd	r24, Y+15	; 0x0f
    134c:	98 89       	ldd	r25, Y+16	; 0x10
    134e:	01 97       	sbiw	r24, 0x01	; 1
    1350:	f1 f7       	brne	.-4      	; 0x134e <HMI_unlockDoor+0x158>
    1352:	98 8b       	std	Y+16, r25	; 0x10
    1354:	8f 87       	std	Y+15, r24	; 0x0f
	/* Display user first password entery request */
	LCD_clearScreen();					/* Clear screen */
	LCD_displayString("Plz enter old"); /* Display message in the first row */
	LCD_moveCursor(1, 0);				/* Move cursor to second row to display second message */
	LCD_displayString("pass: ");		/* Display message in the second row */
	while (!password_entered)			/* Stay in loop until password entred flag is true */
    1356:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1358:	88 23       	and	r24, r24
    135a:	09 f4       	brne	.+2      	; 0x135e <HMI_unlockDoor+0x168>
    135c:	68 cf       	rjmp	.-304    	; 0x122e <HMI_unlockDoor+0x38>
		{
			password_entered = TRUE; /* Flag password entered as true to quit the while loop */
		}
		_delay_ms(500); /* Press time */
	}
	UART_sendByte(OPEN_DOOR); /* Send to CTRL open door code to call change password function */
    135e:	87 e2       	ldi	r24, 0x27	; 39
    1360:	0e 94 50 19 	call	0x32a0	; 0x32a0 <UART_sendByte>

	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) /* Loop for number of PASSWORD_LENGTH characters */
    1364:	1d 8e       	std	Y+29, r1	; 0x1d
    1366:	b0 c0       	rjmp	.+352    	; 0x14c8 <HMI_unlockDoor+0x2d2>
	{
		UART_sendByte(password[i]);						/* Send indexed character byte to CTRL */
    1368:	8d 8d       	ldd	r24, Y+29	; 0x1d
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	ce 01       	movw	r24, r28
    1370:	82 96       	adiw	r24, 0x22	; 34
    1372:	fc 01       	movw	r30, r24
    1374:	e2 0f       	add	r30, r18
    1376:	f3 1f       	adc	r31, r19
    1378:	80 81       	ld	r24, Z
    137a:	0e 94 50 19 	call	0x32a0	; 0x32a0 <UART_sendByte>
		uart_recieve_buffer = UART_recieveByte();		/* store in uart_recieve_buffer the uart recieve buffer byte sent from CTRL */
    137e:	0e 94 67 19 	call	0x32ce	; 0x32ce <UART_recieveByte>
    1382:	88 a3       	std	Y+32, r24	; 0x20
		if (uart_recieve_buffer == PASSWORD_MISMATCHED) /* If the uart_recieve_buffer byte message code is PASSWORD_MISMATCHED */
    1384:	88 a1       	ldd	r24, Y+32	; 0x20
    1386:	82 32       	cpi	r24, 0x22	; 34
    1388:	09 f0       	breq	.+2      	; 0x138c <HMI_unlockDoor+0x196>
    138a:	7b c0       	rjmp	.+246    	; 0x1482 <HMI_unlockDoor+0x28c>
		{
			/* Display to user that password is wrong */
			LCD_clearScreen();					 /* Clear screen */
    138c:	0e 94 19 16 	call	0x2c32	; 0x2c32 <LCD_clearScreen>
			LCD_displayString("WRONG PASSWORD"); /* Display message in the first row */
    1390:	8d ed       	ldi	r24, 0xDD	; 221
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <LCD_displayString>
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	aa ef       	ldi	r26, 0xFA	; 250
    139e:	b3 e4       	ldi	r27, 0x43	; 67
    13a0:	8b 87       	std	Y+11, r24	; 0x0b
    13a2:	9c 87       	std	Y+12, r25	; 0x0c
    13a4:	ad 87       	std	Y+13, r26	; 0x0d
    13a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    13aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    13b0:	20 e0       	ldi	r18, 0x00	; 0
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	4a ef       	ldi	r20, 0xFA	; 250
    13b6:	54 e4       	ldi	r21, 0x44	; 68
    13b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13bc:	dc 01       	movw	r26, r24
    13be:	cb 01       	movw	r24, r22
    13c0:	8f 83       	std	Y+7, r24	; 0x07
    13c2:	98 87       	std	Y+8, r25	; 0x08
    13c4:	a9 87       	std	Y+9, r26	; 0x09
    13c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13c8:	6f 81       	ldd	r22, Y+7	; 0x07
    13ca:	78 85       	ldd	r23, Y+8	; 0x08
    13cc:	89 85       	ldd	r24, Y+9	; 0x09
    13ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	40 e8       	ldi	r20, 0x80	; 128
    13d6:	5f e3       	ldi	r21, 0x3F	; 63
    13d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13dc:	88 23       	and	r24, r24
    13de:	2c f4       	brge	.+10     	; 0x13ea <HMI_unlockDoor+0x1f4>
		__ticks = 1;
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	9e 83       	std	Y+6, r25	; 0x06
    13e6:	8d 83       	std	Y+5, r24	; 0x05
    13e8:	3f c0       	rjmp	.+126    	; 0x1468 <HMI_unlockDoor+0x272>
	else if (__tmp > 65535)
    13ea:	6f 81       	ldd	r22, Y+7	; 0x07
    13ec:	78 85       	ldd	r23, Y+8	; 0x08
    13ee:	89 85       	ldd	r24, Y+9	; 0x09
    13f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	3f ef       	ldi	r19, 0xFF	; 255
    13f6:	4f e7       	ldi	r20, 0x7F	; 127
    13f8:	57 e4       	ldi	r21, 0x47	; 71
    13fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13fe:	18 16       	cp	r1, r24
    1400:	4c f5       	brge	.+82     	; 0x1454 <HMI_unlockDoor+0x25e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1402:	6b 85       	ldd	r22, Y+11	; 0x0b
    1404:	7c 85       	ldd	r23, Y+12	; 0x0c
    1406:	8d 85       	ldd	r24, Y+13	; 0x0d
    1408:	9e 85       	ldd	r25, Y+14	; 0x0e
    140a:	20 e0       	ldi	r18, 0x00	; 0
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	40 e2       	ldi	r20, 0x20	; 32
    1410:	51 e4       	ldi	r21, 0x41	; 65
    1412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1416:	dc 01       	movw	r26, r24
    1418:	cb 01       	movw	r24, r22
    141a:	bc 01       	movw	r22, r24
    141c:	cd 01       	movw	r24, r26
    141e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1422:	dc 01       	movw	r26, r24
    1424:	cb 01       	movw	r24, r22
    1426:	9e 83       	std	Y+6, r25	; 0x06
    1428:	8d 83       	std	Y+5, r24	; 0x05
    142a:	0f c0       	rjmp	.+30     	; 0x144a <HMI_unlockDoor+0x254>
    142c:	88 ec       	ldi	r24, 0xC8	; 200
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	9c 83       	std	Y+4, r25	; 0x04
    1432:	8b 83       	std	Y+3, r24	; 0x03
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	9c 81       	ldd	r25, Y+4	; 0x04
    1438:	01 97       	sbiw	r24, 0x01	; 1
    143a:	f1 f7       	brne	.-4      	; 0x1438 <HMI_unlockDoor+0x242>
    143c:	9c 83       	std	Y+4, r25	; 0x04
    143e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1440:	8d 81       	ldd	r24, Y+5	; 0x05
    1442:	9e 81       	ldd	r25, Y+6	; 0x06
    1444:	01 97       	sbiw	r24, 0x01	; 1
    1446:	9e 83       	std	Y+6, r25	; 0x06
    1448:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    144a:	8d 81       	ldd	r24, Y+5	; 0x05
    144c:	9e 81       	ldd	r25, Y+6	; 0x06
    144e:	00 97       	sbiw	r24, 0x00	; 0
    1450:	69 f7       	brne	.-38     	; 0x142c <HMI_unlockDoor+0x236>
    1452:	14 c0       	rjmp	.+40     	; 0x147c <HMI_unlockDoor+0x286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1454:	6f 81       	ldd	r22, Y+7	; 0x07
    1456:	78 85       	ldd	r23, Y+8	; 0x08
    1458:	89 85       	ldd	r24, Y+9	; 0x09
    145a:	9a 85       	ldd	r25, Y+10	; 0x0a
    145c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1460:	dc 01       	movw	r26, r24
    1462:	cb 01       	movw	r24, r22
    1464:	9e 83       	std	Y+6, r25	; 0x06
    1466:	8d 83       	std	Y+5, r24	; 0x05
    1468:	8d 81       	ldd	r24, Y+5	; 0x05
    146a:	9e 81       	ldd	r25, Y+6	; 0x06
    146c:	9a 83       	std	Y+2, r25	; 0x02
    146e:	89 83       	std	Y+1, r24	; 0x01
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	9a 81       	ldd	r25, Y+2	; 0x02
    1474:	01 97       	sbiw	r24, 0x01	; 1
    1476:	f1 f7       	brne	.-4      	; 0x1474 <HMI_unlockDoor+0x27e>
    1478:	9a 83       	std	Y+2, r25	; 0x02
    147a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);						 /* Display for 0.5 second */
			HMI_unlockDoor();					 /* Call unlock door function to begin password entry again */
    147c:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <HMI_unlockDoor>
    1480:	3c c0       	rjmp	.+120    	; 0x14fa <HMI_unlockDoor+0x304>
			return;								 /* Return to quit the function */
		}
		else if (uart_recieve_buffer == LOCK_SYSTEM) /* If the uart_recieve_buffer byte message code is LOCK_SYSTEM */
    1482:	88 a1       	ldd	r24, Y+32	; 0x20
    1484:	83 32       	cpi	r24, 0x23	; 35
    1486:	b1 f4       	brne	.+44     	; 0x14b4 <HMI_unlockDoor+0x2be>
		{
			g_ticks = 0;				 /* Clear Timer ticks to start counting from 0 seconds */
    1488:	10 92 7b 01 	sts	0x017B, r1
    148c:	10 92 7a 01 	sts	0x017A, r1
			g_sys_state = SYSTEM_LOCKED; /* Switch to SYSTEM_LOCKED state */
    1490:	84 e0       	ldi	r24, 0x04	; 4
    1492:	80 93 82 01 	sts	0x0182, r24
			/* Display to user that the system is locked */
			LCD_clearScreen(); /* Clear screen */
    1496:	0e 94 19 16 	call	0x2c32	; 0x2c32 <LCD_clearScreen>
			LCD_displayString(" SYSTEM LOCKED");  /* Display message in the first row */
    149a:	8c ee       	ldi	r24, 0xEC	; 236
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <LCD_displayString>
			LCD_moveCursor(1, 0);				  /* Move cursor to second row to display second message */
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	60 e0       	ldi	r22, 0x00	; 0
    14a6:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <LCD_moveCursor>
			LCD_displayString(" Wait for 1 min"); /* Display message in the second row */
    14aa:	8b ef       	ldi	r24, 0xFB	; 251
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <LCD_displayString>
    14b2:	23 c0       	rjmp	.+70     	; 0x14fa <HMI_unlockDoor+0x304>
			return;								  /* Return to quit the function */
		}
		else if (uart_recieve_buffer == CTRL_READY_TO_RECEIVE) /* If the uart_recieve_buffer byte message code is CTRL_READY_TO_RECEIVE */
    14b4:	88 a1       	ldd	r24, Y+32	; 0x20
    14b6:	80 32       	cpi	r24, 0x20	; 32
    14b8:	21 f0       	breq	.+8      	; 0x14c2 <HMI_unlockDoor+0x2cc>
		{
			/* Do nothing */
		}
		else
		{
			while (UART_recieveByte() != CTRL_READY_TO_RECEIVE); /* Wait until CTRL sends ready to receive code */
    14ba:	0e 94 67 19 	call	0x32ce	; 0x32ce <UART_recieveByte>
    14be:	80 32       	cpi	r24, 0x20	; 32
    14c0:	e1 f7       	brne	.-8      	; 0x14ba <HMI_unlockDoor+0x2c4>
		}
		_delay_ms(500); /* Press time */
	}
	UART_sendByte(OPEN_DOOR); /* Send to CTRL open door code to call change password function */

	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) /* Loop for number of PASSWORD_LENGTH characters */
    14c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14c4:	8f 5f       	subi	r24, 0xFF	; 255
    14c6:	8d 8f       	std	Y+29, r24	; 0x1d
    14c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14ca:	85 30       	cpi	r24, 0x05	; 5
    14cc:	08 f4       	brcc	.+2      	; 0x14d0 <HMI_unlockDoor+0x2da>
    14ce:	4c cf       	rjmp	.-360    	; 0x1368 <HMI_unlockDoor+0x172>
		{
			while (UART_recieveByte() != CTRL_READY_TO_RECEIVE); /* Wait until CTRL sends ready to receive code */
		}
	}
	/* As for loop executed without return, execute the code below */
	g_ticks = 0; /* Clear Timer ticks to start counting from 0 seconds */
    14d0:	10 92 7b 01 	sts	0x017B, r1
    14d4:	10 92 7a 01 	sts	0x017A, r1
	g_sys_state = DOOR_UNLOCKING; /* Switch to DOOR_UNLOCKING state */
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	80 93 82 01 	sts	0x0182, r24
	/* Display to user that Door unlocking */
	LCD_clearScreen(); /* Clear screen */
    14de:	0e 94 19 16 	call	0x2c32	; 0x2c32 <LCD_clearScreen>
	LCD_displayString(" Door Unlocking"); /* Display message in the first row */
    14e2:	8b e0       	ldi	r24, 0x0B	; 11
    14e4:	91 e0       	ldi	r25, 0x01	; 1
    14e6:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <LCD_displayString>
	LCD_moveCursor(1, 0);  /* Move cursor to second row to display second message */
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	60 e0       	ldi	r22, 0x00	; 0
    14ee:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <LCD_moveCursor>
	LCD_displayString(" Please Wait"); /* Display message in the second row */
    14f2:	8b e1       	ldi	r24, 0x1B	; 27
    14f4:	91 e0       	ldi	r25, 0x01	; 1
    14f6:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <LCD_displayString>
}
    14fa:	a6 96       	adiw	r28, 0x26	; 38
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	f8 94       	cli
    1500:	de bf       	out	0x3e, r29	; 62
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	cd bf       	out	0x3d, r28	; 61
    1506:	cf 91       	pop	r28
    1508:	df 91       	pop	r29
    150a:	08 95       	ret

0000150c <HMI_timerCallBack>:
 *
 * Return: void
 *
 */
void HMI_timerCallBack(void)
{
    150c:	df 93       	push	r29
    150e:	cf 93       	push	r28
    1510:	00 d0       	rcall	.+0      	; 0x1512 <HMI_timerCallBack+0x6>
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;			 /* Increment timer ticks as timer interrupts each 1 second */
    1516:	80 91 7a 01 	lds	r24, 0x017A
    151a:	90 91 7b 01 	lds	r25, 0x017B
    151e:	01 96       	adiw	r24, 0x01	; 1
    1520:	90 93 7b 01 	sts	0x017B, r25
    1524:	80 93 7a 01 	sts	0x017A, r24
	switch (g_sys_state) /* Check for current state*/
    1528:	80 91 82 01 	lds	r24, 0x0182
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	3a 83       	std	Y+2, r19	; 0x02
    1532:	29 83       	std	Y+1, r18	; 0x01
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	9a 81       	ldd	r25, Y+2	; 0x02
    1538:	82 30       	cpi	r24, 0x02	; 2
    153a:	91 05       	cpc	r25, r1
    153c:	a9 f1       	breq	.+106    	; 0x15a8 <HMI_timerCallBack+0x9c>
    153e:	29 81       	ldd	r18, Y+1	; 0x01
    1540:	3a 81       	ldd	r19, Y+2	; 0x02
    1542:	23 30       	cpi	r18, 0x03	; 3
    1544:	31 05       	cpc	r19, r1
    1546:	34 f4       	brge	.+12     	; 0x1554 <HMI_timerCallBack+0x48>
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	9a 81       	ldd	r25, Y+2	; 0x02
    154c:	81 30       	cpi	r24, 0x01	; 1
    154e:	91 05       	cpc	r25, r1
    1550:	69 f0       	breq	.+26     	; 0x156c <HMI_timerCallBack+0x60>
    1552:	77 c0       	rjmp	.+238    	; 0x1642 <HMI_timerCallBack+0x136>
    1554:	29 81       	ldd	r18, Y+1	; 0x01
    1556:	3a 81       	ldd	r19, Y+2	; 0x02
    1558:	23 30       	cpi	r18, 0x03	; 3
    155a:	31 05       	cpc	r19, r1
    155c:	d9 f1       	breq	.+118    	; 0x15d4 <HMI_timerCallBack+0xc8>
    155e:	89 81       	ldd	r24, Y+1	; 0x01
    1560:	9a 81       	ldd	r25, Y+2	; 0x02
    1562:	84 30       	cpi	r24, 0x04	; 4
    1564:	91 05       	cpc	r25, r1
    1566:	09 f4       	brne	.+2      	; 0x156a <HMI_timerCallBack+0x5e>
    1568:	53 c0       	rjmp	.+166    	; 0x1610 <HMI_timerCallBack+0x104>
    156a:	6b c0       	rjmp	.+214    	; 0x1642 <HMI_timerCallBack+0x136>
	{
	case DOOR_UNLOCKING:  /* Door Unlocking state, display to user door unlocking message */
		if (g_ticks == 15)/* If 15 second passed */
    156c:	80 91 7a 01 	lds	r24, 0x017A
    1570:	90 91 7b 01 	lds	r25, 0x017B
    1574:	8f 30       	cpi	r24, 0x0F	; 15
    1576:	91 05       	cpc	r25, r1
    1578:	09 f0       	breq	.+2      	; 0x157c <HMI_timerCallBack+0x70>
    157a:	63 c0       	rjmp	.+198    	; 0x1642 <HMI_timerCallBack+0x136>
		{
			g_ticks = 0;				 /* Clear Timer ticks to start counting from 0 seconds */
    157c:	10 92 7b 01 	sts	0x017B, r1
    1580:	10 92 7a 01 	sts	0x017A, r1
			g_sys_state = DOOR_UNLOCKED; /* Switch to DOOR_UNLOCKED state */
    1584:	82 e0       	ldi	r24, 0x02	; 2
    1586:	80 93 82 01 	sts	0x0182, r24
			/* Display to user wait for people to enter message */
			LCD_clearScreen();					   /* Clear screen */
    158a:	0e 94 19 16 	call	0x2c32	; 0x2c32 <LCD_clearScreen>
			LCD_displayString(" Wait for people"); /* Display message in the first row */
    158e:	88 e2       	ldi	r24, 0x28	; 40
    1590:	91 e0       	ldi	r25, 0x01	; 1
    1592:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <LCD_displayString>
			LCD_moveCursor(1, 0);				   /* Move cursor to second row to display second message */
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	60 e0       	ldi	r22, 0x00	; 0
    159a:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <LCD_moveCursor>
			LCD_displayString("  To Enter");	   /* Display message in the second row */
    159e:	89 e3       	ldi	r24, 0x39	; 57
    15a0:	91 e0       	ldi	r25, 0x01	; 1
    15a2:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <LCD_displayString>
    15a6:	4d c0       	rjmp	.+154    	; 0x1642 <HMI_timerCallBack+0x136>
		}
		break;

	case DOOR_UNLOCKED:
		while (UART_recieveByte() != HMI_DOOR_LOCKING); /* Wait until CTRL sends door locking code to HMI */
    15a8:	0e 94 67 19 	call	0x32ce	; 0x32ce <UART_recieveByte>
    15ac:	85 32       	cpi	r24, 0x25	; 37
    15ae:	e1 f7       	brne	.-8      	; 0x15a8 <HMI_timerCallBack+0x9c>
		g_ticks = 0;
    15b0:	10 92 7b 01 	sts	0x017B, r1
    15b4:	10 92 7a 01 	sts	0x017A, r1
		g_ticks = 0;				/* Clear Timer ticks to start counting from 0 seconds */
    15b8:	10 92 7b 01 	sts	0x017B, r1
    15bc:	10 92 7a 01 	sts	0x017A, r1
		g_sys_state = DOOR_LOCKING; /* Switch to DOOR_LOCKING state */
    15c0:	83 e0       	ldi	r24, 0x03	; 3
    15c2:	80 93 82 01 	sts	0x0182, r24
		/* Display to user that door is locking */
		LCD_clearScreen();					 /* Clear screen */
    15c6:	0e 94 19 16 	call	0x2c32	; 0x2c32 <LCD_clearScreen>
		LCD_displayString("  Door Locking"); /* Display message in the first row */
    15ca:	84 e4       	ldi	r24, 0x44	; 68
    15cc:	91 e0       	ldi	r25, 0x01	; 1
    15ce:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <LCD_displayString>
    15d2:	37 c0       	rjmp	.+110    	; 0x1642 <HMI_timerCallBack+0x136>

		break;

	case DOOR_LOCKING:
		if (g_ticks == 15) /* If 15 second passed */
    15d4:	80 91 7a 01 	lds	r24, 0x017A
    15d8:	90 91 7b 01 	lds	r25, 0x017B
    15dc:	8f 30       	cpi	r24, 0x0F	; 15
    15de:	91 05       	cpc	r25, r1
    15e0:	81 f5       	brne	.+96     	; 0x1642 <HMI_timerCallBack+0x136>
		{
			g_ticks = 0;		   /* Clear Timer ticks to start counting from 0 seconds */
    15e2:	10 92 7b 01 	sts	0x017B, r1
    15e6:	10 92 7a 01 	sts	0x017A, r1
			g_sys_state = STANDBY; /* Switch to STANDBY state */
    15ea:	10 92 82 01 	sts	0x0182, r1
			/* Display the main options */
			LCD_clearScreen();									 /* Clear screen */
    15ee:	0e 94 19 16 	call	0x2c32	; 0x2c32 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "+ : Open Door");	 /* Display open door option in first row */
    15f2:	2a ea       	ldi	r18, 0xAA	; 170
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	80 e0       	ldi	r24, 0x00	; 0
    15f8:	60 e0       	ldi	r22, 0x00	; 0
    15fa:	a9 01       	movw	r20, r18
    15fc:	0e 94 dd 15 	call	0x2bba	; 0x2bba <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "- : Change Pass"); /* Display change password option in second row */
    1600:	28 eb       	ldi	r18, 0xB8	; 184
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	60 e0       	ldi	r22, 0x00	; 0
    1608:	a9 01       	movw	r20, r18
    160a:	0e 94 dd 15 	call	0x2bba	; 0x2bba <LCD_displayStringRowColumn>
    160e:	19 c0       	rjmp	.+50     	; 0x1642 <HMI_timerCallBack+0x136>
		}
		break;

	case SYSTEM_LOCKED: /* System Locked state, System is locked and does not read keypad press */

		if (g_ticks == 60) /* If 1 minute passed */
    1610:	80 91 7a 01 	lds	r24, 0x017A
    1614:	90 91 7b 01 	lds	r25, 0x017B
    1618:	8c 33       	cpi	r24, 0x3C	; 60
    161a:	91 05       	cpc	r25, r1
    161c:	91 f4       	brne	.+36     	; 0x1642 <HMI_timerCallBack+0x136>
		{
			g_sys_state = STANDBY; /* Switch to STANDBY state */
    161e:	10 92 82 01 	sts	0x0182, r1
			/* Display the main options */
			LCD_clearScreen();									 /* Clear screen */
    1622:	0e 94 19 16 	call	0x2c32	; 0x2c32 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "+ : Open Door");	 /* Display open door option in first row */
    1626:	2a ea       	ldi	r18, 0xAA	; 170
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	60 e0       	ldi	r22, 0x00	; 0
    162e:	a9 01       	movw	r20, r18
    1630:	0e 94 dd 15 	call	0x2bba	; 0x2bba <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "- : Change Pass"); /* Display change password option in second row */
    1634:	28 eb       	ldi	r18, 0xB8	; 184
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	60 e0       	ldi	r22, 0x00	; 0
    163c:	a9 01       	movw	r20, r18
    163e:	0e 94 dd 15 	call	0x2bba	; 0x2bba <LCD_displayStringRowColumn>
		break;
	default:
		/* Do Nothing as it's stand by state */
		break;
	}
}
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	cf 91       	pop	r28
    1648:	df 91       	pop	r29
    164a:	08 95       	ret

0000164c <main>:
/*----------------------------------------------------------*/

int main(void)
{
    164c:	df 93       	push	r29
    164e:	cf 93       	push	r28
    1650:	cd b7       	in	r28, 0x3d	; 61
    1652:	de b7       	in	r29, 0x3e	; 62
    1654:	6d 97       	sbiw	r28, 0x1d	; 29
    1656:	0f b6       	in	r0, 0x3f	; 63
    1658:	f8 94       	cli
    165a:	de bf       	out	0x3e, r29	; 62
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	cd bf       	out	0x3d, r28	; 61
	uint8 key;	/* Stores keypad pressed key value */
	HMI_Init(); /* Initialize modules needed for HMI ECU*/
    1660:	0e 94 a3 05 	call	0xb46	; 0xb46 <HMI_Init>
	/* Display Door Lock System welcome message */
	LCD_displayString("Door Lock System"); /* Display message in the first row */
    1664:	83 e5       	ldi	r24, 0x53	; 83
    1666:	91 e0       	ldi	r25, 0x01	; 1
    1668:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <LCD_displayString>
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	aa ef       	ldi	r26, 0xFA	; 250
    1672:	b3 e4       	ldi	r27, 0x43	; 67
    1674:	89 8f       	std	Y+25, r24	; 0x19
    1676:	9a 8f       	std	Y+26, r25	; 0x1a
    1678:	ab 8f       	std	Y+27, r26	; 0x1b
    167a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    167c:	69 8d       	ldd	r22, Y+25	; 0x19
    167e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1680:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1682:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	4a ef       	ldi	r20, 0xFA	; 250
    168a:	54 e4       	ldi	r21, 0x44	; 68
    168c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	8d 8b       	std	Y+21, r24	; 0x15
    1696:	9e 8b       	std	Y+22, r25	; 0x16
    1698:	af 8b       	std	Y+23, r26	; 0x17
    169a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    169c:	6d 89       	ldd	r22, Y+21	; 0x15
    169e:	7e 89       	ldd	r23, Y+22	; 0x16
    16a0:	8f 89       	ldd	r24, Y+23	; 0x17
    16a2:	98 8d       	ldd	r25, Y+24	; 0x18
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	40 e8       	ldi	r20, 0x80	; 128
    16aa:	5f e3       	ldi	r21, 0x3F	; 63
    16ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16b0:	88 23       	and	r24, r24
    16b2:	2c f4       	brge	.+10     	; 0x16be <main+0x72>
		__ticks = 1;
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	9c 8b       	std	Y+20, r25	; 0x14
    16ba:	8b 8b       	std	Y+19, r24	; 0x13
    16bc:	3f c0       	rjmp	.+126    	; 0x173c <main+0xf0>
	else if (__tmp > 65535)
    16be:	6d 89       	ldd	r22, Y+21	; 0x15
    16c0:	7e 89       	ldd	r23, Y+22	; 0x16
    16c2:	8f 89       	ldd	r24, Y+23	; 0x17
    16c4:	98 8d       	ldd	r25, Y+24	; 0x18
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	3f ef       	ldi	r19, 0xFF	; 255
    16ca:	4f e7       	ldi	r20, 0x7F	; 127
    16cc:	57 e4       	ldi	r21, 0x47	; 71
    16ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16d2:	18 16       	cp	r1, r24
    16d4:	4c f5       	brge	.+82     	; 0x1728 <main+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d6:	69 8d       	ldd	r22, Y+25	; 0x19
    16d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	40 e2       	ldi	r20, 0x20	; 32
    16e4:	51 e4       	ldi	r21, 0x41	; 65
    16e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ea:	dc 01       	movw	r26, r24
    16ec:	cb 01       	movw	r24, r22
    16ee:	bc 01       	movw	r22, r24
    16f0:	cd 01       	movw	r24, r26
    16f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	9c 8b       	std	Y+20, r25	; 0x14
    16fc:	8b 8b       	std	Y+19, r24	; 0x13
    16fe:	0f c0       	rjmp	.+30     	; 0x171e <main+0xd2>
    1700:	88 ec       	ldi	r24, 0xC8	; 200
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	9a 8b       	std	Y+18, r25	; 0x12
    1706:	89 8b       	std	Y+17, r24	; 0x11
    1708:	89 89       	ldd	r24, Y+17	; 0x11
    170a:	9a 89       	ldd	r25, Y+18	; 0x12
    170c:	01 97       	sbiw	r24, 0x01	; 1
    170e:	f1 f7       	brne	.-4      	; 0x170c <main+0xc0>
    1710:	9a 8b       	std	Y+18, r25	; 0x12
    1712:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1714:	8b 89       	ldd	r24, Y+19	; 0x13
    1716:	9c 89       	ldd	r25, Y+20	; 0x14
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	9c 8b       	std	Y+20, r25	; 0x14
    171c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    171e:	8b 89       	ldd	r24, Y+19	; 0x13
    1720:	9c 89       	ldd	r25, Y+20	; 0x14
    1722:	00 97       	sbiw	r24, 0x00	; 0
    1724:	69 f7       	brne	.-38     	; 0x1700 <main+0xb4>
    1726:	14 c0       	rjmp	.+40     	; 0x1750 <main+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1728:	6d 89       	ldd	r22, Y+21	; 0x15
    172a:	7e 89       	ldd	r23, Y+22	; 0x16
    172c:	8f 89       	ldd	r24, Y+23	; 0x17
    172e:	98 8d       	ldd	r25, Y+24	; 0x18
    1730:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	9c 8b       	std	Y+20, r25	; 0x14
    173a:	8b 8b       	std	Y+19, r24	; 0x13
    173c:	8b 89       	ldd	r24, Y+19	; 0x13
    173e:	9c 89       	ldd	r25, Y+20	; 0x14
    1740:	98 8b       	std	Y+16, r25	; 0x10
    1742:	8f 87       	std	Y+15, r24	; 0x0f
    1744:	8f 85       	ldd	r24, Y+15	; 0x0f
    1746:	98 89       	ldd	r25, Y+16	; 0x10
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	f1 f7       	brne	.-4      	; 0x1748 <main+0xfc>
    174c:	98 8b       	std	Y+16, r25	; 0x10
    174e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);						   /* Display for 0.5 second */
	HMI_savePassword();					   /* As start of the program call HMI save password function */
    1750:	0e 94 c0 05 	call	0xb80	; 0xb80 <HMI_savePassword>
	while (1)							   /* Main Loop*/
	{

		if (g_sys_state != SYSTEM_LOCKED) /* If system state is not locked */
    1754:	80 91 82 01 	lds	r24, 0x0182
    1758:	84 30       	cpi	r24, 0x04	; 4
    175a:	e1 f3       	breq	.-8      	; 0x1754 <main+0x108>
		{
			key = KEYPAD_getPressedKey(); /* Read pressed key and store it in key variable */
    175c:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <KEYPAD_getPressedKey>
    1760:	8d 8f       	std	Y+29, r24	; 0x1d

			if (key == OPEN_DOOR_KEY) /* If key value is the open door key */
    1762:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1764:	8b 32       	cpi	r24, 0x2B	; 43
    1766:	19 f4       	brne	.+6      	; 0x176e <main+0x122>
			{
				HMI_unlockDoor(); /* Call HMI unlcok door function */
    1768:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <HMI_unlockDoor>
    176c:	05 c0       	rjmp	.+10     	; 0x1778 <main+0x12c>
			}
			else if (key == CHANGE_PASSWORD_KEY) /* If key value is the change password key */
    176e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1770:	8d 32       	cpi	r24, 0x2D	; 45
    1772:	11 f4       	brne	.+4      	; 0x1778 <main+0x12c>
			{
				HMI_changePassword(); /* Call HMI change password function */
    1774:	0e 94 83 07 	call	0xf06	; 0xf06 <HMI_changePassword>
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	aa ef       	ldi	r26, 0xFA	; 250
    177e:	b3 e4       	ldi	r27, 0x43	; 67
    1780:	8b 87       	std	Y+11, r24	; 0x0b
    1782:	9c 87       	std	Y+12, r25	; 0x0c
    1784:	ad 87       	std	Y+13, r26	; 0x0d
    1786:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1788:	6b 85       	ldd	r22, Y+11	; 0x0b
    178a:	7c 85       	ldd	r23, Y+12	; 0x0c
    178c:	8d 85       	ldd	r24, Y+13	; 0x0d
    178e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	4a ef       	ldi	r20, 0xFA	; 250
    1796:	54 e4       	ldi	r21, 0x44	; 68
    1798:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	8f 83       	std	Y+7, r24	; 0x07
    17a2:	98 87       	std	Y+8, r25	; 0x08
    17a4:	a9 87       	std	Y+9, r26	; 0x09
    17a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17a8:	6f 81       	ldd	r22, Y+7	; 0x07
    17aa:	78 85       	ldd	r23, Y+8	; 0x08
    17ac:	89 85       	ldd	r24, Y+9	; 0x09
    17ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	40 e8       	ldi	r20, 0x80	; 128
    17b6:	5f e3       	ldi	r21, 0x3F	; 63
    17b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17bc:	88 23       	and	r24, r24
    17be:	2c f4       	brge	.+10     	; 0x17ca <main+0x17e>
		__ticks = 1;
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	9e 83       	std	Y+6, r25	; 0x06
    17c6:	8d 83       	std	Y+5, r24	; 0x05
    17c8:	3f c0       	rjmp	.+126    	; 0x1848 <main+0x1fc>
	else if (__tmp > 65535)
    17ca:	6f 81       	ldd	r22, Y+7	; 0x07
    17cc:	78 85       	ldd	r23, Y+8	; 0x08
    17ce:	89 85       	ldd	r24, Y+9	; 0x09
    17d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	3f ef       	ldi	r19, 0xFF	; 255
    17d6:	4f e7       	ldi	r20, 0x7F	; 127
    17d8:	57 e4       	ldi	r21, 0x47	; 71
    17da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17de:	18 16       	cp	r1, r24
    17e0:	4c f5       	brge	.+82     	; 0x1834 <main+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    17e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    17e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    17e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	40 e2       	ldi	r20, 0x20	; 32
    17f0:	51 e4       	ldi	r21, 0x41	; 65
    17f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f6:	dc 01       	movw	r26, r24
    17f8:	cb 01       	movw	r24, r22
    17fa:	bc 01       	movw	r22, r24
    17fc:	cd 01       	movw	r24, r26
    17fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	9e 83       	std	Y+6, r25	; 0x06
    1808:	8d 83       	std	Y+5, r24	; 0x05
    180a:	0f c0       	rjmp	.+30     	; 0x182a <main+0x1de>
    180c:	88 ec       	ldi	r24, 0xC8	; 200
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	9c 83       	std	Y+4, r25	; 0x04
    1812:	8b 83       	std	Y+3, r24	; 0x03
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	9c 81       	ldd	r25, Y+4	; 0x04
    1818:	01 97       	sbiw	r24, 0x01	; 1
    181a:	f1 f7       	brne	.-4      	; 0x1818 <main+0x1cc>
    181c:	9c 83       	std	Y+4, r25	; 0x04
    181e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1820:	8d 81       	ldd	r24, Y+5	; 0x05
    1822:	9e 81       	ldd	r25, Y+6	; 0x06
    1824:	01 97       	sbiw	r24, 0x01	; 1
    1826:	9e 83       	std	Y+6, r25	; 0x06
    1828:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    182a:	8d 81       	ldd	r24, Y+5	; 0x05
    182c:	9e 81       	ldd	r25, Y+6	; 0x06
    182e:	00 97       	sbiw	r24, 0x00	; 0
    1830:	69 f7       	brne	.-38     	; 0x180c <main+0x1c0>
    1832:	90 cf       	rjmp	.-224    	; 0x1754 <main+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1834:	6f 81       	ldd	r22, Y+7	; 0x07
    1836:	78 85       	ldd	r23, Y+8	; 0x08
    1838:	89 85       	ldd	r24, Y+9	; 0x09
    183a:	9a 85       	ldd	r25, Y+10	; 0x0a
    183c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	9e 83       	std	Y+6, r25	; 0x06
    1846:	8d 83       	std	Y+5, r24	; 0x05
    1848:	8d 81       	ldd	r24, Y+5	; 0x05
    184a:	9e 81       	ldd	r25, Y+6	; 0x06
    184c:	9a 83       	std	Y+2, r25	; 0x02
    184e:	89 83       	std	Y+1, r24	; 0x01
    1850:	89 81       	ldd	r24, Y+1	; 0x01
    1852:	9a 81       	ldd	r25, Y+2	; 0x02
    1854:	01 97       	sbiw	r24, 0x01	; 1
    1856:	f1 f7       	brne	.-4      	; 0x1854 <main+0x208>
    1858:	9a 83       	std	Y+2, r25	; 0x02
    185a:	89 83       	std	Y+1, r24	; 0x01
    185c:	7b cf       	rjmp	.-266    	; 0x1754 <main+0x108>

0000185e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    185e:	df 93       	push	r29
    1860:	cf 93       	push	r28
    1862:	00 d0       	rcall	.+0      	; 0x1864 <GPIO_setupPinDirection+0x6>
    1864:	00 d0       	rcall	.+0      	; 0x1866 <GPIO_setupPinDirection+0x8>
    1866:	0f 92       	push	r0
    1868:	cd b7       	in	r28, 0x3d	; 61
    186a:	de b7       	in	r29, 0x3e	; 62
    186c:	89 83       	std	Y+1, r24	; 0x01
    186e:	6a 83       	std	Y+2, r22	; 0x02
    1870:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1872:	8a 81       	ldd	r24, Y+2	; 0x02
    1874:	88 30       	cpi	r24, 0x08	; 8
    1876:	08 f0       	brcs	.+2      	; 0x187a <GPIO_setupPinDirection+0x1c>
    1878:	d5 c0       	rjmp	.+426    	; 0x1a24 <GPIO_setupPinDirection+0x1c6>
    187a:	89 81       	ldd	r24, Y+1	; 0x01
    187c:	84 30       	cpi	r24, 0x04	; 4
    187e:	08 f0       	brcs	.+2      	; 0x1882 <GPIO_setupPinDirection+0x24>
    1880:	d1 c0       	rjmp	.+418    	; 0x1a24 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	28 2f       	mov	r18, r24
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	3d 83       	std	Y+5, r19	; 0x05
    188a:	2c 83       	std	Y+4, r18	; 0x04
    188c:	8c 81       	ldd	r24, Y+4	; 0x04
    188e:	9d 81       	ldd	r25, Y+5	; 0x05
    1890:	81 30       	cpi	r24, 0x01	; 1
    1892:	91 05       	cpc	r25, r1
    1894:	09 f4       	brne	.+2      	; 0x1898 <GPIO_setupPinDirection+0x3a>
    1896:	43 c0       	rjmp	.+134    	; 0x191e <GPIO_setupPinDirection+0xc0>
    1898:	2c 81       	ldd	r18, Y+4	; 0x04
    189a:	3d 81       	ldd	r19, Y+5	; 0x05
    189c:	22 30       	cpi	r18, 0x02	; 2
    189e:	31 05       	cpc	r19, r1
    18a0:	2c f4       	brge	.+10     	; 0x18ac <GPIO_setupPinDirection+0x4e>
    18a2:	8c 81       	ldd	r24, Y+4	; 0x04
    18a4:	9d 81       	ldd	r25, Y+5	; 0x05
    18a6:	00 97       	sbiw	r24, 0x00	; 0
    18a8:	71 f0       	breq	.+28     	; 0x18c6 <GPIO_setupPinDirection+0x68>
    18aa:	bc c0       	rjmp	.+376    	; 0x1a24 <GPIO_setupPinDirection+0x1c6>
    18ac:	2c 81       	ldd	r18, Y+4	; 0x04
    18ae:	3d 81       	ldd	r19, Y+5	; 0x05
    18b0:	22 30       	cpi	r18, 0x02	; 2
    18b2:	31 05       	cpc	r19, r1
    18b4:	09 f4       	brne	.+2      	; 0x18b8 <GPIO_setupPinDirection+0x5a>
    18b6:	5f c0       	rjmp	.+190    	; 0x1976 <GPIO_setupPinDirection+0x118>
    18b8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ba:	9d 81       	ldd	r25, Y+5	; 0x05
    18bc:	83 30       	cpi	r24, 0x03	; 3
    18be:	91 05       	cpc	r25, r1
    18c0:	09 f4       	brne	.+2      	; 0x18c4 <GPIO_setupPinDirection+0x66>
    18c2:	85 c0       	rjmp	.+266    	; 0x19ce <GPIO_setupPinDirection+0x170>
    18c4:	af c0       	rjmp	.+350    	; 0x1a24 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    18c6:	8b 81       	ldd	r24, Y+3	; 0x03
    18c8:	81 30       	cpi	r24, 0x01	; 1
    18ca:	a1 f4       	brne	.+40     	; 0x18f4 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    18cc:	aa e3       	ldi	r26, 0x3A	; 58
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	ea e3       	ldi	r30, 0x3A	; 58
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	48 2f       	mov	r20, r24
    18d8:	8a 81       	ldd	r24, Y+2	; 0x02
    18da:	28 2f       	mov	r18, r24
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	02 2e       	mov	r0, r18
    18e4:	02 c0       	rjmp	.+4      	; 0x18ea <GPIO_setupPinDirection+0x8c>
    18e6:	88 0f       	add	r24, r24
    18e8:	99 1f       	adc	r25, r25
    18ea:	0a 94       	dec	r0
    18ec:	e2 f7       	brpl	.-8      	; 0x18e6 <GPIO_setupPinDirection+0x88>
    18ee:	84 2b       	or	r24, r20
    18f0:	8c 93       	st	X, r24
    18f2:	98 c0       	rjmp	.+304    	; 0x1a24 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    18f4:	aa e3       	ldi	r26, 0x3A	; 58
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	ea e3       	ldi	r30, 0x3A	; 58
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	48 2f       	mov	r20, r24
    1900:	8a 81       	ldd	r24, Y+2	; 0x02
    1902:	28 2f       	mov	r18, r24
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	02 2e       	mov	r0, r18
    190c:	02 c0       	rjmp	.+4      	; 0x1912 <GPIO_setupPinDirection+0xb4>
    190e:	88 0f       	add	r24, r24
    1910:	99 1f       	adc	r25, r25
    1912:	0a 94       	dec	r0
    1914:	e2 f7       	brpl	.-8      	; 0x190e <GPIO_setupPinDirection+0xb0>
    1916:	80 95       	com	r24
    1918:	84 23       	and	r24, r20
    191a:	8c 93       	st	X, r24
    191c:	83 c0       	rjmp	.+262    	; 0x1a24 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    191e:	8b 81       	ldd	r24, Y+3	; 0x03
    1920:	81 30       	cpi	r24, 0x01	; 1
    1922:	a1 f4       	brne	.+40     	; 0x194c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1924:	a7 e3       	ldi	r26, 0x37	; 55
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	e7 e3       	ldi	r30, 0x37	; 55
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	48 2f       	mov	r20, r24
    1930:	8a 81       	ldd	r24, Y+2	; 0x02
    1932:	28 2f       	mov	r18, r24
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	02 2e       	mov	r0, r18
    193c:	02 c0       	rjmp	.+4      	; 0x1942 <GPIO_setupPinDirection+0xe4>
    193e:	88 0f       	add	r24, r24
    1940:	99 1f       	adc	r25, r25
    1942:	0a 94       	dec	r0
    1944:	e2 f7       	brpl	.-8      	; 0x193e <GPIO_setupPinDirection+0xe0>
    1946:	84 2b       	or	r24, r20
    1948:	8c 93       	st	X, r24
    194a:	6c c0       	rjmp	.+216    	; 0x1a24 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    194c:	a7 e3       	ldi	r26, 0x37	; 55
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	e7 e3       	ldi	r30, 0x37	; 55
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	48 2f       	mov	r20, r24
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	28 2f       	mov	r18, r24
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	02 2e       	mov	r0, r18
    1964:	02 c0       	rjmp	.+4      	; 0x196a <GPIO_setupPinDirection+0x10c>
    1966:	88 0f       	add	r24, r24
    1968:	99 1f       	adc	r25, r25
    196a:	0a 94       	dec	r0
    196c:	e2 f7       	brpl	.-8      	; 0x1966 <GPIO_setupPinDirection+0x108>
    196e:	80 95       	com	r24
    1970:	84 23       	and	r24, r20
    1972:	8c 93       	st	X, r24
    1974:	57 c0       	rjmp	.+174    	; 0x1a24 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1976:	8b 81       	ldd	r24, Y+3	; 0x03
    1978:	81 30       	cpi	r24, 0x01	; 1
    197a:	a1 f4       	brne	.+40     	; 0x19a4 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    197c:	a4 e3       	ldi	r26, 0x34	; 52
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	e4 e3       	ldi	r30, 0x34	; 52
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	48 2f       	mov	r20, r24
    1988:	8a 81       	ldd	r24, Y+2	; 0x02
    198a:	28 2f       	mov	r18, r24
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	02 2e       	mov	r0, r18
    1994:	02 c0       	rjmp	.+4      	; 0x199a <GPIO_setupPinDirection+0x13c>
    1996:	88 0f       	add	r24, r24
    1998:	99 1f       	adc	r25, r25
    199a:	0a 94       	dec	r0
    199c:	e2 f7       	brpl	.-8      	; 0x1996 <GPIO_setupPinDirection+0x138>
    199e:	84 2b       	or	r24, r20
    19a0:	8c 93       	st	X, r24
    19a2:	40 c0       	rjmp	.+128    	; 0x1a24 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    19a4:	a4 e3       	ldi	r26, 0x34	; 52
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	e4 e3       	ldi	r30, 0x34	; 52
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	48 2f       	mov	r20, r24
    19b0:	8a 81       	ldd	r24, Y+2	; 0x02
    19b2:	28 2f       	mov	r18, r24
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	02 2e       	mov	r0, r18
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <GPIO_setupPinDirection+0x164>
    19be:	88 0f       	add	r24, r24
    19c0:	99 1f       	adc	r25, r25
    19c2:	0a 94       	dec	r0
    19c4:	e2 f7       	brpl	.-8      	; 0x19be <GPIO_setupPinDirection+0x160>
    19c6:	80 95       	com	r24
    19c8:	84 23       	and	r24, r20
    19ca:	8c 93       	st	X, r24
    19cc:	2b c0       	rjmp	.+86     	; 0x1a24 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    19ce:	8b 81       	ldd	r24, Y+3	; 0x03
    19d0:	81 30       	cpi	r24, 0x01	; 1
    19d2:	a1 f4       	brne	.+40     	; 0x19fc <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    19d4:	a1 e3       	ldi	r26, 0x31	; 49
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	e1 e3       	ldi	r30, 0x31	; 49
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	48 2f       	mov	r20, r24
    19e0:	8a 81       	ldd	r24, Y+2	; 0x02
    19e2:	28 2f       	mov	r18, r24
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	02 2e       	mov	r0, r18
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <GPIO_setupPinDirection+0x194>
    19ee:	88 0f       	add	r24, r24
    19f0:	99 1f       	adc	r25, r25
    19f2:	0a 94       	dec	r0
    19f4:	e2 f7       	brpl	.-8      	; 0x19ee <GPIO_setupPinDirection+0x190>
    19f6:	84 2b       	or	r24, r20
    19f8:	8c 93       	st	X, r24
    19fa:	14 c0       	rjmp	.+40     	; 0x1a24 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    19fc:	a1 e3       	ldi	r26, 0x31	; 49
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	e1 e3       	ldi	r30, 0x31	; 49
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	48 2f       	mov	r20, r24
    1a08:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0a:	28 2f       	mov	r18, r24
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	02 2e       	mov	r0, r18
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <GPIO_setupPinDirection+0x1bc>
    1a16:	88 0f       	add	r24, r24
    1a18:	99 1f       	adc	r25, r25
    1a1a:	0a 94       	dec	r0
    1a1c:	e2 f7       	brpl	.-8      	; 0x1a16 <GPIO_setupPinDirection+0x1b8>
    1a1e:	80 95       	com	r24
    1a20:	84 23       	and	r24, r20
    1a22:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a24:	0f 90       	pop	r0
    1a26:	0f 90       	pop	r0
    1a28:	0f 90       	pop	r0
    1a2a:	0f 90       	pop	r0
    1a2c:	0f 90       	pop	r0
    1a2e:	cf 91       	pop	r28
    1a30:	df 91       	pop	r29
    1a32:	08 95       	ret

00001a34 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1a34:	df 93       	push	r29
    1a36:	cf 93       	push	r28
    1a38:	00 d0       	rcall	.+0      	; 0x1a3a <GPIO_writePin+0x6>
    1a3a:	00 d0       	rcall	.+0      	; 0x1a3c <GPIO_writePin+0x8>
    1a3c:	0f 92       	push	r0
    1a3e:	cd b7       	in	r28, 0x3d	; 61
    1a40:	de b7       	in	r29, 0x3e	; 62
    1a42:	89 83       	std	Y+1, r24	; 0x01
    1a44:	6a 83       	std	Y+2, r22	; 0x02
    1a46:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a48:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4a:	88 30       	cpi	r24, 0x08	; 8
    1a4c:	08 f0       	brcs	.+2      	; 0x1a50 <GPIO_writePin+0x1c>
    1a4e:	d5 c0       	rjmp	.+426    	; 0x1bfa <GPIO_writePin+0x1c6>
    1a50:	89 81       	ldd	r24, Y+1	; 0x01
    1a52:	84 30       	cpi	r24, 0x04	; 4
    1a54:	08 f0       	brcs	.+2      	; 0x1a58 <GPIO_writePin+0x24>
    1a56:	d1 c0       	rjmp	.+418    	; 0x1bfa <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
    1a5a:	28 2f       	mov	r18, r24
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	3d 83       	std	Y+5, r19	; 0x05
    1a60:	2c 83       	std	Y+4, r18	; 0x04
    1a62:	8c 81       	ldd	r24, Y+4	; 0x04
    1a64:	9d 81       	ldd	r25, Y+5	; 0x05
    1a66:	81 30       	cpi	r24, 0x01	; 1
    1a68:	91 05       	cpc	r25, r1
    1a6a:	09 f4       	brne	.+2      	; 0x1a6e <GPIO_writePin+0x3a>
    1a6c:	43 c0       	rjmp	.+134    	; 0x1af4 <GPIO_writePin+0xc0>
    1a6e:	2c 81       	ldd	r18, Y+4	; 0x04
    1a70:	3d 81       	ldd	r19, Y+5	; 0x05
    1a72:	22 30       	cpi	r18, 0x02	; 2
    1a74:	31 05       	cpc	r19, r1
    1a76:	2c f4       	brge	.+10     	; 0x1a82 <GPIO_writePin+0x4e>
    1a78:	8c 81       	ldd	r24, Y+4	; 0x04
    1a7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a7c:	00 97       	sbiw	r24, 0x00	; 0
    1a7e:	71 f0       	breq	.+28     	; 0x1a9c <GPIO_writePin+0x68>
    1a80:	bc c0       	rjmp	.+376    	; 0x1bfa <GPIO_writePin+0x1c6>
    1a82:	2c 81       	ldd	r18, Y+4	; 0x04
    1a84:	3d 81       	ldd	r19, Y+5	; 0x05
    1a86:	22 30       	cpi	r18, 0x02	; 2
    1a88:	31 05       	cpc	r19, r1
    1a8a:	09 f4       	brne	.+2      	; 0x1a8e <GPIO_writePin+0x5a>
    1a8c:	5f c0       	rjmp	.+190    	; 0x1b4c <GPIO_writePin+0x118>
    1a8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a90:	9d 81       	ldd	r25, Y+5	; 0x05
    1a92:	83 30       	cpi	r24, 0x03	; 3
    1a94:	91 05       	cpc	r25, r1
    1a96:	09 f4       	brne	.+2      	; 0x1a9a <GPIO_writePin+0x66>
    1a98:	85 c0       	rjmp	.+266    	; 0x1ba4 <GPIO_writePin+0x170>
    1a9a:	af c0       	rjmp	.+350    	; 0x1bfa <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9e:	81 30       	cpi	r24, 0x01	; 1
    1aa0:	a1 f4       	brne	.+40     	; 0x1aca <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1aa2:	ab e3       	ldi	r26, 0x3B	; 59
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	eb e3       	ldi	r30, 0x3B	; 59
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	48 2f       	mov	r20, r24
    1aae:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab0:	28 2f       	mov	r18, r24
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	02 2e       	mov	r0, r18
    1aba:	02 c0       	rjmp	.+4      	; 0x1ac0 <GPIO_writePin+0x8c>
    1abc:	88 0f       	add	r24, r24
    1abe:	99 1f       	adc	r25, r25
    1ac0:	0a 94       	dec	r0
    1ac2:	e2 f7       	brpl	.-8      	; 0x1abc <GPIO_writePin+0x88>
    1ac4:	84 2b       	or	r24, r20
    1ac6:	8c 93       	st	X, r24
    1ac8:	98 c0       	rjmp	.+304    	; 0x1bfa <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1aca:	ab e3       	ldi	r26, 0x3B	; 59
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	eb e3       	ldi	r30, 0x3B	; 59
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	48 2f       	mov	r20, r24
    1ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad8:	28 2f       	mov	r18, r24
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	02 2e       	mov	r0, r18
    1ae2:	02 c0       	rjmp	.+4      	; 0x1ae8 <GPIO_writePin+0xb4>
    1ae4:	88 0f       	add	r24, r24
    1ae6:	99 1f       	adc	r25, r25
    1ae8:	0a 94       	dec	r0
    1aea:	e2 f7       	brpl	.-8      	; 0x1ae4 <GPIO_writePin+0xb0>
    1aec:	80 95       	com	r24
    1aee:	84 23       	and	r24, r20
    1af0:	8c 93       	st	X, r24
    1af2:	83 c0       	rjmp	.+262    	; 0x1bfa <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1af4:	8b 81       	ldd	r24, Y+3	; 0x03
    1af6:	81 30       	cpi	r24, 0x01	; 1
    1af8:	a1 f4       	brne	.+40     	; 0x1b22 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1afa:	a8 e3       	ldi	r26, 0x38	; 56
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	e8 e3       	ldi	r30, 0x38	; 56
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	48 2f       	mov	r20, r24
    1b06:	8a 81       	ldd	r24, Y+2	; 0x02
    1b08:	28 2f       	mov	r18, r24
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	02 2e       	mov	r0, r18
    1b12:	02 c0       	rjmp	.+4      	; 0x1b18 <GPIO_writePin+0xe4>
    1b14:	88 0f       	add	r24, r24
    1b16:	99 1f       	adc	r25, r25
    1b18:	0a 94       	dec	r0
    1b1a:	e2 f7       	brpl	.-8      	; 0x1b14 <GPIO_writePin+0xe0>
    1b1c:	84 2b       	or	r24, r20
    1b1e:	8c 93       	st	X, r24
    1b20:	6c c0       	rjmp	.+216    	; 0x1bfa <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1b22:	a8 e3       	ldi	r26, 0x38	; 56
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	e8 e3       	ldi	r30, 0x38	; 56
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	48 2f       	mov	r20, r24
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	28 2f       	mov	r18, r24
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	02 2e       	mov	r0, r18
    1b3a:	02 c0       	rjmp	.+4      	; 0x1b40 <GPIO_writePin+0x10c>
    1b3c:	88 0f       	add	r24, r24
    1b3e:	99 1f       	adc	r25, r25
    1b40:	0a 94       	dec	r0
    1b42:	e2 f7       	brpl	.-8      	; 0x1b3c <GPIO_writePin+0x108>
    1b44:	80 95       	com	r24
    1b46:	84 23       	and	r24, r20
    1b48:	8c 93       	st	X, r24
    1b4a:	57 c0       	rjmp	.+174    	; 0x1bfa <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4e:	81 30       	cpi	r24, 0x01	; 1
    1b50:	a1 f4       	brne	.+40     	; 0x1b7a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1b52:	a5 e3       	ldi	r26, 0x35	; 53
    1b54:	b0 e0       	ldi	r27, 0x00	; 0
    1b56:	e5 e3       	ldi	r30, 0x35	; 53
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	80 81       	ld	r24, Z
    1b5c:	48 2f       	mov	r20, r24
    1b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b60:	28 2f       	mov	r18, r24
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	02 2e       	mov	r0, r18
    1b6a:	02 c0       	rjmp	.+4      	; 0x1b70 <GPIO_writePin+0x13c>
    1b6c:	88 0f       	add	r24, r24
    1b6e:	99 1f       	adc	r25, r25
    1b70:	0a 94       	dec	r0
    1b72:	e2 f7       	brpl	.-8      	; 0x1b6c <GPIO_writePin+0x138>
    1b74:	84 2b       	or	r24, r20
    1b76:	8c 93       	st	X, r24
    1b78:	40 c0       	rjmp	.+128    	; 0x1bfa <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1b7a:	a5 e3       	ldi	r26, 0x35	; 53
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	e5 e3       	ldi	r30, 0x35	; 53
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	80 81       	ld	r24, Z
    1b84:	48 2f       	mov	r20, r24
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	28 2f       	mov	r18, r24
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	02 2e       	mov	r0, r18
    1b92:	02 c0       	rjmp	.+4      	; 0x1b98 <GPIO_writePin+0x164>
    1b94:	88 0f       	add	r24, r24
    1b96:	99 1f       	adc	r25, r25
    1b98:	0a 94       	dec	r0
    1b9a:	e2 f7       	brpl	.-8      	; 0x1b94 <GPIO_writePin+0x160>
    1b9c:	80 95       	com	r24
    1b9e:	84 23       	and	r24, r20
    1ba0:	8c 93       	st	X, r24
    1ba2:	2b c0       	rjmp	.+86     	; 0x1bfa <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba6:	81 30       	cpi	r24, 0x01	; 1
    1ba8:	a1 f4       	brne	.+40     	; 0x1bd2 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1baa:	a2 e3       	ldi	r26, 0x32	; 50
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	e2 e3       	ldi	r30, 0x32	; 50
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	48 2f       	mov	r20, r24
    1bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb8:	28 2f       	mov	r18, r24
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	02 2e       	mov	r0, r18
    1bc2:	02 c0       	rjmp	.+4      	; 0x1bc8 <GPIO_writePin+0x194>
    1bc4:	88 0f       	add	r24, r24
    1bc6:	99 1f       	adc	r25, r25
    1bc8:	0a 94       	dec	r0
    1bca:	e2 f7       	brpl	.-8      	; 0x1bc4 <GPIO_writePin+0x190>
    1bcc:	84 2b       	or	r24, r20
    1bce:	8c 93       	st	X, r24
    1bd0:	14 c0       	rjmp	.+40     	; 0x1bfa <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1bd2:	a2 e3       	ldi	r26, 0x32	; 50
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	e2 e3       	ldi	r30, 0x32	; 50
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	48 2f       	mov	r20, r24
    1bde:	8a 81       	ldd	r24, Y+2	; 0x02
    1be0:	28 2f       	mov	r18, r24
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	02 2e       	mov	r0, r18
    1bea:	02 c0       	rjmp	.+4      	; 0x1bf0 <GPIO_writePin+0x1bc>
    1bec:	88 0f       	add	r24, r24
    1bee:	99 1f       	adc	r25, r25
    1bf0:	0a 94       	dec	r0
    1bf2:	e2 f7       	brpl	.-8      	; 0x1bec <GPIO_writePin+0x1b8>
    1bf4:	80 95       	com	r24
    1bf6:	84 23       	and	r24, r20
    1bf8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1bfa:	0f 90       	pop	r0
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
    1c04:	cf 91       	pop	r28
    1c06:	df 91       	pop	r29
    1c08:	08 95       	ret

00001c0a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1c0a:	df 93       	push	r29
    1c0c:	cf 93       	push	r28
    1c0e:	00 d0       	rcall	.+0      	; 0x1c10 <GPIO_readPin+0x6>
    1c10:	00 d0       	rcall	.+0      	; 0x1c12 <GPIO_readPin+0x8>
    1c12:	0f 92       	push	r0
    1c14:	cd b7       	in	r28, 0x3d	; 61
    1c16:	de b7       	in	r29, 0x3e	; 62
    1c18:	8a 83       	std	Y+2, r24	; 0x02
    1c1a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1c1c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	88 30       	cpi	r24, 0x08	; 8
    1c22:	08 f0       	brcs	.+2      	; 0x1c26 <GPIO_readPin+0x1c>
    1c24:	84 c0       	rjmp	.+264    	; 0x1d2e <GPIO_readPin+0x124>
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	84 30       	cpi	r24, 0x04	; 4
    1c2a:	08 f0       	brcs	.+2      	; 0x1c2e <GPIO_readPin+0x24>
    1c2c:	80 c0       	rjmp	.+256    	; 0x1d2e <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c30:	28 2f       	mov	r18, r24
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	3d 83       	std	Y+5, r19	; 0x05
    1c36:	2c 83       	std	Y+4, r18	; 0x04
    1c38:	4c 81       	ldd	r20, Y+4	; 0x04
    1c3a:	5d 81       	ldd	r21, Y+5	; 0x05
    1c3c:	41 30       	cpi	r20, 0x01	; 1
    1c3e:	51 05       	cpc	r21, r1
    1c40:	79 f1       	breq	.+94     	; 0x1ca0 <GPIO_readPin+0x96>
    1c42:	8c 81       	ldd	r24, Y+4	; 0x04
    1c44:	9d 81       	ldd	r25, Y+5	; 0x05
    1c46:	82 30       	cpi	r24, 0x02	; 2
    1c48:	91 05       	cpc	r25, r1
    1c4a:	34 f4       	brge	.+12     	; 0x1c58 <GPIO_readPin+0x4e>
    1c4c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c4e:	3d 81       	ldd	r19, Y+5	; 0x05
    1c50:	21 15       	cp	r18, r1
    1c52:	31 05       	cpc	r19, r1
    1c54:	69 f0       	breq	.+26     	; 0x1c70 <GPIO_readPin+0x66>
    1c56:	6b c0       	rjmp	.+214    	; 0x1d2e <GPIO_readPin+0x124>
    1c58:	4c 81       	ldd	r20, Y+4	; 0x04
    1c5a:	5d 81       	ldd	r21, Y+5	; 0x05
    1c5c:	42 30       	cpi	r20, 0x02	; 2
    1c5e:	51 05       	cpc	r21, r1
    1c60:	b9 f1       	breq	.+110    	; 0x1cd0 <GPIO_readPin+0xc6>
    1c62:	8c 81       	ldd	r24, Y+4	; 0x04
    1c64:	9d 81       	ldd	r25, Y+5	; 0x05
    1c66:	83 30       	cpi	r24, 0x03	; 3
    1c68:	91 05       	cpc	r25, r1
    1c6a:	09 f4       	brne	.+2      	; 0x1c6e <GPIO_readPin+0x64>
    1c6c:	49 c0       	rjmp	.+146    	; 0x1d00 <GPIO_readPin+0xf6>
    1c6e:	5f c0       	rjmp	.+190    	; 0x1d2e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1c70:	e9 e3       	ldi	r30, 0x39	; 57
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	28 2f       	mov	r18, r24
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7c:	88 2f       	mov	r24, r24
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	a9 01       	movw	r20, r18
    1c82:	02 c0       	rjmp	.+4      	; 0x1c88 <GPIO_readPin+0x7e>
    1c84:	55 95       	asr	r21
    1c86:	47 95       	ror	r20
    1c88:	8a 95       	dec	r24
    1c8a:	e2 f7       	brpl	.-8      	; 0x1c84 <GPIO_readPin+0x7a>
    1c8c:	ca 01       	movw	r24, r20
    1c8e:	81 70       	andi	r24, 0x01	; 1
    1c90:	90 70       	andi	r25, 0x00	; 0
    1c92:	88 23       	and	r24, r24
    1c94:	19 f0       	breq	.+6      	; 0x1c9c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	89 83       	std	Y+1, r24	; 0x01
    1c9a:	49 c0       	rjmp	.+146    	; 0x1d2e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c9c:	19 82       	std	Y+1, r1	; 0x01
    1c9e:	47 c0       	rjmp	.+142    	; 0x1d2e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1ca0:	e6 e3       	ldi	r30, 0x36	; 54
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	28 2f       	mov	r18, r24
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cac:	88 2f       	mov	r24, r24
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	a9 01       	movw	r20, r18
    1cb2:	02 c0       	rjmp	.+4      	; 0x1cb8 <GPIO_readPin+0xae>
    1cb4:	55 95       	asr	r21
    1cb6:	47 95       	ror	r20
    1cb8:	8a 95       	dec	r24
    1cba:	e2 f7       	brpl	.-8      	; 0x1cb4 <GPIO_readPin+0xaa>
    1cbc:	ca 01       	movw	r24, r20
    1cbe:	81 70       	andi	r24, 0x01	; 1
    1cc0:	90 70       	andi	r25, 0x00	; 0
    1cc2:	88 23       	and	r24, r24
    1cc4:	19 f0       	breq	.+6      	; 0x1ccc <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	89 83       	std	Y+1, r24	; 0x01
    1cca:	31 c0       	rjmp	.+98     	; 0x1d2e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ccc:	19 82       	std	Y+1, r1	; 0x01
    1cce:	2f c0       	rjmp	.+94     	; 0x1d2e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1cd0:	e3 e3       	ldi	r30, 0x33	; 51
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	28 2f       	mov	r18, r24
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	8b 81       	ldd	r24, Y+3	; 0x03
    1cdc:	88 2f       	mov	r24, r24
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	a9 01       	movw	r20, r18
    1ce2:	02 c0       	rjmp	.+4      	; 0x1ce8 <GPIO_readPin+0xde>
    1ce4:	55 95       	asr	r21
    1ce6:	47 95       	ror	r20
    1ce8:	8a 95       	dec	r24
    1cea:	e2 f7       	brpl	.-8      	; 0x1ce4 <GPIO_readPin+0xda>
    1cec:	ca 01       	movw	r24, r20
    1cee:	81 70       	andi	r24, 0x01	; 1
    1cf0:	90 70       	andi	r25, 0x00	; 0
    1cf2:	88 23       	and	r24, r24
    1cf4:	19 f0       	breq	.+6      	; 0x1cfc <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	89 83       	std	Y+1, r24	; 0x01
    1cfa:	19 c0       	rjmp	.+50     	; 0x1d2e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1cfc:	19 82       	std	Y+1, r1	; 0x01
    1cfe:	17 c0       	rjmp	.+46     	; 0x1d2e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1d00:	e0 e3       	ldi	r30, 0x30	; 48
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	28 2f       	mov	r18, r24
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0c:	88 2f       	mov	r24, r24
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	a9 01       	movw	r20, r18
    1d12:	02 c0       	rjmp	.+4      	; 0x1d18 <GPIO_readPin+0x10e>
    1d14:	55 95       	asr	r21
    1d16:	47 95       	ror	r20
    1d18:	8a 95       	dec	r24
    1d1a:	e2 f7       	brpl	.-8      	; 0x1d14 <GPIO_readPin+0x10a>
    1d1c:	ca 01       	movw	r24, r20
    1d1e:	81 70       	andi	r24, 0x01	; 1
    1d20:	90 70       	andi	r25, 0x00	; 0
    1d22:	88 23       	and	r24, r24
    1d24:	19 f0       	breq	.+6      	; 0x1d2c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	89 83       	std	Y+1, r24	; 0x01
    1d2a:	01 c0       	rjmp	.+2      	; 0x1d2e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d2c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1d2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	0f 90       	pop	r0
    1d38:	0f 90       	pop	r0
    1d3a:	cf 91       	pop	r28
    1d3c:	df 91       	pop	r29
    1d3e:	08 95       	ret

00001d40 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1d40:	df 93       	push	r29
    1d42:	cf 93       	push	r28
    1d44:	00 d0       	rcall	.+0      	; 0x1d46 <GPIO_setupPortDirection+0x6>
    1d46:	00 d0       	rcall	.+0      	; 0x1d48 <GPIO_setupPortDirection+0x8>
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	89 83       	std	Y+1, r24	; 0x01
    1d4e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
    1d52:	84 30       	cpi	r24, 0x04	; 4
    1d54:	90 f5       	brcc	.+100    	; 0x1dba <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1d56:	89 81       	ldd	r24, Y+1	; 0x01
    1d58:	28 2f       	mov	r18, r24
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	3c 83       	std	Y+4, r19	; 0x04
    1d5e:	2b 83       	std	Y+3, r18	; 0x03
    1d60:	8b 81       	ldd	r24, Y+3	; 0x03
    1d62:	9c 81       	ldd	r25, Y+4	; 0x04
    1d64:	81 30       	cpi	r24, 0x01	; 1
    1d66:	91 05       	cpc	r25, r1
    1d68:	d1 f0       	breq	.+52     	; 0x1d9e <GPIO_setupPortDirection+0x5e>
    1d6a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d6c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d6e:	22 30       	cpi	r18, 0x02	; 2
    1d70:	31 05       	cpc	r19, r1
    1d72:	2c f4       	brge	.+10     	; 0x1d7e <GPIO_setupPortDirection+0x3e>
    1d74:	8b 81       	ldd	r24, Y+3	; 0x03
    1d76:	9c 81       	ldd	r25, Y+4	; 0x04
    1d78:	00 97       	sbiw	r24, 0x00	; 0
    1d7a:	61 f0       	breq	.+24     	; 0x1d94 <GPIO_setupPortDirection+0x54>
    1d7c:	1e c0       	rjmp	.+60     	; 0x1dba <GPIO_setupPortDirection+0x7a>
    1d7e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d80:	3c 81       	ldd	r19, Y+4	; 0x04
    1d82:	22 30       	cpi	r18, 0x02	; 2
    1d84:	31 05       	cpc	r19, r1
    1d86:	81 f0       	breq	.+32     	; 0x1da8 <GPIO_setupPortDirection+0x68>
    1d88:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8c:	83 30       	cpi	r24, 0x03	; 3
    1d8e:	91 05       	cpc	r25, r1
    1d90:	81 f0       	breq	.+32     	; 0x1db2 <GPIO_setupPortDirection+0x72>
    1d92:	13 c0       	rjmp	.+38     	; 0x1dba <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1d94:	ea e3       	ldi	r30, 0x3A	; 58
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	80 83       	st	Z, r24
    1d9c:	0e c0       	rjmp	.+28     	; 0x1dba <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1d9e:	e7 e3       	ldi	r30, 0x37	; 55
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	8a 81       	ldd	r24, Y+2	; 0x02
    1da4:	80 83       	st	Z, r24
    1da6:	09 c0       	rjmp	.+18     	; 0x1dba <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1da8:	e4 e3       	ldi	r30, 0x34	; 52
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	8a 81       	ldd	r24, Y+2	; 0x02
    1dae:	80 83       	st	Z, r24
    1db0:	04 c0       	rjmp	.+8      	; 0x1dba <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1db2:	e1 e3       	ldi	r30, 0x31	; 49
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	8a 81       	ldd	r24, Y+2	; 0x02
    1db8:	80 83       	st	Z, r24
			break;
		}
	}
}
    1dba:	0f 90       	pop	r0
    1dbc:	0f 90       	pop	r0
    1dbe:	0f 90       	pop	r0
    1dc0:	0f 90       	pop	r0
    1dc2:	cf 91       	pop	r28
    1dc4:	df 91       	pop	r29
    1dc6:	08 95       	ret

00001dc8 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1dc8:	df 93       	push	r29
    1dca:	cf 93       	push	r28
    1dcc:	00 d0       	rcall	.+0      	; 0x1dce <GPIO_writePort+0x6>
    1dce:	00 d0       	rcall	.+0      	; 0x1dd0 <GPIO_writePort+0x8>
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
    1dd4:	89 83       	std	Y+1, r24	; 0x01
    1dd6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
    1dda:	84 30       	cpi	r24, 0x04	; 4
    1ddc:	90 f5       	brcc	.+100    	; 0x1e42 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	28 2f       	mov	r18, r24
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	3c 83       	std	Y+4, r19	; 0x04
    1de6:	2b 83       	std	Y+3, r18	; 0x03
    1de8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dea:	9c 81       	ldd	r25, Y+4	; 0x04
    1dec:	81 30       	cpi	r24, 0x01	; 1
    1dee:	91 05       	cpc	r25, r1
    1df0:	d1 f0       	breq	.+52     	; 0x1e26 <GPIO_writePort+0x5e>
    1df2:	2b 81       	ldd	r18, Y+3	; 0x03
    1df4:	3c 81       	ldd	r19, Y+4	; 0x04
    1df6:	22 30       	cpi	r18, 0x02	; 2
    1df8:	31 05       	cpc	r19, r1
    1dfa:	2c f4       	brge	.+10     	; 0x1e06 <GPIO_writePort+0x3e>
    1dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1e00:	00 97       	sbiw	r24, 0x00	; 0
    1e02:	61 f0       	breq	.+24     	; 0x1e1c <GPIO_writePort+0x54>
    1e04:	1e c0       	rjmp	.+60     	; 0x1e42 <GPIO_writePort+0x7a>
    1e06:	2b 81       	ldd	r18, Y+3	; 0x03
    1e08:	3c 81       	ldd	r19, Y+4	; 0x04
    1e0a:	22 30       	cpi	r18, 0x02	; 2
    1e0c:	31 05       	cpc	r19, r1
    1e0e:	81 f0       	breq	.+32     	; 0x1e30 <GPIO_writePort+0x68>
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	9c 81       	ldd	r25, Y+4	; 0x04
    1e14:	83 30       	cpi	r24, 0x03	; 3
    1e16:	91 05       	cpc	r25, r1
    1e18:	81 f0       	breq	.+32     	; 0x1e3a <GPIO_writePort+0x72>
    1e1a:	13 c0       	rjmp	.+38     	; 0x1e42 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1e1c:	eb e3       	ldi	r30, 0x3B	; 59
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	8a 81       	ldd	r24, Y+2	; 0x02
    1e22:	80 83       	st	Z, r24
    1e24:	0e c0       	rjmp	.+28     	; 0x1e42 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1e26:	e8 e3       	ldi	r30, 0x38	; 56
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2c:	80 83       	st	Z, r24
    1e2e:	09 c0       	rjmp	.+18     	; 0x1e42 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1e30:	e5 e3       	ldi	r30, 0x35	; 53
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	8a 81       	ldd	r24, Y+2	; 0x02
    1e36:	80 83       	st	Z, r24
    1e38:	04 c0       	rjmp	.+8      	; 0x1e42 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1e3a:	e2 e3       	ldi	r30, 0x32	; 50
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e40:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e42:	0f 90       	pop	r0
    1e44:	0f 90       	pop	r0
    1e46:	0f 90       	pop	r0
    1e48:	0f 90       	pop	r0
    1e4a:	cf 91       	pop	r28
    1e4c:	df 91       	pop	r29
    1e4e:	08 95       	ret

00001e50 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1e50:	df 93       	push	r29
    1e52:	cf 93       	push	r28
    1e54:	00 d0       	rcall	.+0      	; 0x1e56 <GPIO_readPort+0x6>
    1e56:	00 d0       	rcall	.+0      	; 0x1e58 <GPIO_readPort+0x8>
    1e58:	cd b7       	in	r28, 0x3d	; 61
    1e5a:	de b7       	in	r29, 0x3e	; 62
    1e5c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1e5e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e60:	8a 81       	ldd	r24, Y+2	; 0x02
    1e62:	84 30       	cpi	r24, 0x04	; 4
    1e64:	90 f5       	brcc	.+100    	; 0x1eca <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1e66:	8a 81       	ldd	r24, Y+2	; 0x02
    1e68:	28 2f       	mov	r18, r24
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	3c 83       	std	Y+4, r19	; 0x04
    1e6e:	2b 83       	std	Y+3, r18	; 0x03
    1e70:	8b 81       	ldd	r24, Y+3	; 0x03
    1e72:	9c 81       	ldd	r25, Y+4	; 0x04
    1e74:	81 30       	cpi	r24, 0x01	; 1
    1e76:	91 05       	cpc	r25, r1
    1e78:	d1 f0       	breq	.+52     	; 0x1eae <GPIO_readPort+0x5e>
    1e7a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e7c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e7e:	22 30       	cpi	r18, 0x02	; 2
    1e80:	31 05       	cpc	r19, r1
    1e82:	2c f4       	brge	.+10     	; 0x1e8e <GPIO_readPort+0x3e>
    1e84:	8b 81       	ldd	r24, Y+3	; 0x03
    1e86:	9c 81       	ldd	r25, Y+4	; 0x04
    1e88:	00 97       	sbiw	r24, 0x00	; 0
    1e8a:	61 f0       	breq	.+24     	; 0x1ea4 <GPIO_readPort+0x54>
    1e8c:	1e c0       	rjmp	.+60     	; 0x1eca <GPIO_readPort+0x7a>
    1e8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e90:	3c 81       	ldd	r19, Y+4	; 0x04
    1e92:	22 30       	cpi	r18, 0x02	; 2
    1e94:	31 05       	cpc	r19, r1
    1e96:	81 f0       	breq	.+32     	; 0x1eb8 <GPIO_readPort+0x68>
    1e98:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e9c:	83 30       	cpi	r24, 0x03	; 3
    1e9e:	91 05       	cpc	r25, r1
    1ea0:	81 f0       	breq	.+32     	; 0x1ec2 <GPIO_readPort+0x72>
    1ea2:	13 c0       	rjmp	.+38     	; 0x1eca <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1ea4:	e9 e3       	ldi	r30, 0x39	; 57
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 81       	ld	r24, Z
    1eaa:	89 83       	std	Y+1, r24	; 0x01
    1eac:	0e c0       	rjmp	.+28     	; 0x1eca <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1eae:	e6 e3       	ldi	r30, 0x36	; 54
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	89 83       	std	Y+1, r24	; 0x01
    1eb6:	09 c0       	rjmp	.+18     	; 0x1eca <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1eb8:	e3 e3       	ldi	r30, 0x33	; 51
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	89 83       	std	Y+1, r24	; 0x01
    1ec0:	04 c0       	rjmp	.+8      	; 0x1eca <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1ec2:	e0 e3       	ldi	r30, 0x30	; 48
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1eca:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	0f 90       	pop	r0
    1ed2:	0f 90       	pop	r0
    1ed4:	cf 91       	pop	r28
    1ed6:	df 91       	pop	r29
    1ed8:	08 95       	ret

00001eda <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1eda:	df 93       	push	r29
    1edc:	cf 93       	push	r28
    1ede:	cd b7       	in	r28, 0x3d	; 61
    1ee0:	de b7       	in	r29, 0x3e	; 62
    1ee2:	60 97       	sbiw	r28, 0x10	; 16
    1ee4:	0f b6       	in	r0, 0x3f	; 63
    1ee6:	f8 94       	cli
    1ee8:	de bf       	out	0x3e, r29	; 62
    1eea:	0f be       	out	0x3f, r0	; 63
    1eec:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	60 e0       	ldi	r22, 0x00	; 0
    1ef2:	40 e0       	ldi	r20, 0x00	; 0
    1ef4:	0e 94 2f 0c 	call	0x185e	; 0x185e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	61 e0       	ldi	r22, 0x01	; 1
    1efc:	40 e0       	ldi	r20, 0x00	; 0
    1efe:	0e 94 2f 0c 	call	0x185e	; 0x185e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	62 e0       	ldi	r22, 0x02	; 2
    1f06:	40 e0       	ldi	r20, 0x00	; 0
    1f08:	0e 94 2f 0c 	call	0x185e	; 0x185e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	63 e0       	ldi	r22, 0x03	; 3
    1f10:	40 e0       	ldi	r20, 0x00	; 0
    1f12:	0e 94 2f 0c 	call	0x185e	; 0x185e <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	64 e0       	ldi	r22, 0x04	; 4
    1f1a:	40 e0       	ldi	r20, 0x00	; 0
    1f1c:	0e 94 2f 0c 	call	0x185e	; 0x185e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	65 e0       	ldi	r22, 0x05	; 5
    1f24:	40 e0       	ldi	r20, 0x00	; 0
    1f26:	0e 94 2f 0c 	call	0x185e	; 0x185e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	66 e0       	ldi	r22, 0x06	; 6
    1f2e:	40 e0       	ldi	r20, 0x00	; 0
    1f30:	0e 94 2f 0c 	call	0x185e	; 0x185e <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	67 e0       	ldi	r22, 0x07	; 7
    1f38:	40 e0       	ldi	r20, 0x00	; 0
    1f3a:	0e 94 2f 0c 	call	0x185e	; 0x185e <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1f3e:	1f 86       	std	Y+15, r1	; 0x0f
    1f40:	ab c0       	rjmp	.+342    	; 0x2098 <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f46:	41 e0       	ldi	r20, 0x01	; 1
    1f48:	0e 94 2f 0c 	call	0x185e	; 0x185e <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f50:	40 e0       	ldi	r20, 0x00	; 0
    1f52:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1f56:	18 8a       	std	Y+16, r1	; 0x10
    1f58:	22 c0       	rjmp	.+68     	; 0x1f9e <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1f5a:	88 89       	ldd	r24, Y+16	; 0x10
    1f5c:	98 2f       	mov	r25, r24
    1f5e:	9c 5f       	subi	r25, 0xFC	; 252
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	69 2f       	mov	r22, r25
    1f64:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <GPIO_readPin>
    1f68:	88 23       	and	r24, r24
    1f6a:	b1 f4       	brne	.+44     	; 0x1f98 <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1f6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f6e:	88 2f       	mov	r24, r24
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	88 0f       	add	r24, r24
    1f74:	99 1f       	adc	r25, r25
    1f76:	88 0f       	add	r24, r24
    1f78:	99 1f       	adc	r25, r25
    1f7a:	98 2f       	mov	r25, r24
    1f7c:	88 89       	ldd	r24, Y+16	; 0x10
    1f7e:	89 0f       	add	r24, r25
    1f80:	8f 5f       	subi	r24, 0xFF	; 255
    1f82:	0e 94 51 10 	call	0x20a2	; 0x20a2 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    1f86:	60 96       	adiw	r28, 0x10	; 16
    1f88:	0f b6       	in	r0, 0x3f	; 63
    1f8a:	f8 94       	cli
    1f8c:	de bf       	out	0x3e, r29	; 62
    1f8e:	0f be       	out	0x3f, r0	; 63
    1f90:	cd bf       	out	0x3d, r28	; 61
    1f92:	cf 91       	pop	r28
    1f94:	df 91       	pop	r29
    1f96:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1f98:	88 89       	ldd	r24, Y+16	; 0x10
    1f9a:	8f 5f       	subi	r24, 0xFF	; 255
    1f9c:	88 8b       	std	Y+16, r24	; 0x10
    1f9e:	88 89       	ldd	r24, Y+16	; 0x10
    1fa0:	84 30       	cpi	r24, 0x04	; 4
    1fa2:	d8 f2       	brcs	.-74     	; 0x1f5a <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	6f 85       	ldd	r22, Y+15	; 0x0f
    1fa8:	40 e0       	ldi	r20, 0x00	; 0
    1faa:	0e 94 2f 0c 	call	0x185e	; 0x185e <GPIO_setupPinDirection>
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	a0 ea       	ldi	r26, 0xA0	; 160
    1fb4:	b0 e4       	ldi	r27, 0x40	; 64
    1fb6:	8b 87       	std	Y+11, r24	; 0x0b
    1fb8:	9c 87       	std	Y+12, r25	; 0x0c
    1fba:	ad 87       	std	Y+13, r26	; 0x0d
    1fbc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	4a ef       	ldi	r20, 0xFA	; 250
    1fcc:	54 e4       	ldi	r21, 0x44	; 68
    1fce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	8f 83       	std	Y+7, r24	; 0x07
    1fd8:	98 87       	std	Y+8, r25	; 0x08
    1fda:	a9 87       	std	Y+9, r26	; 0x09
    1fdc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fde:	6f 81       	ldd	r22, Y+7	; 0x07
    1fe0:	78 85       	ldd	r23, Y+8	; 0x08
    1fe2:	89 85       	ldd	r24, Y+9	; 0x09
    1fe4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	40 e8       	ldi	r20, 0x80	; 128
    1fec:	5f e3       	ldi	r21, 0x3F	; 63
    1fee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ff2:	88 23       	and	r24, r24
    1ff4:	2c f4       	brge	.+10     	; 0x2000 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	9e 83       	std	Y+6, r25	; 0x06
    1ffc:	8d 83       	std	Y+5, r24	; 0x05
    1ffe:	3f c0       	rjmp	.+126    	; 0x207e <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    2000:	6f 81       	ldd	r22, Y+7	; 0x07
    2002:	78 85       	ldd	r23, Y+8	; 0x08
    2004:	89 85       	ldd	r24, Y+9	; 0x09
    2006:	9a 85       	ldd	r25, Y+10	; 0x0a
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	3f ef       	ldi	r19, 0xFF	; 255
    200c:	4f e7       	ldi	r20, 0x7F	; 127
    200e:	57 e4       	ldi	r21, 0x47	; 71
    2010:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2014:	18 16       	cp	r1, r24
    2016:	4c f5       	brge	.+82     	; 0x206a <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2018:	6b 85       	ldd	r22, Y+11	; 0x0b
    201a:	7c 85       	ldd	r23, Y+12	; 0x0c
    201c:	8d 85       	ldd	r24, Y+13	; 0x0d
    201e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	40 e2       	ldi	r20, 0x20	; 32
    2026:	51 e4       	ldi	r21, 0x41	; 65
    2028:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	bc 01       	movw	r22, r24
    2032:	cd 01       	movw	r24, r26
    2034:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	9e 83       	std	Y+6, r25	; 0x06
    203e:	8d 83       	std	Y+5, r24	; 0x05
    2040:	0f c0       	rjmp	.+30     	; 0x2060 <KEYPAD_getPressedKey+0x186>
    2042:	88 ec       	ldi	r24, 0xC8	; 200
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	9c 83       	std	Y+4, r25	; 0x04
    2048:	8b 83       	std	Y+3, r24	; 0x03
    204a:	8b 81       	ldd	r24, Y+3	; 0x03
    204c:	9c 81       	ldd	r25, Y+4	; 0x04
    204e:	01 97       	sbiw	r24, 0x01	; 1
    2050:	f1 f7       	brne	.-4      	; 0x204e <KEYPAD_getPressedKey+0x174>
    2052:	9c 83       	std	Y+4, r25	; 0x04
    2054:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2056:	8d 81       	ldd	r24, Y+5	; 0x05
    2058:	9e 81       	ldd	r25, Y+6	; 0x06
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	9e 83       	std	Y+6, r25	; 0x06
    205e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2060:	8d 81       	ldd	r24, Y+5	; 0x05
    2062:	9e 81       	ldd	r25, Y+6	; 0x06
    2064:	00 97       	sbiw	r24, 0x00	; 0
    2066:	69 f7       	brne	.-38     	; 0x2042 <KEYPAD_getPressedKey+0x168>
    2068:	14 c0       	rjmp	.+40     	; 0x2092 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    206a:	6f 81       	ldd	r22, Y+7	; 0x07
    206c:	78 85       	ldd	r23, Y+8	; 0x08
    206e:	89 85       	ldd	r24, Y+9	; 0x09
    2070:	9a 85       	ldd	r25, Y+10	; 0x0a
    2072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	9e 83       	std	Y+6, r25	; 0x06
    207c:	8d 83       	std	Y+5, r24	; 0x05
    207e:	8d 81       	ldd	r24, Y+5	; 0x05
    2080:	9e 81       	ldd	r25, Y+6	; 0x06
    2082:	9a 83       	std	Y+2, r25	; 0x02
    2084:	89 83       	std	Y+1, r24	; 0x01
    2086:	89 81       	ldd	r24, Y+1	; 0x01
    2088:	9a 81       	ldd	r25, Y+2	; 0x02
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	f1 f7       	brne	.-4      	; 0x208a <KEYPAD_getPressedKey+0x1b0>
    208e:	9a 83       	std	Y+2, r25	; 0x02
    2090:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2092:	8f 85       	ldd	r24, Y+15	; 0x0f
    2094:	8f 5f       	subi	r24, 0xFF	; 255
    2096:	8f 87       	std	Y+15, r24	; 0x0f
    2098:	8f 85       	ldd	r24, Y+15	; 0x0f
    209a:	84 30       	cpi	r24, 0x04	; 4
    209c:	08 f4       	brcc	.+2      	; 0x20a0 <KEYPAD_getPressedKey+0x1c6>
    209e:	51 cf       	rjmp	.-350    	; 0x1f42 <KEYPAD_getPressedKey+0x68>
    20a0:	4e cf       	rjmp	.-356    	; 0x1f3e <KEYPAD_getPressedKey+0x64>

000020a2 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    20a2:	df 93       	push	r29
    20a4:	cf 93       	push	r28
    20a6:	00 d0       	rcall	.+0      	; 0x20a8 <KEYPAD_4x4_adjustKeyNumber+0x6>
    20a8:	00 d0       	rcall	.+0      	; 0x20aa <KEYPAD_4x4_adjustKeyNumber+0x8>
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
    20ae:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    20b0:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    20b2:	8a 81       	ldd	r24, Y+2	; 0x02
    20b4:	28 2f       	mov	r18, r24
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	3c 83       	std	Y+4, r19	; 0x04
    20ba:	2b 83       	std	Y+3, r18	; 0x03
    20bc:	8b 81       	ldd	r24, Y+3	; 0x03
    20be:	9c 81       	ldd	r25, Y+4	; 0x04
    20c0:	88 30       	cpi	r24, 0x08	; 8
    20c2:	91 05       	cpc	r25, r1
    20c4:	09 f4       	brne	.+2      	; 0x20c8 <KEYPAD_4x4_adjustKeyNumber+0x26>
    20c6:	70 c0       	rjmp	.+224    	; 0x21a8 <KEYPAD_4x4_adjustKeyNumber+0x106>
    20c8:	2b 81       	ldd	r18, Y+3	; 0x03
    20ca:	3c 81       	ldd	r19, Y+4	; 0x04
    20cc:	29 30       	cpi	r18, 0x09	; 9
    20ce:	31 05       	cpc	r19, r1
    20d0:	5c f5       	brge	.+86     	; 0x2128 <KEYPAD_4x4_adjustKeyNumber+0x86>
    20d2:	8b 81       	ldd	r24, Y+3	; 0x03
    20d4:	9c 81       	ldd	r25, Y+4	; 0x04
    20d6:	84 30       	cpi	r24, 0x04	; 4
    20d8:	91 05       	cpc	r25, r1
    20da:	09 f4       	brne	.+2      	; 0x20de <KEYPAD_4x4_adjustKeyNumber+0x3c>
    20dc:	59 c0       	rjmp	.+178    	; 0x2190 <KEYPAD_4x4_adjustKeyNumber+0xee>
    20de:	2b 81       	ldd	r18, Y+3	; 0x03
    20e0:	3c 81       	ldd	r19, Y+4	; 0x04
    20e2:	25 30       	cpi	r18, 0x05	; 5
    20e4:	31 05       	cpc	r19, r1
    20e6:	9c f4       	brge	.+38     	; 0x210e <KEYPAD_4x4_adjustKeyNumber+0x6c>
    20e8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ea:	9c 81       	ldd	r25, Y+4	; 0x04
    20ec:	82 30       	cpi	r24, 0x02	; 2
    20ee:	91 05       	cpc	r25, r1
    20f0:	09 f4       	brne	.+2      	; 0x20f4 <KEYPAD_4x4_adjustKeyNumber+0x52>
    20f2:	48 c0       	rjmp	.+144    	; 0x2184 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    20f4:	2b 81       	ldd	r18, Y+3	; 0x03
    20f6:	3c 81       	ldd	r19, Y+4	; 0x04
    20f8:	23 30       	cpi	r18, 0x03	; 3
    20fa:	31 05       	cpc	r19, r1
    20fc:	0c f0       	brlt	.+2      	; 0x2100 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    20fe:	45 c0       	rjmp	.+138    	; 0x218a <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2100:	8b 81       	ldd	r24, Y+3	; 0x03
    2102:	9c 81       	ldd	r25, Y+4	; 0x04
    2104:	81 30       	cpi	r24, 0x01	; 1
    2106:	91 05       	cpc	r25, r1
    2108:	09 f4       	brne	.+2      	; 0x210c <KEYPAD_4x4_adjustKeyNumber+0x6a>
    210a:	39 c0       	rjmp	.+114    	; 0x217e <KEYPAD_4x4_adjustKeyNumber+0xdc>
    210c:	67 c0       	rjmp	.+206    	; 0x21dc <KEYPAD_4x4_adjustKeyNumber+0x13a>
    210e:	2b 81       	ldd	r18, Y+3	; 0x03
    2110:	3c 81       	ldd	r19, Y+4	; 0x04
    2112:	26 30       	cpi	r18, 0x06	; 6
    2114:	31 05       	cpc	r19, r1
    2116:	09 f4       	brne	.+2      	; 0x211a <KEYPAD_4x4_adjustKeyNumber+0x78>
    2118:	41 c0       	rjmp	.+130    	; 0x219c <KEYPAD_4x4_adjustKeyNumber+0xfa>
    211a:	8b 81       	ldd	r24, Y+3	; 0x03
    211c:	9c 81       	ldd	r25, Y+4	; 0x04
    211e:	87 30       	cpi	r24, 0x07	; 7
    2120:	91 05       	cpc	r25, r1
    2122:	0c f0       	brlt	.+2      	; 0x2126 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2124:	3e c0       	rjmp	.+124    	; 0x21a2 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2126:	37 c0       	rjmp	.+110    	; 0x2196 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2128:	2b 81       	ldd	r18, Y+3	; 0x03
    212a:	3c 81       	ldd	r19, Y+4	; 0x04
    212c:	2c 30       	cpi	r18, 0x0C	; 12
    212e:	31 05       	cpc	r19, r1
    2130:	09 f4       	brne	.+2      	; 0x2134 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2132:	46 c0       	rjmp	.+140    	; 0x21c0 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2134:	8b 81       	ldd	r24, Y+3	; 0x03
    2136:	9c 81       	ldd	r25, Y+4	; 0x04
    2138:	8d 30       	cpi	r24, 0x0D	; 13
    213a:	91 05       	cpc	r25, r1
    213c:	5c f4       	brge	.+22     	; 0x2154 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    213e:	2b 81       	ldd	r18, Y+3	; 0x03
    2140:	3c 81       	ldd	r19, Y+4	; 0x04
    2142:	2a 30       	cpi	r18, 0x0A	; 10
    2144:	31 05       	cpc	r19, r1
    2146:	b1 f1       	breq	.+108    	; 0x21b4 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2148:	8b 81       	ldd	r24, Y+3	; 0x03
    214a:	9c 81       	ldd	r25, Y+4	; 0x04
    214c:	8b 30       	cpi	r24, 0x0B	; 11
    214e:	91 05       	cpc	r25, r1
    2150:	a4 f5       	brge	.+104    	; 0x21ba <KEYPAD_4x4_adjustKeyNumber+0x118>
    2152:	2d c0       	rjmp	.+90     	; 0x21ae <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2154:	2b 81       	ldd	r18, Y+3	; 0x03
    2156:	3c 81       	ldd	r19, Y+4	; 0x04
    2158:	2e 30       	cpi	r18, 0x0E	; 14
    215a:	31 05       	cpc	r19, r1
    215c:	b9 f1       	breq	.+110    	; 0x21cc <KEYPAD_4x4_adjustKeyNumber+0x12a>
    215e:	8b 81       	ldd	r24, Y+3	; 0x03
    2160:	9c 81       	ldd	r25, Y+4	; 0x04
    2162:	8e 30       	cpi	r24, 0x0E	; 14
    2164:	91 05       	cpc	r25, r1
    2166:	7c f1       	brlt	.+94     	; 0x21c6 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2168:	2b 81       	ldd	r18, Y+3	; 0x03
    216a:	3c 81       	ldd	r19, Y+4	; 0x04
    216c:	2f 30       	cpi	r18, 0x0F	; 15
    216e:	31 05       	cpc	r19, r1
    2170:	79 f1       	breq	.+94     	; 0x21d0 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2172:	8b 81       	ldd	r24, Y+3	; 0x03
    2174:	9c 81       	ldd	r25, Y+4	; 0x04
    2176:	80 31       	cpi	r24, 0x10	; 16
    2178:	91 05       	cpc	r25, r1
    217a:	69 f1       	breq	.+90     	; 0x21d6 <KEYPAD_4x4_adjustKeyNumber+0x134>
    217c:	2f c0       	rjmp	.+94     	; 0x21dc <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    217e:	87 e0       	ldi	r24, 0x07	; 7
    2180:	89 83       	std	Y+1, r24	; 0x01
    2182:	2e c0       	rjmp	.+92     	; 0x21e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2184:	88 e0       	ldi	r24, 0x08	; 8
    2186:	89 83       	std	Y+1, r24	; 0x01
    2188:	2b c0       	rjmp	.+86     	; 0x21e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    218a:	89 e0       	ldi	r24, 0x09	; 9
    218c:	89 83       	std	Y+1, r24	; 0x01
    218e:	28 c0       	rjmp	.+80     	; 0x21e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2190:	85 e2       	ldi	r24, 0x25	; 37
    2192:	89 83       	std	Y+1, r24	; 0x01
    2194:	25 c0       	rjmp	.+74     	; 0x21e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2196:	84 e0       	ldi	r24, 0x04	; 4
    2198:	89 83       	std	Y+1, r24	; 0x01
    219a:	22 c0       	rjmp	.+68     	; 0x21e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    219c:	85 e0       	ldi	r24, 0x05	; 5
    219e:	89 83       	std	Y+1, r24	; 0x01
    21a0:	1f c0       	rjmp	.+62     	; 0x21e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    21a2:	86 e0       	ldi	r24, 0x06	; 6
    21a4:	89 83       	std	Y+1, r24	; 0x01
    21a6:	1c c0       	rjmp	.+56     	; 0x21e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    21a8:	8a e2       	ldi	r24, 0x2A	; 42
    21aa:	89 83       	std	Y+1, r24	; 0x01
    21ac:	19 c0       	rjmp	.+50     	; 0x21e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	89 83       	std	Y+1, r24	; 0x01
    21b2:	16 c0       	rjmp	.+44     	; 0x21e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    21b4:	82 e0       	ldi	r24, 0x02	; 2
    21b6:	89 83       	std	Y+1, r24	; 0x01
    21b8:	13 c0       	rjmp	.+38     	; 0x21e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    21ba:	83 e0       	ldi	r24, 0x03	; 3
    21bc:	89 83       	std	Y+1, r24	; 0x01
    21be:	10 c0       	rjmp	.+32     	; 0x21e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    21c0:	8d e2       	ldi	r24, 0x2D	; 45
    21c2:	89 83       	std	Y+1, r24	; 0x01
    21c4:	0d c0       	rjmp	.+26     	; 0x21e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    21c6:	8d e0       	ldi	r24, 0x0D	; 13
    21c8:	89 83       	std	Y+1, r24	; 0x01
    21ca:	0a c0       	rjmp	.+20     	; 0x21e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    21cc:	19 82       	std	Y+1, r1	; 0x01
    21ce:	08 c0       	rjmp	.+16     	; 0x21e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    21d0:	8d e3       	ldi	r24, 0x3D	; 61
    21d2:	89 83       	std	Y+1, r24	; 0x01
    21d4:	05 c0       	rjmp	.+10     	; 0x21e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    21d6:	8b e2       	ldi	r24, 0x2B	; 43
    21d8:	89 83       	std	Y+1, r24	; 0x01
    21da:	02 c0       	rjmp	.+4      	; 0x21e0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    21dc:	8a 81       	ldd	r24, Y+2	; 0x02
    21de:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    21e0:	89 81       	ldd	r24, Y+1	; 0x01
} 
    21e2:	0f 90       	pop	r0
    21e4:	0f 90       	pop	r0
    21e6:	0f 90       	pop	r0
    21e8:	0f 90       	pop	r0
    21ea:	cf 91       	pop	r28
    21ec:	df 91       	pop	r29
    21ee:	08 95       	ret

000021f0 <LCD_init>:
 * Description :
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void) {
    21f0:	df 93       	push	r29
    21f2:	cf 93       	push	r28
    21f4:	cd b7       	in	r28, 0x3d	; 61
    21f6:	de b7       	in	r29, 0x3e	; 62
    21f8:	2e 97       	sbiw	r28, 0x0e	; 14
    21fa:	0f b6       	in	r0, 0x3f	; 63
    21fc:	f8 94       	cli
    21fe:	de bf       	out	0x3e, r29	; 62
    2200:	0f be       	out	0x3f, r0	; 63
    2202:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    2204:	82 e0       	ldi	r24, 0x02	; 2
    2206:	60 e0       	ldi	r22, 0x00	; 0
    2208:	41 e0       	ldi	r20, 0x01	; 1
    220a:	0e 94 2f 0c 	call	0x185e	; 0x185e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    220e:	82 e0       	ldi	r24, 0x02	; 2
    2210:	61 e0       	ldi	r22, 0x01	; 1
    2212:	41 e0       	ldi	r20, 0x01	; 1
    2214:	0e 94 2f 0c 	call	0x185e	; 0x185e <GPIO_setupPinDirection>
    2218:	80 e0       	ldi	r24, 0x00	; 0
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	a0 ea       	ldi	r26, 0xA0	; 160
    221e:	b1 e4       	ldi	r27, 0x41	; 65
    2220:	8b 87       	std	Y+11, r24	; 0x0b
    2222:	9c 87       	std	Y+12, r25	; 0x0c
    2224:	ad 87       	std	Y+13, r26	; 0x0d
    2226:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2228:	6b 85       	ldd	r22, Y+11	; 0x0b
    222a:	7c 85       	ldd	r23, Y+12	; 0x0c
    222c:	8d 85       	ldd	r24, Y+13	; 0x0d
    222e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	4a ef       	ldi	r20, 0xFA	; 250
    2236:	54 e4       	ldi	r21, 0x44	; 68
    2238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	8f 83       	std	Y+7, r24	; 0x07
    2242:	98 87       	std	Y+8, r25	; 0x08
    2244:	a9 87       	std	Y+9, r26	; 0x09
    2246:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2248:	6f 81       	ldd	r22, Y+7	; 0x07
    224a:	78 85       	ldd	r23, Y+8	; 0x08
    224c:	89 85       	ldd	r24, Y+9	; 0x09
    224e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2250:	20 e0       	ldi	r18, 0x00	; 0
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	40 e8       	ldi	r20, 0x80	; 128
    2256:	5f e3       	ldi	r21, 0x3F	; 63
    2258:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    225c:	88 23       	and	r24, r24
    225e:	2c f4       	brge	.+10     	; 0x226a <LCD_init+0x7a>
		__ticks = 1;
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	9e 83       	std	Y+6, r25	; 0x06
    2266:	8d 83       	std	Y+5, r24	; 0x05
    2268:	3f c0       	rjmp	.+126    	; 0x22e8 <LCD_init+0xf8>
	else if (__tmp > 65535)
    226a:	6f 81       	ldd	r22, Y+7	; 0x07
    226c:	78 85       	ldd	r23, Y+8	; 0x08
    226e:	89 85       	ldd	r24, Y+9	; 0x09
    2270:	9a 85       	ldd	r25, Y+10	; 0x0a
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	3f ef       	ldi	r19, 0xFF	; 255
    2276:	4f e7       	ldi	r20, 0x7F	; 127
    2278:	57 e4       	ldi	r21, 0x47	; 71
    227a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    227e:	18 16       	cp	r1, r24
    2280:	4c f5       	brge	.+82     	; 0x22d4 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2282:	6b 85       	ldd	r22, Y+11	; 0x0b
    2284:	7c 85       	ldd	r23, Y+12	; 0x0c
    2286:	8d 85       	ldd	r24, Y+13	; 0x0d
    2288:	9e 85       	ldd	r25, Y+14	; 0x0e
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	40 e2       	ldi	r20, 0x20	; 32
    2290:	51 e4       	ldi	r21, 0x41	; 65
    2292:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2296:	dc 01       	movw	r26, r24
    2298:	cb 01       	movw	r24, r22
    229a:	bc 01       	movw	r22, r24
    229c:	cd 01       	movw	r24, r26
    229e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	9e 83       	std	Y+6, r25	; 0x06
    22a8:	8d 83       	std	Y+5, r24	; 0x05
    22aa:	0f c0       	rjmp	.+30     	; 0x22ca <LCD_init+0xda>
    22ac:	88 ec       	ldi	r24, 0xC8	; 200
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	9c 83       	std	Y+4, r25	; 0x04
    22b2:	8b 83       	std	Y+3, r24	; 0x03
    22b4:	8b 81       	ldd	r24, Y+3	; 0x03
    22b6:	9c 81       	ldd	r25, Y+4	; 0x04
    22b8:	01 97       	sbiw	r24, 0x01	; 1
    22ba:	f1 f7       	brne	.-4      	; 0x22b8 <LCD_init+0xc8>
    22bc:	9c 83       	std	Y+4, r25	; 0x04
    22be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c0:	8d 81       	ldd	r24, Y+5	; 0x05
    22c2:	9e 81       	ldd	r25, Y+6	; 0x06
    22c4:	01 97       	sbiw	r24, 0x01	; 1
    22c6:	9e 83       	std	Y+6, r25	; 0x06
    22c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ca:	8d 81       	ldd	r24, Y+5	; 0x05
    22cc:	9e 81       	ldd	r25, Y+6	; 0x06
    22ce:	00 97       	sbiw	r24, 0x00	; 0
    22d0:	69 f7       	brne	.-38     	; 0x22ac <LCD_init+0xbc>
    22d2:	14 c0       	rjmp	.+40     	; 0x22fc <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d4:	6f 81       	ldd	r22, Y+7	; 0x07
    22d6:	78 85       	ldd	r23, Y+8	; 0x08
    22d8:	89 85       	ldd	r24, Y+9	; 0x09
    22da:	9a 85       	ldd	r25, Y+10	; 0x0a
    22dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	9e 83       	std	Y+6, r25	; 0x06
    22e6:	8d 83       	std	Y+5, r24	; 0x05
    22e8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ea:	9e 81       	ldd	r25, Y+6	; 0x06
    22ec:	9a 83       	std	Y+2, r25	; 0x02
    22ee:	89 83       	std	Y+1, r24	; 0x01
    22f0:	89 81       	ldd	r24, Y+1	; 0x01
    22f2:	9a 81       	ldd	r25, Y+2	; 0x02
    22f4:	01 97       	sbiw	r24, 0x01	; 1
    22f6:	f1 f7       	brne	.-4      	; 0x22f4 <LCD_init+0x104>
    22f8:	9a 83       	std	Y+2, r25	; 0x02
    22fa:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	6f ef       	ldi	r22, 0xFF	; 255
    2300:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2304:	88 e3       	ldi	r24, 0x38	; 56
    2306:	0e 94 94 11 	call	0x2328	; 0x2328 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    230a:	8c e0       	ldi	r24, 0x0C	; 12
    230c:	0e 94 94 11 	call	0x2328	; 0x2328 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	0e 94 94 11 	call	0x2328	; 0x2328 <LCD_sendCommand>
}
    2316:	2e 96       	adiw	r28, 0x0e	; 14
    2318:	0f b6       	in	r0, 0x3f	; 63
    231a:	f8 94       	cli
    231c:	de bf       	out	0x3e, r29	; 62
    231e:	0f be       	out	0x3f, r0	; 63
    2320:	cd bf       	out	0x3d, r28	; 61
    2322:	cf 91       	pop	r28
    2324:	df 91       	pop	r29
    2326:	08 95       	ret

00002328 <LCD_sendCommand>:

/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command) {
    2328:	df 93       	push	r29
    232a:	cf 93       	push	r28
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
    2330:	e9 97       	sbiw	r28, 0x39	; 57
    2332:	0f b6       	in	r0, 0x3f	; 63
    2334:	f8 94       	cli
    2336:	de bf       	out	0x3e, r29	; 62
    2338:	0f be       	out	0x3f, r0	; 63
    233a:	cd bf       	out	0x3d, r28	; 61
    233c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW); /* Instruction Mode RS=0 */
    233e:	82 e0       	ldi	r24, 0x02	; 2
    2340:	60 e0       	ldi	r22, 0x00	; 0
    2342:	40 e0       	ldi	r20, 0x00	; 0
    2344:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <GPIO_writePin>
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	a0 e8       	ldi	r26, 0x80	; 128
    234e:	bf e3       	ldi	r27, 0x3F	; 63
    2350:	8d ab       	std	Y+53, r24	; 0x35
    2352:	9e ab       	std	Y+54, r25	; 0x36
    2354:	af ab       	std	Y+55, r26	; 0x37
    2356:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2358:	6d a9       	ldd	r22, Y+53	; 0x35
    235a:	7e a9       	ldd	r23, Y+54	; 0x36
    235c:	8f a9       	ldd	r24, Y+55	; 0x37
    235e:	98 ad       	ldd	r25, Y+56	; 0x38
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	4a ef       	ldi	r20, 0xFA	; 250
    2366:	54 e4       	ldi	r21, 0x44	; 68
    2368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	89 ab       	std	Y+49, r24	; 0x31
    2372:	9a ab       	std	Y+50, r25	; 0x32
    2374:	ab ab       	std	Y+51, r26	; 0x33
    2376:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2378:	69 a9       	ldd	r22, Y+49	; 0x31
    237a:	7a a9       	ldd	r23, Y+50	; 0x32
    237c:	8b a9       	ldd	r24, Y+51	; 0x33
    237e:	9c a9       	ldd	r25, Y+52	; 0x34
    2380:	20 e0       	ldi	r18, 0x00	; 0
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	40 e8       	ldi	r20, 0x80	; 128
    2386:	5f e3       	ldi	r21, 0x3F	; 63
    2388:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    238c:	88 23       	and	r24, r24
    238e:	2c f4       	brge	.+10     	; 0x239a <LCD_sendCommand+0x72>
		__ticks = 1;
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	98 ab       	std	Y+48, r25	; 0x30
    2396:	8f a7       	std	Y+47, r24	; 0x2f
    2398:	3f c0       	rjmp	.+126    	; 0x2418 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    239a:	69 a9       	ldd	r22, Y+49	; 0x31
    239c:	7a a9       	ldd	r23, Y+50	; 0x32
    239e:	8b a9       	ldd	r24, Y+51	; 0x33
    23a0:	9c a9       	ldd	r25, Y+52	; 0x34
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	3f ef       	ldi	r19, 0xFF	; 255
    23a6:	4f e7       	ldi	r20, 0x7F	; 127
    23a8:	57 e4       	ldi	r21, 0x47	; 71
    23aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23ae:	18 16       	cp	r1, r24
    23b0:	4c f5       	brge	.+82     	; 0x2404 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b2:	6d a9       	ldd	r22, Y+53	; 0x35
    23b4:	7e a9       	ldd	r23, Y+54	; 0x36
    23b6:	8f a9       	ldd	r24, Y+55	; 0x37
    23b8:	98 ad       	ldd	r25, Y+56	; 0x38
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	40 e2       	ldi	r20, 0x20	; 32
    23c0:	51 e4       	ldi	r21, 0x41	; 65
    23c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	bc 01       	movw	r22, r24
    23cc:	cd 01       	movw	r24, r26
    23ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	98 ab       	std	Y+48, r25	; 0x30
    23d8:	8f a7       	std	Y+47, r24	; 0x2f
    23da:	0f c0       	rjmp	.+30     	; 0x23fa <LCD_sendCommand+0xd2>
    23dc:	88 ec       	ldi	r24, 0xC8	; 200
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	9e a7       	std	Y+46, r25	; 0x2e
    23e2:	8d a7       	std	Y+45, r24	; 0x2d
    23e4:	8d a5       	ldd	r24, Y+45	; 0x2d
    23e6:	9e a5       	ldd	r25, Y+46	; 0x2e
    23e8:	01 97       	sbiw	r24, 0x01	; 1
    23ea:	f1 f7       	brne	.-4      	; 0x23e8 <LCD_sendCommand+0xc0>
    23ec:	9e a7       	std	Y+46, r25	; 0x2e
    23ee:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    23f2:	98 a9       	ldd	r25, Y+48	; 0x30
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	98 ab       	std	Y+48, r25	; 0x30
    23f8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    23fc:	98 a9       	ldd	r25, Y+48	; 0x30
    23fe:	00 97       	sbiw	r24, 0x00	; 0
    2400:	69 f7       	brne	.-38     	; 0x23dc <LCD_sendCommand+0xb4>
    2402:	14 c0       	rjmp	.+40     	; 0x242c <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2404:	69 a9       	ldd	r22, Y+49	; 0x31
    2406:	7a a9       	ldd	r23, Y+50	; 0x32
    2408:	8b a9       	ldd	r24, Y+51	; 0x33
    240a:	9c a9       	ldd	r25, Y+52	; 0x34
    240c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	98 ab       	std	Y+48, r25	; 0x30
    2416:	8f a7       	std	Y+47, r24	; 0x2f
    2418:	8f a5       	ldd	r24, Y+47	; 0x2f
    241a:	98 a9       	ldd	r25, Y+48	; 0x30
    241c:	9c a7       	std	Y+44, r25	; 0x2c
    241e:	8b a7       	std	Y+43, r24	; 0x2b
    2420:	8b a5       	ldd	r24, Y+43	; 0x2b
    2422:	9c a5       	ldd	r25, Y+44	; 0x2c
    2424:	01 97       	sbiw	r24, 0x01	; 1
    2426:	f1 f7       	brne	.-4      	; 0x2424 <LCD_sendCommand+0xfc>
    2428:	9c a7       	std	Y+44, r25	; 0x2c
    242a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    242c:	82 e0       	ldi	r24, 0x02	; 2
    242e:	61 e0       	ldi	r22, 0x01	; 1
    2430:	41 e0       	ldi	r20, 0x01	; 1
    2432:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <GPIO_writePin>
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	a0 e8       	ldi	r26, 0x80	; 128
    243c:	bf e3       	ldi	r27, 0x3F	; 63
    243e:	8f a3       	std	Y+39, r24	; 0x27
    2440:	98 a7       	std	Y+40, r25	; 0x28
    2442:	a9 a7       	std	Y+41, r26	; 0x29
    2444:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2446:	6f a1       	ldd	r22, Y+39	; 0x27
    2448:	78 a5       	ldd	r23, Y+40	; 0x28
    244a:	89 a5       	ldd	r24, Y+41	; 0x29
    244c:	9a a5       	ldd	r25, Y+42	; 0x2a
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	4a ef       	ldi	r20, 0xFA	; 250
    2454:	54 e4       	ldi	r21, 0x44	; 68
    2456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	8b a3       	std	Y+35, r24	; 0x23
    2460:	9c a3       	std	Y+36, r25	; 0x24
    2462:	ad a3       	std	Y+37, r26	; 0x25
    2464:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2466:	6b a1       	ldd	r22, Y+35	; 0x23
    2468:	7c a1       	ldd	r23, Y+36	; 0x24
    246a:	8d a1       	ldd	r24, Y+37	; 0x25
    246c:	9e a1       	ldd	r25, Y+38	; 0x26
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	40 e8       	ldi	r20, 0x80	; 128
    2474:	5f e3       	ldi	r21, 0x3F	; 63
    2476:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    247a:	88 23       	and	r24, r24
    247c:	2c f4       	brge	.+10     	; 0x2488 <LCD_sendCommand+0x160>
		__ticks = 1;
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	9a a3       	std	Y+34, r25	; 0x22
    2484:	89 a3       	std	Y+33, r24	; 0x21
    2486:	3f c0       	rjmp	.+126    	; 0x2506 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2488:	6b a1       	ldd	r22, Y+35	; 0x23
    248a:	7c a1       	ldd	r23, Y+36	; 0x24
    248c:	8d a1       	ldd	r24, Y+37	; 0x25
    248e:	9e a1       	ldd	r25, Y+38	; 0x26
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	3f ef       	ldi	r19, 0xFF	; 255
    2494:	4f e7       	ldi	r20, 0x7F	; 127
    2496:	57 e4       	ldi	r21, 0x47	; 71
    2498:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    249c:	18 16       	cp	r1, r24
    249e:	4c f5       	brge	.+82     	; 0x24f2 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a0:	6f a1       	ldd	r22, Y+39	; 0x27
    24a2:	78 a5       	ldd	r23, Y+40	; 0x28
    24a4:	89 a5       	ldd	r24, Y+41	; 0x29
    24a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	40 e2       	ldi	r20, 0x20	; 32
    24ae:	51 e4       	ldi	r21, 0x41	; 65
    24b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	bc 01       	movw	r22, r24
    24ba:	cd 01       	movw	r24, r26
    24bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	9a a3       	std	Y+34, r25	; 0x22
    24c6:	89 a3       	std	Y+33, r24	; 0x21
    24c8:	0f c0       	rjmp	.+30     	; 0x24e8 <LCD_sendCommand+0x1c0>
    24ca:	88 ec       	ldi	r24, 0xC8	; 200
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	98 a3       	std	Y+32, r25	; 0x20
    24d0:	8f 8f       	std	Y+31, r24	; 0x1f
    24d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24d4:	98 a1       	ldd	r25, Y+32	; 0x20
    24d6:	01 97       	sbiw	r24, 0x01	; 1
    24d8:	f1 f7       	brne	.-4      	; 0x24d6 <LCD_sendCommand+0x1ae>
    24da:	98 a3       	std	Y+32, r25	; 0x20
    24dc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24de:	89 a1       	ldd	r24, Y+33	; 0x21
    24e0:	9a a1       	ldd	r25, Y+34	; 0x22
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	9a a3       	std	Y+34, r25	; 0x22
    24e6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e8:	89 a1       	ldd	r24, Y+33	; 0x21
    24ea:	9a a1       	ldd	r25, Y+34	; 0x22
    24ec:	00 97       	sbiw	r24, 0x00	; 0
    24ee:	69 f7       	brne	.-38     	; 0x24ca <LCD_sendCommand+0x1a2>
    24f0:	14 c0       	rjmp	.+40     	; 0x251a <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f2:	6b a1       	ldd	r22, Y+35	; 0x23
    24f4:	7c a1       	ldd	r23, Y+36	; 0x24
    24f6:	8d a1       	ldd	r24, Y+37	; 0x25
    24f8:	9e a1       	ldd	r25, Y+38	; 0x26
    24fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	9a a3       	std	Y+34, r25	; 0x22
    2504:	89 a3       	std	Y+33, r24	; 0x21
    2506:	89 a1       	ldd	r24, Y+33	; 0x21
    2508:	9a a1       	ldd	r25, Y+34	; 0x22
    250a:	9e 8f       	std	Y+30, r25	; 0x1e
    250c:	8d 8f       	std	Y+29, r24	; 0x1d
    250e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2510:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2512:	01 97       	sbiw	r24, 0x01	; 1
    2514:	f1 f7       	brne	.-4      	; 0x2512 <LCD_sendCommand+0x1ea>
    2516:	9e 8f       	std	Y+30, r25	; 0x1e
    2518:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID, command); /* out the required command to the data bus D0 --> D7 */
    251a:	80 e0       	ldi	r24, 0x00	; 0
    251c:	69 ad       	ldd	r22, Y+57	; 0x39
    251e:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <GPIO_writePort>
    2522:	80 e0       	ldi	r24, 0x00	; 0
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	a0 e8       	ldi	r26, 0x80	; 128
    2528:	bf e3       	ldi	r27, 0x3F	; 63
    252a:	89 8f       	std	Y+25, r24	; 0x19
    252c:	9a 8f       	std	Y+26, r25	; 0x1a
    252e:	ab 8f       	std	Y+27, r26	; 0x1b
    2530:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2532:	69 8d       	ldd	r22, Y+25	; 0x19
    2534:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2536:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2538:	9c 8d       	ldd	r25, Y+28	; 0x1c
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	4a ef       	ldi	r20, 0xFA	; 250
    2540:	54 e4       	ldi	r21, 0x44	; 68
    2542:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	8d 8b       	std	Y+21, r24	; 0x15
    254c:	9e 8b       	std	Y+22, r25	; 0x16
    254e:	af 8b       	std	Y+23, r26	; 0x17
    2550:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2552:	6d 89       	ldd	r22, Y+21	; 0x15
    2554:	7e 89       	ldd	r23, Y+22	; 0x16
    2556:	8f 89       	ldd	r24, Y+23	; 0x17
    2558:	98 8d       	ldd	r25, Y+24	; 0x18
    255a:	20 e0       	ldi	r18, 0x00	; 0
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	40 e8       	ldi	r20, 0x80	; 128
    2560:	5f e3       	ldi	r21, 0x3F	; 63
    2562:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2566:	88 23       	and	r24, r24
    2568:	2c f4       	brge	.+10     	; 0x2574 <LCD_sendCommand+0x24c>
		__ticks = 1;
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	9c 8b       	std	Y+20, r25	; 0x14
    2570:	8b 8b       	std	Y+19, r24	; 0x13
    2572:	3f c0       	rjmp	.+126    	; 0x25f2 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2574:	6d 89       	ldd	r22, Y+21	; 0x15
    2576:	7e 89       	ldd	r23, Y+22	; 0x16
    2578:	8f 89       	ldd	r24, Y+23	; 0x17
    257a:	98 8d       	ldd	r25, Y+24	; 0x18
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	3f ef       	ldi	r19, 0xFF	; 255
    2580:	4f e7       	ldi	r20, 0x7F	; 127
    2582:	57 e4       	ldi	r21, 0x47	; 71
    2584:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2588:	18 16       	cp	r1, r24
    258a:	4c f5       	brge	.+82     	; 0x25de <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    258c:	69 8d       	ldd	r22, Y+25	; 0x19
    258e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2590:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2592:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	40 e2       	ldi	r20, 0x20	; 32
    259a:	51 e4       	ldi	r21, 0x41	; 65
    259c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a0:	dc 01       	movw	r26, r24
    25a2:	cb 01       	movw	r24, r22
    25a4:	bc 01       	movw	r22, r24
    25a6:	cd 01       	movw	r24, r26
    25a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	9c 8b       	std	Y+20, r25	; 0x14
    25b2:	8b 8b       	std	Y+19, r24	; 0x13
    25b4:	0f c0       	rjmp	.+30     	; 0x25d4 <LCD_sendCommand+0x2ac>
    25b6:	88 ec       	ldi	r24, 0xC8	; 200
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	9a 8b       	std	Y+18, r25	; 0x12
    25bc:	89 8b       	std	Y+17, r24	; 0x11
    25be:	89 89       	ldd	r24, Y+17	; 0x11
    25c0:	9a 89       	ldd	r25, Y+18	; 0x12
    25c2:	01 97       	sbiw	r24, 0x01	; 1
    25c4:	f1 f7       	brne	.-4      	; 0x25c2 <LCD_sendCommand+0x29a>
    25c6:	9a 8b       	std	Y+18, r25	; 0x12
    25c8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ca:	8b 89       	ldd	r24, Y+19	; 0x13
    25cc:	9c 89       	ldd	r25, Y+20	; 0x14
    25ce:	01 97       	sbiw	r24, 0x01	; 1
    25d0:	9c 8b       	std	Y+20, r25	; 0x14
    25d2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25d4:	8b 89       	ldd	r24, Y+19	; 0x13
    25d6:	9c 89       	ldd	r25, Y+20	; 0x14
    25d8:	00 97       	sbiw	r24, 0x00	; 0
    25da:	69 f7       	brne	.-38     	; 0x25b6 <LCD_sendCommand+0x28e>
    25dc:	14 c0       	rjmp	.+40     	; 0x2606 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25de:	6d 89       	ldd	r22, Y+21	; 0x15
    25e0:	7e 89       	ldd	r23, Y+22	; 0x16
    25e2:	8f 89       	ldd	r24, Y+23	; 0x17
    25e4:	98 8d       	ldd	r25, Y+24	; 0x18
    25e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ea:	dc 01       	movw	r26, r24
    25ec:	cb 01       	movw	r24, r22
    25ee:	9c 8b       	std	Y+20, r25	; 0x14
    25f0:	8b 8b       	std	Y+19, r24	; 0x13
    25f2:	8b 89       	ldd	r24, Y+19	; 0x13
    25f4:	9c 89       	ldd	r25, Y+20	; 0x14
    25f6:	98 8b       	std	Y+16, r25	; 0x10
    25f8:	8f 87       	std	Y+15, r24	; 0x0f
    25fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    25fc:	98 89       	ldd	r25, Y+16	; 0x10
    25fe:	01 97       	sbiw	r24, 0x01	; 1
    2600:	f1 f7       	brne	.-4      	; 0x25fe <LCD_sendCommand+0x2d6>
    2602:	98 8b       	std	Y+16, r25	; 0x10
    2604:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    2606:	82 e0       	ldi	r24, 0x02	; 2
    2608:	61 e0       	ldi	r22, 0x01	; 1
    260a:	40 e0       	ldi	r20, 0x00	; 0
    260c:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <GPIO_writePin>
    2610:	80 e0       	ldi	r24, 0x00	; 0
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	a0 e8       	ldi	r26, 0x80	; 128
    2616:	bf e3       	ldi	r27, 0x3F	; 63
    2618:	8b 87       	std	Y+11, r24	; 0x0b
    261a:	9c 87       	std	Y+12, r25	; 0x0c
    261c:	ad 87       	std	Y+13, r26	; 0x0d
    261e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2620:	6b 85       	ldd	r22, Y+11	; 0x0b
    2622:	7c 85       	ldd	r23, Y+12	; 0x0c
    2624:	8d 85       	ldd	r24, Y+13	; 0x0d
    2626:	9e 85       	ldd	r25, Y+14	; 0x0e
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	4a ef       	ldi	r20, 0xFA	; 250
    262e:	54 e4       	ldi	r21, 0x44	; 68
    2630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	8f 83       	std	Y+7, r24	; 0x07
    263a:	98 87       	std	Y+8, r25	; 0x08
    263c:	a9 87       	std	Y+9, r26	; 0x09
    263e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2640:	6f 81       	ldd	r22, Y+7	; 0x07
    2642:	78 85       	ldd	r23, Y+8	; 0x08
    2644:	89 85       	ldd	r24, Y+9	; 0x09
    2646:	9a 85       	ldd	r25, Y+10	; 0x0a
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	40 e8       	ldi	r20, 0x80	; 128
    264e:	5f e3       	ldi	r21, 0x3F	; 63
    2650:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2654:	88 23       	and	r24, r24
    2656:	2c f4       	brge	.+10     	; 0x2662 <LCD_sendCommand+0x33a>
		__ticks = 1;
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	9e 83       	std	Y+6, r25	; 0x06
    265e:	8d 83       	std	Y+5, r24	; 0x05
    2660:	3f c0       	rjmp	.+126    	; 0x26e0 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2662:	6f 81       	ldd	r22, Y+7	; 0x07
    2664:	78 85       	ldd	r23, Y+8	; 0x08
    2666:	89 85       	ldd	r24, Y+9	; 0x09
    2668:	9a 85       	ldd	r25, Y+10	; 0x0a
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	3f ef       	ldi	r19, 0xFF	; 255
    266e:	4f e7       	ldi	r20, 0x7F	; 127
    2670:	57 e4       	ldi	r21, 0x47	; 71
    2672:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2676:	18 16       	cp	r1, r24
    2678:	4c f5       	brge	.+82     	; 0x26cc <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    267a:	6b 85       	ldd	r22, Y+11	; 0x0b
    267c:	7c 85       	ldd	r23, Y+12	; 0x0c
    267e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2680:	9e 85       	ldd	r25, Y+14	; 0x0e
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	40 e2       	ldi	r20, 0x20	; 32
    2688:	51 e4       	ldi	r21, 0x41	; 65
    268a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	bc 01       	movw	r22, r24
    2694:	cd 01       	movw	r24, r26
    2696:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	9e 83       	std	Y+6, r25	; 0x06
    26a0:	8d 83       	std	Y+5, r24	; 0x05
    26a2:	0f c0       	rjmp	.+30     	; 0x26c2 <LCD_sendCommand+0x39a>
    26a4:	88 ec       	ldi	r24, 0xC8	; 200
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	9c 83       	std	Y+4, r25	; 0x04
    26aa:	8b 83       	std	Y+3, r24	; 0x03
    26ac:	8b 81       	ldd	r24, Y+3	; 0x03
    26ae:	9c 81       	ldd	r25, Y+4	; 0x04
    26b0:	01 97       	sbiw	r24, 0x01	; 1
    26b2:	f1 f7       	brne	.-4      	; 0x26b0 <LCD_sendCommand+0x388>
    26b4:	9c 83       	std	Y+4, r25	; 0x04
    26b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ba:	9e 81       	ldd	r25, Y+6	; 0x06
    26bc:	01 97       	sbiw	r24, 0x01	; 1
    26be:	9e 83       	std	Y+6, r25	; 0x06
    26c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c2:	8d 81       	ldd	r24, Y+5	; 0x05
    26c4:	9e 81       	ldd	r25, Y+6	; 0x06
    26c6:	00 97       	sbiw	r24, 0x00	; 0
    26c8:	69 f7       	brne	.-38     	; 0x26a4 <LCD_sendCommand+0x37c>
    26ca:	14 c0       	rjmp	.+40     	; 0x26f4 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26cc:	6f 81       	ldd	r22, Y+7	; 0x07
    26ce:	78 85       	ldd	r23, Y+8	; 0x08
    26d0:	89 85       	ldd	r24, Y+9	; 0x09
    26d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d8:	dc 01       	movw	r26, r24
    26da:	cb 01       	movw	r24, r22
    26dc:	9e 83       	std	Y+6, r25	; 0x06
    26de:	8d 83       	std	Y+5, r24	; 0x05
    26e0:	8d 81       	ldd	r24, Y+5	; 0x05
    26e2:	9e 81       	ldd	r25, Y+6	; 0x06
    26e4:	9a 83       	std	Y+2, r25	; 0x02
    26e6:	89 83       	std	Y+1, r24	; 0x01
    26e8:	89 81       	ldd	r24, Y+1	; 0x01
    26ea:	9a 81       	ldd	r25, Y+2	; 0x02
    26ec:	01 97       	sbiw	r24, 0x01	; 1
    26ee:	f1 f7       	brne	.-4      	; 0x26ec <LCD_sendCommand+0x3c4>
    26f0:	9a 83       	std	Y+2, r25	; 0x02
    26f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    26f4:	e9 96       	adiw	r28, 0x39	; 57
    26f6:	0f b6       	in	r0, 0x3f	; 63
    26f8:	f8 94       	cli
    26fa:	de bf       	out	0x3e, r29	; 62
    26fc:	0f be       	out	0x3f, r0	; 63
    26fe:	cd bf       	out	0x3d, r28	; 61
    2700:	cf 91       	pop	r28
    2702:	df 91       	pop	r29
    2704:	08 95       	ret

00002706 <LCD_displayCharacter>:

/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data) {
    2706:	df 93       	push	r29
    2708:	cf 93       	push	r28
    270a:	cd b7       	in	r28, 0x3d	; 61
    270c:	de b7       	in	r29, 0x3e	; 62
    270e:	e9 97       	sbiw	r28, 0x39	; 57
    2710:	0f b6       	in	r0, 0x3f	; 63
    2712:	f8 94       	cli
    2714:	de bf       	out	0x3e, r29	; 62
    2716:	0f be       	out	0x3f, r0	; 63
    2718:	cd bf       	out	0x3d, r28	; 61
    271a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH); /* Data Mode RS=1 */
    271c:	82 e0       	ldi	r24, 0x02	; 2
    271e:	60 e0       	ldi	r22, 0x00	; 0
    2720:	41 e0       	ldi	r20, 0x01	; 1
    2722:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <GPIO_writePin>
    2726:	80 e0       	ldi	r24, 0x00	; 0
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	a0 e8       	ldi	r26, 0x80	; 128
    272c:	bf e3       	ldi	r27, 0x3F	; 63
    272e:	8d ab       	std	Y+53, r24	; 0x35
    2730:	9e ab       	std	Y+54, r25	; 0x36
    2732:	af ab       	std	Y+55, r26	; 0x37
    2734:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2736:	6d a9       	ldd	r22, Y+53	; 0x35
    2738:	7e a9       	ldd	r23, Y+54	; 0x36
    273a:	8f a9       	ldd	r24, Y+55	; 0x37
    273c:	98 ad       	ldd	r25, Y+56	; 0x38
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	4a ef       	ldi	r20, 0xFA	; 250
    2744:	54 e4       	ldi	r21, 0x44	; 68
    2746:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    274a:	dc 01       	movw	r26, r24
    274c:	cb 01       	movw	r24, r22
    274e:	89 ab       	std	Y+49, r24	; 0x31
    2750:	9a ab       	std	Y+50, r25	; 0x32
    2752:	ab ab       	std	Y+51, r26	; 0x33
    2754:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2756:	69 a9       	ldd	r22, Y+49	; 0x31
    2758:	7a a9       	ldd	r23, Y+50	; 0x32
    275a:	8b a9       	ldd	r24, Y+51	; 0x33
    275c:	9c a9       	ldd	r25, Y+52	; 0x34
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	40 e8       	ldi	r20, 0x80	; 128
    2764:	5f e3       	ldi	r21, 0x3F	; 63
    2766:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    276a:	88 23       	and	r24, r24
    276c:	2c f4       	brge	.+10     	; 0x2778 <LCD_displayCharacter+0x72>
		__ticks = 1;
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	98 ab       	std	Y+48, r25	; 0x30
    2774:	8f a7       	std	Y+47, r24	; 0x2f
    2776:	3f c0       	rjmp	.+126    	; 0x27f6 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2778:	69 a9       	ldd	r22, Y+49	; 0x31
    277a:	7a a9       	ldd	r23, Y+50	; 0x32
    277c:	8b a9       	ldd	r24, Y+51	; 0x33
    277e:	9c a9       	ldd	r25, Y+52	; 0x34
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	3f ef       	ldi	r19, 0xFF	; 255
    2784:	4f e7       	ldi	r20, 0x7F	; 127
    2786:	57 e4       	ldi	r21, 0x47	; 71
    2788:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    278c:	18 16       	cp	r1, r24
    278e:	4c f5       	brge	.+82     	; 0x27e2 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2790:	6d a9       	ldd	r22, Y+53	; 0x35
    2792:	7e a9       	ldd	r23, Y+54	; 0x36
    2794:	8f a9       	ldd	r24, Y+55	; 0x37
    2796:	98 ad       	ldd	r25, Y+56	; 0x38
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	40 e2       	ldi	r20, 0x20	; 32
    279e:	51 e4       	ldi	r21, 0x41	; 65
    27a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	bc 01       	movw	r22, r24
    27aa:	cd 01       	movw	r24, r26
    27ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	98 ab       	std	Y+48, r25	; 0x30
    27b6:	8f a7       	std	Y+47, r24	; 0x2f
    27b8:	0f c0       	rjmp	.+30     	; 0x27d8 <LCD_displayCharacter+0xd2>
    27ba:	88 ec       	ldi	r24, 0xC8	; 200
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	9e a7       	std	Y+46, r25	; 0x2e
    27c0:	8d a7       	std	Y+45, r24	; 0x2d
    27c2:	8d a5       	ldd	r24, Y+45	; 0x2d
    27c4:	9e a5       	ldd	r25, Y+46	; 0x2e
    27c6:	01 97       	sbiw	r24, 0x01	; 1
    27c8:	f1 f7       	brne	.-4      	; 0x27c6 <LCD_displayCharacter+0xc0>
    27ca:	9e a7       	std	Y+46, r25	; 0x2e
    27cc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    27d0:	98 a9       	ldd	r25, Y+48	; 0x30
    27d2:	01 97       	sbiw	r24, 0x01	; 1
    27d4:	98 ab       	std	Y+48, r25	; 0x30
    27d6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    27da:	98 a9       	ldd	r25, Y+48	; 0x30
    27dc:	00 97       	sbiw	r24, 0x00	; 0
    27de:	69 f7       	brne	.-38     	; 0x27ba <LCD_displayCharacter+0xb4>
    27e0:	14 c0       	rjmp	.+40     	; 0x280a <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27e2:	69 a9       	ldd	r22, Y+49	; 0x31
    27e4:	7a a9       	ldd	r23, Y+50	; 0x32
    27e6:	8b a9       	ldd	r24, Y+51	; 0x33
    27e8:	9c a9       	ldd	r25, Y+52	; 0x34
    27ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ee:	dc 01       	movw	r26, r24
    27f0:	cb 01       	movw	r24, r22
    27f2:	98 ab       	std	Y+48, r25	; 0x30
    27f4:	8f a7       	std	Y+47, r24	; 0x2f
    27f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    27f8:	98 a9       	ldd	r25, Y+48	; 0x30
    27fa:	9c a7       	std	Y+44, r25	; 0x2c
    27fc:	8b a7       	std	Y+43, r24	; 0x2b
    27fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    2800:	9c a5       	ldd	r25, Y+44	; 0x2c
    2802:	01 97       	sbiw	r24, 0x01	; 1
    2804:	f1 f7       	brne	.-4      	; 0x2802 <LCD_displayCharacter+0xfc>
    2806:	9c a7       	std	Y+44, r25	; 0x2c
    2808:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    280a:	82 e0       	ldi	r24, 0x02	; 2
    280c:	61 e0       	ldi	r22, 0x01	; 1
    280e:	41 e0       	ldi	r20, 0x01	; 1
    2810:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <GPIO_writePin>
    2814:	80 e0       	ldi	r24, 0x00	; 0
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	a0 e8       	ldi	r26, 0x80	; 128
    281a:	bf e3       	ldi	r27, 0x3F	; 63
    281c:	8f a3       	std	Y+39, r24	; 0x27
    281e:	98 a7       	std	Y+40, r25	; 0x28
    2820:	a9 a7       	std	Y+41, r26	; 0x29
    2822:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2824:	6f a1       	ldd	r22, Y+39	; 0x27
    2826:	78 a5       	ldd	r23, Y+40	; 0x28
    2828:	89 a5       	ldd	r24, Y+41	; 0x29
    282a:	9a a5       	ldd	r25, Y+42	; 0x2a
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	4a ef       	ldi	r20, 0xFA	; 250
    2832:	54 e4       	ldi	r21, 0x44	; 68
    2834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2838:	dc 01       	movw	r26, r24
    283a:	cb 01       	movw	r24, r22
    283c:	8b a3       	std	Y+35, r24	; 0x23
    283e:	9c a3       	std	Y+36, r25	; 0x24
    2840:	ad a3       	std	Y+37, r26	; 0x25
    2842:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2844:	6b a1       	ldd	r22, Y+35	; 0x23
    2846:	7c a1       	ldd	r23, Y+36	; 0x24
    2848:	8d a1       	ldd	r24, Y+37	; 0x25
    284a:	9e a1       	ldd	r25, Y+38	; 0x26
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	40 e8       	ldi	r20, 0x80	; 128
    2852:	5f e3       	ldi	r21, 0x3F	; 63
    2854:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2858:	88 23       	and	r24, r24
    285a:	2c f4       	brge	.+10     	; 0x2866 <LCD_displayCharacter+0x160>
		__ticks = 1;
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	9a a3       	std	Y+34, r25	; 0x22
    2862:	89 a3       	std	Y+33, r24	; 0x21
    2864:	3f c0       	rjmp	.+126    	; 0x28e4 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2866:	6b a1       	ldd	r22, Y+35	; 0x23
    2868:	7c a1       	ldd	r23, Y+36	; 0x24
    286a:	8d a1       	ldd	r24, Y+37	; 0x25
    286c:	9e a1       	ldd	r25, Y+38	; 0x26
    286e:	20 e0       	ldi	r18, 0x00	; 0
    2870:	3f ef       	ldi	r19, 0xFF	; 255
    2872:	4f e7       	ldi	r20, 0x7F	; 127
    2874:	57 e4       	ldi	r21, 0x47	; 71
    2876:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    287a:	18 16       	cp	r1, r24
    287c:	4c f5       	brge	.+82     	; 0x28d0 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    287e:	6f a1       	ldd	r22, Y+39	; 0x27
    2880:	78 a5       	ldd	r23, Y+40	; 0x28
    2882:	89 a5       	ldd	r24, Y+41	; 0x29
    2884:	9a a5       	ldd	r25, Y+42	; 0x2a
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	40 e2       	ldi	r20, 0x20	; 32
    288c:	51 e4       	ldi	r21, 0x41	; 65
    288e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2892:	dc 01       	movw	r26, r24
    2894:	cb 01       	movw	r24, r22
    2896:	bc 01       	movw	r22, r24
    2898:	cd 01       	movw	r24, r26
    289a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    289e:	dc 01       	movw	r26, r24
    28a0:	cb 01       	movw	r24, r22
    28a2:	9a a3       	std	Y+34, r25	; 0x22
    28a4:	89 a3       	std	Y+33, r24	; 0x21
    28a6:	0f c0       	rjmp	.+30     	; 0x28c6 <LCD_displayCharacter+0x1c0>
    28a8:	88 ec       	ldi	r24, 0xC8	; 200
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	98 a3       	std	Y+32, r25	; 0x20
    28ae:	8f 8f       	std	Y+31, r24	; 0x1f
    28b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28b2:	98 a1       	ldd	r25, Y+32	; 0x20
    28b4:	01 97       	sbiw	r24, 0x01	; 1
    28b6:	f1 f7       	brne	.-4      	; 0x28b4 <LCD_displayCharacter+0x1ae>
    28b8:	98 a3       	std	Y+32, r25	; 0x20
    28ba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28bc:	89 a1       	ldd	r24, Y+33	; 0x21
    28be:	9a a1       	ldd	r25, Y+34	; 0x22
    28c0:	01 97       	sbiw	r24, 0x01	; 1
    28c2:	9a a3       	std	Y+34, r25	; 0x22
    28c4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c6:	89 a1       	ldd	r24, Y+33	; 0x21
    28c8:	9a a1       	ldd	r25, Y+34	; 0x22
    28ca:	00 97       	sbiw	r24, 0x00	; 0
    28cc:	69 f7       	brne	.-38     	; 0x28a8 <LCD_displayCharacter+0x1a2>
    28ce:	14 c0       	rjmp	.+40     	; 0x28f8 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d0:	6b a1       	ldd	r22, Y+35	; 0x23
    28d2:	7c a1       	ldd	r23, Y+36	; 0x24
    28d4:	8d a1       	ldd	r24, Y+37	; 0x25
    28d6:	9e a1       	ldd	r25, Y+38	; 0x26
    28d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	9a a3       	std	Y+34, r25	; 0x22
    28e2:	89 a3       	std	Y+33, r24	; 0x21
    28e4:	89 a1       	ldd	r24, Y+33	; 0x21
    28e6:	9a a1       	ldd	r25, Y+34	; 0x22
    28e8:	9e 8f       	std	Y+30, r25	; 0x1e
    28ea:	8d 8f       	std	Y+29, r24	; 0x1d
    28ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    28f0:	01 97       	sbiw	r24, 0x01	; 1
    28f2:	f1 f7       	brne	.-4      	; 0x28f0 <LCD_displayCharacter+0x1ea>
    28f4:	9e 8f       	std	Y+30, r25	; 0x1e
    28f6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID, data); /* out the required command to the data bus D0 --> D7 */
    28f8:	80 e0       	ldi	r24, 0x00	; 0
    28fa:	69 ad       	ldd	r22, Y+57	; 0x39
    28fc:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <GPIO_writePort>
    2900:	80 e0       	ldi	r24, 0x00	; 0
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	a0 e8       	ldi	r26, 0x80	; 128
    2906:	bf e3       	ldi	r27, 0x3F	; 63
    2908:	89 8f       	std	Y+25, r24	; 0x19
    290a:	9a 8f       	std	Y+26, r25	; 0x1a
    290c:	ab 8f       	std	Y+27, r26	; 0x1b
    290e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2910:	69 8d       	ldd	r22, Y+25	; 0x19
    2912:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2914:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2916:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2918:	20 e0       	ldi	r18, 0x00	; 0
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	4a ef       	ldi	r20, 0xFA	; 250
    291e:	54 e4       	ldi	r21, 0x44	; 68
    2920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2924:	dc 01       	movw	r26, r24
    2926:	cb 01       	movw	r24, r22
    2928:	8d 8b       	std	Y+21, r24	; 0x15
    292a:	9e 8b       	std	Y+22, r25	; 0x16
    292c:	af 8b       	std	Y+23, r26	; 0x17
    292e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2930:	6d 89       	ldd	r22, Y+21	; 0x15
    2932:	7e 89       	ldd	r23, Y+22	; 0x16
    2934:	8f 89       	ldd	r24, Y+23	; 0x17
    2936:	98 8d       	ldd	r25, Y+24	; 0x18
    2938:	20 e0       	ldi	r18, 0x00	; 0
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	40 e8       	ldi	r20, 0x80	; 128
    293e:	5f e3       	ldi	r21, 0x3F	; 63
    2940:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2944:	88 23       	and	r24, r24
    2946:	2c f4       	brge	.+10     	; 0x2952 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2948:	81 e0       	ldi	r24, 0x01	; 1
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	9c 8b       	std	Y+20, r25	; 0x14
    294e:	8b 8b       	std	Y+19, r24	; 0x13
    2950:	3f c0       	rjmp	.+126    	; 0x29d0 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2952:	6d 89       	ldd	r22, Y+21	; 0x15
    2954:	7e 89       	ldd	r23, Y+22	; 0x16
    2956:	8f 89       	ldd	r24, Y+23	; 0x17
    2958:	98 8d       	ldd	r25, Y+24	; 0x18
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	3f ef       	ldi	r19, 0xFF	; 255
    295e:	4f e7       	ldi	r20, 0x7F	; 127
    2960:	57 e4       	ldi	r21, 0x47	; 71
    2962:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2966:	18 16       	cp	r1, r24
    2968:	4c f5       	brge	.+82     	; 0x29bc <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    296a:	69 8d       	ldd	r22, Y+25	; 0x19
    296c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    296e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2970:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	40 e2       	ldi	r20, 0x20	; 32
    2978:	51 e4       	ldi	r21, 0x41	; 65
    297a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297e:	dc 01       	movw	r26, r24
    2980:	cb 01       	movw	r24, r22
    2982:	bc 01       	movw	r22, r24
    2984:	cd 01       	movw	r24, r26
    2986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    298a:	dc 01       	movw	r26, r24
    298c:	cb 01       	movw	r24, r22
    298e:	9c 8b       	std	Y+20, r25	; 0x14
    2990:	8b 8b       	std	Y+19, r24	; 0x13
    2992:	0f c0       	rjmp	.+30     	; 0x29b2 <LCD_displayCharacter+0x2ac>
    2994:	88 ec       	ldi	r24, 0xC8	; 200
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	9a 8b       	std	Y+18, r25	; 0x12
    299a:	89 8b       	std	Y+17, r24	; 0x11
    299c:	89 89       	ldd	r24, Y+17	; 0x11
    299e:	9a 89       	ldd	r25, Y+18	; 0x12
    29a0:	01 97       	sbiw	r24, 0x01	; 1
    29a2:	f1 f7       	brne	.-4      	; 0x29a0 <LCD_displayCharacter+0x29a>
    29a4:	9a 8b       	std	Y+18, r25	; 0x12
    29a6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a8:	8b 89       	ldd	r24, Y+19	; 0x13
    29aa:	9c 89       	ldd	r25, Y+20	; 0x14
    29ac:	01 97       	sbiw	r24, 0x01	; 1
    29ae:	9c 8b       	std	Y+20, r25	; 0x14
    29b0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29b2:	8b 89       	ldd	r24, Y+19	; 0x13
    29b4:	9c 89       	ldd	r25, Y+20	; 0x14
    29b6:	00 97       	sbiw	r24, 0x00	; 0
    29b8:	69 f7       	brne	.-38     	; 0x2994 <LCD_displayCharacter+0x28e>
    29ba:	14 c0       	rjmp	.+40     	; 0x29e4 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29bc:	6d 89       	ldd	r22, Y+21	; 0x15
    29be:	7e 89       	ldd	r23, Y+22	; 0x16
    29c0:	8f 89       	ldd	r24, Y+23	; 0x17
    29c2:	98 8d       	ldd	r25, Y+24	; 0x18
    29c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c8:	dc 01       	movw	r26, r24
    29ca:	cb 01       	movw	r24, r22
    29cc:	9c 8b       	std	Y+20, r25	; 0x14
    29ce:	8b 8b       	std	Y+19, r24	; 0x13
    29d0:	8b 89       	ldd	r24, Y+19	; 0x13
    29d2:	9c 89       	ldd	r25, Y+20	; 0x14
    29d4:	98 8b       	std	Y+16, r25	; 0x10
    29d6:	8f 87       	std	Y+15, r24	; 0x0f
    29d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    29da:	98 89       	ldd	r25, Y+16	; 0x10
    29dc:	01 97       	sbiw	r24, 0x01	; 1
    29de:	f1 f7       	brne	.-4      	; 0x29dc <LCD_displayCharacter+0x2d6>
    29e0:	98 8b       	std	Y+16, r25	; 0x10
    29e2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    29e4:	82 e0       	ldi	r24, 0x02	; 2
    29e6:	61 e0       	ldi	r22, 0x01	; 1
    29e8:	40 e0       	ldi	r20, 0x00	; 0
    29ea:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <GPIO_writePin>
    29ee:	80 e0       	ldi	r24, 0x00	; 0
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	a0 e8       	ldi	r26, 0x80	; 128
    29f4:	bf e3       	ldi	r27, 0x3F	; 63
    29f6:	8b 87       	std	Y+11, r24	; 0x0b
    29f8:	9c 87       	std	Y+12, r25	; 0x0c
    29fa:	ad 87       	std	Y+13, r26	; 0x0d
    29fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a00:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a02:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a04:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	4a ef       	ldi	r20, 0xFA	; 250
    2a0c:	54 e4       	ldi	r21, 0x44	; 68
    2a0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	8f 83       	std	Y+7, r24	; 0x07
    2a18:	98 87       	std	Y+8, r25	; 0x08
    2a1a:	a9 87       	std	Y+9, r26	; 0x09
    2a1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a1e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a20:	78 85       	ldd	r23, Y+8	; 0x08
    2a22:	89 85       	ldd	r24, Y+9	; 0x09
    2a24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	40 e8       	ldi	r20, 0x80	; 128
    2a2c:	5f e3       	ldi	r21, 0x3F	; 63
    2a2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a32:	88 23       	and	r24, r24
    2a34:	2c f4       	brge	.+10     	; 0x2a40 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2a36:	81 e0       	ldi	r24, 0x01	; 1
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	9e 83       	std	Y+6, r25	; 0x06
    2a3c:	8d 83       	std	Y+5, r24	; 0x05
    2a3e:	3f c0       	rjmp	.+126    	; 0x2abe <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2a40:	6f 81       	ldd	r22, Y+7	; 0x07
    2a42:	78 85       	ldd	r23, Y+8	; 0x08
    2a44:	89 85       	ldd	r24, Y+9	; 0x09
    2a46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a48:	20 e0       	ldi	r18, 0x00	; 0
    2a4a:	3f ef       	ldi	r19, 0xFF	; 255
    2a4c:	4f e7       	ldi	r20, 0x7F	; 127
    2a4e:	57 e4       	ldi	r21, 0x47	; 71
    2a50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a54:	18 16       	cp	r1, r24
    2a56:	4c f5       	brge	.+82     	; 0x2aaa <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a58:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a60:	20 e0       	ldi	r18, 0x00	; 0
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	40 e2       	ldi	r20, 0x20	; 32
    2a66:	51 e4       	ldi	r21, 0x41	; 65
    2a68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6c:	dc 01       	movw	r26, r24
    2a6e:	cb 01       	movw	r24, r22
    2a70:	bc 01       	movw	r22, r24
    2a72:	cd 01       	movw	r24, r26
    2a74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a78:	dc 01       	movw	r26, r24
    2a7a:	cb 01       	movw	r24, r22
    2a7c:	9e 83       	std	Y+6, r25	; 0x06
    2a7e:	8d 83       	std	Y+5, r24	; 0x05
    2a80:	0f c0       	rjmp	.+30     	; 0x2aa0 <LCD_displayCharacter+0x39a>
    2a82:	88 ec       	ldi	r24, 0xC8	; 200
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	9c 83       	std	Y+4, r25	; 0x04
    2a88:	8b 83       	std	Y+3, r24	; 0x03
    2a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a8e:	01 97       	sbiw	r24, 0x01	; 1
    2a90:	f1 f7       	brne	.-4      	; 0x2a8e <LCD_displayCharacter+0x388>
    2a92:	9c 83       	std	Y+4, r25	; 0x04
    2a94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a96:	8d 81       	ldd	r24, Y+5	; 0x05
    2a98:	9e 81       	ldd	r25, Y+6	; 0x06
    2a9a:	01 97       	sbiw	r24, 0x01	; 1
    2a9c:	9e 83       	std	Y+6, r25	; 0x06
    2a9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aa0:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa2:	9e 81       	ldd	r25, Y+6	; 0x06
    2aa4:	00 97       	sbiw	r24, 0x00	; 0
    2aa6:	69 f7       	brne	.-38     	; 0x2a82 <LCD_displayCharacter+0x37c>
    2aa8:	14 c0       	rjmp	.+40     	; 0x2ad2 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aaa:	6f 81       	ldd	r22, Y+7	; 0x07
    2aac:	78 85       	ldd	r23, Y+8	; 0x08
    2aae:	89 85       	ldd	r24, Y+9	; 0x09
    2ab0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ab2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab6:	dc 01       	movw	r26, r24
    2ab8:	cb 01       	movw	r24, r22
    2aba:	9e 83       	std	Y+6, r25	; 0x06
    2abc:	8d 83       	std	Y+5, r24	; 0x05
    2abe:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac2:	9a 83       	std	Y+2, r25	; 0x02
    2ac4:	89 83       	std	Y+1, r24	; 0x01
    2ac6:	89 81       	ldd	r24, Y+1	; 0x01
    2ac8:	9a 81       	ldd	r25, Y+2	; 0x02
    2aca:	01 97       	sbiw	r24, 0x01	; 1
    2acc:	f1 f7       	brne	.-4      	; 0x2aca <LCD_displayCharacter+0x3c4>
    2ace:	9a 83       	std	Y+2, r25	; 0x02
    2ad0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2ad2:	e9 96       	adiw	r28, 0x39	; 57
    2ad4:	0f b6       	in	r0, 0x3f	; 63
    2ad6:	f8 94       	cli
    2ad8:	de bf       	out	0x3e, r29	; 62
    2ada:	0f be       	out	0x3f, r0	; 63
    2adc:	cd bf       	out	0x3d, r28	; 61
    2ade:	cf 91       	pop	r28
    2ae0:	df 91       	pop	r29
    2ae2:	08 95       	ret

00002ae4 <LCD_displayString>:

/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str) {
    2ae4:	df 93       	push	r29
    2ae6:	cf 93       	push	r28
    2ae8:	00 d0       	rcall	.+0      	; 0x2aea <LCD_displayString+0x6>
    2aea:	0f 92       	push	r0
    2aec:	cd b7       	in	r28, 0x3d	; 61
    2aee:	de b7       	in	r29, 0x3e	; 62
    2af0:	9b 83       	std	Y+3, r25	; 0x03
    2af2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2af4:	19 82       	std	Y+1, r1	; 0x01
    2af6:	0e c0       	rjmp	.+28     	; 0x2b14 <LCD_displayString+0x30>
	while (Str[i] != '\0') {
		LCD_displayCharacter(Str[i]);
    2af8:	89 81       	ldd	r24, Y+1	; 0x01
    2afa:	28 2f       	mov	r18, r24
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	8a 81       	ldd	r24, Y+2	; 0x02
    2b00:	9b 81       	ldd	r25, Y+3	; 0x03
    2b02:	fc 01       	movw	r30, r24
    2b04:	e2 0f       	add	r30, r18
    2b06:	f3 1f       	adc	r31, r19
    2b08:	80 81       	ld	r24, Z
    2b0a:	0e 94 83 13 	call	0x2706	; 0x2706 <LCD_displayCharacter>
		i++;
    2b0e:	89 81       	ldd	r24, Y+1	; 0x01
    2b10:	8f 5f       	subi	r24, 0xFF	; 255
    2b12:	89 83       	std	Y+1, r24	; 0x01
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str) {
	uint8 i = 0;
	while (Str[i] != '\0') {
    2b14:	89 81       	ldd	r24, Y+1	; 0x01
    2b16:	28 2f       	mov	r18, r24
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b1e:	fc 01       	movw	r30, r24
    2b20:	e2 0f       	add	r30, r18
    2b22:	f3 1f       	adc	r31, r19
    2b24:	80 81       	ld	r24, Z
    2b26:	88 23       	and	r24, r24
    2b28:	39 f7       	brne	.-50     	; 0x2af8 <LCD_displayString+0x14>
	 {
	 LCD_displayCharacter(*Str);
	 Str++;
	 }
	 *********************************************************/
}
    2b2a:	0f 90       	pop	r0
    2b2c:	0f 90       	pop	r0
    2b2e:	0f 90       	pop	r0
    2b30:	cf 91       	pop	r28
    2b32:	df 91       	pop	r29
    2b34:	08 95       	ret

00002b36 <LCD_moveCursor>:

/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row, uint8 col) {
    2b36:	df 93       	push	r29
    2b38:	cf 93       	push	r28
    2b3a:	00 d0       	rcall	.+0      	; 0x2b3c <LCD_moveCursor+0x6>
    2b3c:	00 d0       	rcall	.+0      	; 0x2b3e <LCD_moveCursor+0x8>
    2b3e:	0f 92       	push	r0
    2b40:	cd b7       	in	r28, 0x3d	; 61
    2b42:	de b7       	in	r29, 0x3e	; 62
    2b44:	8a 83       	std	Y+2, r24	; 0x02
    2b46:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch (row) {
    2b48:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4a:	28 2f       	mov	r18, r24
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	3d 83       	std	Y+5, r19	; 0x05
    2b50:	2c 83       	std	Y+4, r18	; 0x04
    2b52:	8c 81       	ldd	r24, Y+4	; 0x04
    2b54:	9d 81       	ldd	r25, Y+5	; 0x05
    2b56:	81 30       	cpi	r24, 0x01	; 1
    2b58:	91 05       	cpc	r25, r1
    2b5a:	c1 f0       	breq	.+48     	; 0x2b8c <LCD_moveCursor+0x56>
    2b5c:	2c 81       	ldd	r18, Y+4	; 0x04
    2b5e:	3d 81       	ldd	r19, Y+5	; 0x05
    2b60:	22 30       	cpi	r18, 0x02	; 2
    2b62:	31 05       	cpc	r19, r1
    2b64:	2c f4       	brge	.+10     	; 0x2b70 <LCD_moveCursor+0x3a>
    2b66:	8c 81       	ldd	r24, Y+4	; 0x04
    2b68:	9d 81       	ldd	r25, Y+5	; 0x05
    2b6a:	00 97       	sbiw	r24, 0x00	; 0
    2b6c:	61 f0       	breq	.+24     	; 0x2b86 <LCD_moveCursor+0x50>
    2b6e:	19 c0       	rjmp	.+50     	; 0x2ba2 <LCD_moveCursor+0x6c>
    2b70:	2c 81       	ldd	r18, Y+4	; 0x04
    2b72:	3d 81       	ldd	r19, Y+5	; 0x05
    2b74:	22 30       	cpi	r18, 0x02	; 2
    2b76:	31 05       	cpc	r19, r1
    2b78:	69 f0       	breq	.+26     	; 0x2b94 <LCD_moveCursor+0x5e>
    2b7a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b7c:	9d 81       	ldd	r25, Y+5	; 0x05
    2b7e:	83 30       	cpi	r24, 0x03	; 3
    2b80:	91 05       	cpc	r25, r1
    2b82:	61 f0       	breq	.+24     	; 0x2b9c <LCD_moveCursor+0x66>
    2b84:	0e c0       	rjmp	.+28     	; 0x2ba2 <LCD_moveCursor+0x6c>
	case 0:
		lcd_memory_address = col;
    2b86:	8b 81       	ldd	r24, Y+3	; 0x03
    2b88:	89 83       	std	Y+1, r24	; 0x01
    2b8a:	0b c0       	rjmp	.+22     	; 0x2ba2 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address = col + 0x40;
    2b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8e:	80 5c       	subi	r24, 0xC0	; 192
    2b90:	89 83       	std	Y+1, r24	; 0x01
    2b92:	07 c0       	rjmp	.+14     	; 0x2ba2 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address = col + 0x10;
    2b94:	8b 81       	ldd	r24, Y+3	; 0x03
    2b96:	80 5f       	subi	r24, 0xF0	; 240
    2b98:	89 83       	std	Y+1, r24	; 0x01
    2b9a:	03 c0       	rjmp	.+6      	; 0x2ba2 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address = col + 0x50;
    2b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b9e:	80 5b       	subi	r24, 0xB0	; 176
    2ba0:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2ba2:	89 81       	ldd	r24, Y+1	; 0x01
    2ba4:	80 68       	ori	r24, 0x80	; 128
    2ba6:	0e 94 94 11 	call	0x2328	; 0x2328 <LCD_sendCommand>
}
    2baa:	0f 90       	pop	r0
    2bac:	0f 90       	pop	r0
    2bae:	0f 90       	pop	r0
    2bb0:	0f 90       	pop	r0
    2bb2:	0f 90       	pop	r0
    2bb4:	cf 91       	pop	r28
    2bb6:	df 91       	pop	r29
    2bb8:	08 95       	ret

00002bba <LCD_displayStringRowColumn>:

/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str) {
    2bba:	df 93       	push	r29
    2bbc:	cf 93       	push	r28
    2bbe:	00 d0       	rcall	.+0      	; 0x2bc0 <LCD_displayStringRowColumn+0x6>
    2bc0:	00 d0       	rcall	.+0      	; 0x2bc2 <LCD_displayStringRowColumn+0x8>
    2bc2:	cd b7       	in	r28, 0x3d	; 61
    2bc4:	de b7       	in	r29, 0x3e	; 62
    2bc6:	89 83       	std	Y+1, r24	; 0x01
    2bc8:	6a 83       	std	Y+2, r22	; 0x02
    2bca:	5c 83       	std	Y+4, r21	; 0x04
    2bcc:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, col); /* go to to the required LCD position */
    2bce:	89 81       	ldd	r24, Y+1	; 0x01
    2bd0:	6a 81       	ldd	r22, Y+2	; 0x02
    2bd2:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bda:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <LCD_displayString>
}
    2bde:	0f 90       	pop	r0
    2be0:	0f 90       	pop	r0
    2be2:	0f 90       	pop	r0
    2be4:	0f 90       	pop	r0
    2be6:	cf 91       	pop	r28
    2be8:	df 91       	pop	r29
    2bea:	08 95       	ret

00002bec <LCD_intgerToString>:

/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data) {
    2bec:	df 93       	push	r29
    2bee:	cf 93       	push	r28
    2bf0:	cd b7       	in	r28, 0x3d	; 61
    2bf2:	de b7       	in	r29, 0x3e	; 62
    2bf4:	62 97       	sbiw	r28, 0x12	; 18
    2bf6:	0f b6       	in	r0, 0x3f	; 63
    2bf8:	f8 94       	cli
    2bfa:	de bf       	out	0x3e, r29	; 62
    2bfc:	0f be       	out	0x3f, r0	; 63
    2bfe:	cd bf       	out	0x3d, r28	; 61
    2c00:	9a 8b       	std	Y+18, r25	; 0x12
    2c02:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ascii result */
	itoa(data, buff, 10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2c04:	89 89       	ldd	r24, Y+17	; 0x11
    2c06:	9a 89       	ldd	r25, Y+18	; 0x12
    2c08:	9e 01       	movw	r18, r28
    2c0a:	2f 5f       	subi	r18, 0xFF	; 255
    2c0c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c0e:	b9 01       	movw	r22, r18
    2c10:	4a e0       	ldi	r20, 0x0A	; 10
    2c12:	50 e0       	ldi	r21, 0x00	; 0
    2c14:	0e 94 3b 1a 	call	0x3476	; 0x3476 <itoa>
	LCD_displayString(buff); /* Display the string */
    2c18:	ce 01       	movw	r24, r28
    2c1a:	01 96       	adiw	r24, 0x01	; 1
    2c1c:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <LCD_displayString>
}
    2c20:	62 96       	adiw	r28, 0x12	; 18
    2c22:	0f b6       	in	r0, 0x3f	; 63
    2c24:	f8 94       	cli
    2c26:	de bf       	out	0x3e, r29	; 62
    2c28:	0f be       	out	0x3f, r0	; 63
    2c2a:	cd bf       	out	0x3d, r28	; 61
    2c2c:	cf 91       	pop	r28
    2c2e:	df 91       	pop	r29
    2c30:	08 95       	ret

00002c32 <LCD_clearScreen>:

/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void) {
    2c32:	df 93       	push	r29
    2c34:	cf 93       	push	r28
    2c36:	cd b7       	in	r28, 0x3d	; 61
    2c38:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2c3a:	81 e0       	ldi	r24, 0x01	; 1
    2c3c:	0e 94 94 11 	call	0x2328	; 0x2328 <LCD_sendCommand>
}
    2c40:	cf 91       	pop	r28
    2c42:	df 91       	pop	r29
    2c44:	08 95       	ret

00002c46 <__vector_11>:
 | 	 	 	 	    Interrupt Service Routines               |
 -------------------------------------------------------------
 */

ISR(TIMER0_OVF_vect) /* Timer0 Overflow interrupt request */
{
    2c46:	1f 92       	push	r1
    2c48:	0f 92       	push	r0
    2c4a:	0f b6       	in	r0, 0x3f	; 63
    2c4c:	0f 92       	push	r0
    2c4e:	11 24       	eor	r1, r1
    2c50:	2f 93       	push	r18
    2c52:	3f 93       	push	r19
    2c54:	4f 93       	push	r20
    2c56:	5f 93       	push	r21
    2c58:	6f 93       	push	r22
    2c5a:	7f 93       	push	r23
    2c5c:	8f 93       	push	r24
    2c5e:	9f 93       	push	r25
    2c60:	af 93       	push	r26
    2c62:	bf 93       	push	r27
    2c64:	ef 93       	push	r30
    2c66:	ff 93       	push	r31
    2c68:	df 93       	push	r29
    2c6a:	cf 93       	push	r28
    2c6c:	cd b7       	in	r28, 0x3d	; 61
    2c6e:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr_TIMER0 != NULL_PTR) /* If pointer doesn't point at NULL */
    2c70:	80 91 7c 01 	lds	r24, 0x017C
    2c74:	90 91 7d 01 	lds	r25, 0x017D
    2c78:	00 97       	sbiw	r24, 0x00	; 0
    2c7a:	29 f0       	breq	.+10     	; 0x2c86 <__vector_11+0x40>
    {
        (*g_callBackPtr_TIMER0)(); /*  As interrupt request, call back the pointer to function */
    2c7c:	e0 91 7c 01 	lds	r30, 0x017C
    2c80:	f0 91 7d 01 	lds	r31, 0x017D
    2c84:	09 95       	icall
    }
}
    2c86:	cf 91       	pop	r28
    2c88:	df 91       	pop	r29
    2c8a:	ff 91       	pop	r31
    2c8c:	ef 91       	pop	r30
    2c8e:	bf 91       	pop	r27
    2c90:	af 91       	pop	r26
    2c92:	9f 91       	pop	r25
    2c94:	8f 91       	pop	r24
    2c96:	7f 91       	pop	r23
    2c98:	6f 91       	pop	r22
    2c9a:	5f 91       	pop	r21
    2c9c:	4f 91       	pop	r20
    2c9e:	3f 91       	pop	r19
    2ca0:	2f 91       	pop	r18
    2ca2:	0f 90       	pop	r0
    2ca4:	0f be       	out	0x3f, r0	; 63
    2ca6:	0f 90       	pop	r0
    2ca8:	1f 90       	pop	r1
    2caa:	18 95       	reti

00002cac <__vector_10>:
ISR(TIMER0_COMP_vect) /* Timer0 Compare value interrupt request */
{
    2cac:	1f 92       	push	r1
    2cae:	0f 92       	push	r0
    2cb0:	0f b6       	in	r0, 0x3f	; 63
    2cb2:	0f 92       	push	r0
    2cb4:	11 24       	eor	r1, r1
    2cb6:	2f 93       	push	r18
    2cb8:	3f 93       	push	r19
    2cba:	4f 93       	push	r20
    2cbc:	5f 93       	push	r21
    2cbe:	6f 93       	push	r22
    2cc0:	7f 93       	push	r23
    2cc2:	8f 93       	push	r24
    2cc4:	9f 93       	push	r25
    2cc6:	af 93       	push	r26
    2cc8:	bf 93       	push	r27
    2cca:	ef 93       	push	r30
    2ccc:	ff 93       	push	r31
    2cce:	df 93       	push	r29
    2cd0:	cf 93       	push	r28
    2cd2:	cd b7       	in	r28, 0x3d	; 61
    2cd4:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr_TIMER0 != NULL_PTR) /* If pointer doesn't point at NULL */
    2cd6:	80 91 7c 01 	lds	r24, 0x017C
    2cda:	90 91 7d 01 	lds	r25, 0x017D
    2cde:	00 97       	sbiw	r24, 0x00	; 0
    2ce0:	29 f0       	breq	.+10     	; 0x2cec <__vector_10+0x40>
    {
        (*g_callBackPtr_TIMER0)(); /*  As interrupt request, call back the pointer to function */
    2ce2:	e0 91 7c 01 	lds	r30, 0x017C
    2ce6:	f0 91 7d 01 	lds	r31, 0x017D
    2cea:	09 95       	icall
    }
}
    2cec:	cf 91       	pop	r28
    2cee:	df 91       	pop	r29
    2cf0:	ff 91       	pop	r31
    2cf2:	ef 91       	pop	r30
    2cf4:	bf 91       	pop	r27
    2cf6:	af 91       	pop	r26
    2cf8:	9f 91       	pop	r25
    2cfa:	8f 91       	pop	r24
    2cfc:	7f 91       	pop	r23
    2cfe:	6f 91       	pop	r22
    2d00:	5f 91       	pop	r21
    2d02:	4f 91       	pop	r20
    2d04:	3f 91       	pop	r19
    2d06:	2f 91       	pop	r18
    2d08:	0f 90       	pop	r0
    2d0a:	0f be       	out	0x3f, r0	; 63
    2d0c:	0f 90       	pop	r0
    2d0e:	1f 90       	pop	r1
    2d10:	18 95       	reti

00002d12 <__vector_9>:
ISR(TIMER1_OVF_vect) /* Timer1 Overflow interrupt request */

{
    2d12:	1f 92       	push	r1
    2d14:	0f 92       	push	r0
    2d16:	0f b6       	in	r0, 0x3f	; 63
    2d18:	0f 92       	push	r0
    2d1a:	11 24       	eor	r1, r1
    2d1c:	2f 93       	push	r18
    2d1e:	3f 93       	push	r19
    2d20:	4f 93       	push	r20
    2d22:	5f 93       	push	r21
    2d24:	6f 93       	push	r22
    2d26:	7f 93       	push	r23
    2d28:	8f 93       	push	r24
    2d2a:	9f 93       	push	r25
    2d2c:	af 93       	push	r26
    2d2e:	bf 93       	push	r27
    2d30:	ef 93       	push	r30
    2d32:	ff 93       	push	r31
    2d34:	df 93       	push	r29
    2d36:	cf 93       	push	r28
    2d38:	cd b7       	in	r28, 0x3d	; 61
    2d3a:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr_TIMER1 != NULL_PTR) /* If pointer doesn't point at NULL */
    2d3c:	80 91 7e 01 	lds	r24, 0x017E
    2d40:	90 91 7f 01 	lds	r25, 0x017F
    2d44:	00 97       	sbiw	r24, 0x00	; 0
    2d46:	29 f0       	breq	.+10     	; 0x2d52 <__vector_9+0x40>
    {
        (*g_callBackPtr_TIMER1)(); /*  As interrupt request, call back the pointer to function */
    2d48:	e0 91 7e 01 	lds	r30, 0x017E
    2d4c:	f0 91 7f 01 	lds	r31, 0x017F
    2d50:	09 95       	icall
    }
}
    2d52:	cf 91       	pop	r28
    2d54:	df 91       	pop	r29
    2d56:	ff 91       	pop	r31
    2d58:	ef 91       	pop	r30
    2d5a:	bf 91       	pop	r27
    2d5c:	af 91       	pop	r26
    2d5e:	9f 91       	pop	r25
    2d60:	8f 91       	pop	r24
    2d62:	7f 91       	pop	r23
    2d64:	6f 91       	pop	r22
    2d66:	5f 91       	pop	r21
    2d68:	4f 91       	pop	r20
    2d6a:	3f 91       	pop	r19
    2d6c:	2f 91       	pop	r18
    2d6e:	0f 90       	pop	r0
    2d70:	0f be       	out	0x3f, r0	; 63
    2d72:	0f 90       	pop	r0
    2d74:	1f 90       	pop	r1
    2d76:	18 95       	reti

00002d78 <__vector_7>:
ISR(TIMER1_COMPA_vect) /* Timer1 Compare value interrupt request */
{
    2d78:	1f 92       	push	r1
    2d7a:	0f 92       	push	r0
    2d7c:	0f b6       	in	r0, 0x3f	; 63
    2d7e:	0f 92       	push	r0
    2d80:	11 24       	eor	r1, r1
    2d82:	2f 93       	push	r18
    2d84:	3f 93       	push	r19
    2d86:	4f 93       	push	r20
    2d88:	5f 93       	push	r21
    2d8a:	6f 93       	push	r22
    2d8c:	7f 93       	push	r23
    2d8e:	8f 93       	push	r24
    2d90:	9f 93       	push	r25
    2d92:	af 93       	push	r26
    2d94:	bf 93       	push	r27
    2d96:	ef 93       	push	r30
    2d98:	ff 93       	push	r31
    2d9a:	df 93       	push	r29
    2d9c:	cf 93       	push	r28
    2d9e:	cd b7       	in	r28, 0x3d	; 61
    2da0:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr_TIMER1 != NULL_PTR) /* If pointer doesn't point at NULL */
    2da2:	80 91 7e 01 	lds	r24, 0x017E
    2da6:	90 91 7f 01 	lds	r25, 0x017F
    2daa:	00 97       	sbiw	r24, 0x00	; 0
    2dac:	29 f0       	breq	.+10     	; 0x2db8 <__vector_7+0x40>
    {
        (*g_callBackPtr_TIMER1)(); /*  As interrupt request, call back the pointer to function */
    2dae:	e0 91 7e 01 	lds	r30, 0x017E
    2db2:	f0 91 7f 01 	lds	r31, 0x017F
    2db6:	09 95       	icall
    }
}
    2db8:	cf 91       	pop	r28
    2dba:	df 91       	pop	r29
    2dbc:	ff 91       	pop	r31
    2dbe:	ef 91       	pop	r30
    2dc0:	bf 91       	pop	r27
    2dc2:	af 91       	pop	r26
    2dc4:	9f 91       	pop	r25
    2dc6:	8f 91       	pop	r24
    2dc8:	7f 91       	pop	r23
    2dca:	6f 91       	pop	r22
    2dcc:	5f 91       	pop	r21
    2dce:	4f 91       	pop	r20
    2dd0:	3f 91       	pop	r19
    2dd2:	2f 91       	pop	r18
    2dd4:	0f 90       	pop	r0
    2dd6:	0f be       	out	0x3f, r0	; 63
    2dd8:	0f 90       	pop	r0
    2dda:	1f 90       	pop	r1
    2ddc:	18 95       	reti

00002dde <__vector_5>:
ISR(TIMER2_OVF_vect) /* Timer2 Overflow interrupt request */
{
    2dde:	1f 92       	push	r1
    2de0:	0f 92       	push	r0
    2de2:	0f b6       	in	r0, 0x3f	; 63
    2de4:	0f 92       	push	r0
    2de6:	11 24       	eor	r1, r1
    2de8:	2f 93       	push	r18
    2dea:	3f 93       	push	r19
    2dec:	4f 93       	push	r20
    2dee:	5f 93       	push	r21
    2df0:	6f 93       	push	r22
    2df2:	7f 93       	push	r23
    2df4:	8f 93       	push	r24
    2df6:	9f 93       	push	r25
    2df8:	af 93       	push	r26
    2dfa:	bf 93       	push	r27
    2dfc:	ef 93       	push	r30
    2dfe:	ff 93       	push	r31
    2e00:	df 93       	push	r29
    2e02:	cf 93       	push	r28
    2e04:	cd b7       	in	r28, 0x3d	; 61
    2e06:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr_TIMER2 != NULL_PTR) /* If pointer doesn't point at NULL */
    2e08:	80 91 80 01 	lds	r24, 0x0180
    2e0c:	90 91 81 01 	lds	r25, 0x0181
    2e10:	00 97       	sbiw	r24, 0x00	; 0
    2e12:	29 f0       	breq	.+10     	; 0x2e1e <__vector_5+0x40>
    {
        (*g_callBackPtr_TIMER2)(); /*  As interrupt request, call back the pointer to function */
    2e14:	e0 91 80 01 	lds	r30, 0x0180
    2e18:	f0 91 81 01 	lds	r31, 0x0181
    2e1c:	09 95       	icall
    }
}
    2e1e:	cf 91       	pop	r28
    2e20:	df 91       	pop	r29
    2e22:	ff 91       	pop	r31
    2e24:	ef 91       	pop	r30
    2e26:	bf 91       	pop	r27
    2e28:	af 91       	pop	r26
    2e2a:	9f 91       	pop	r25
    2e2c:	8f 91       	pop	r24
    2e2e:	7f 91       	pop	r23
    2e30:	6f 91       	pop	r22
    2e32:	5f 91       	pop	r21
    2e34:	4f 91       	pop	r20
    2e36:	3f 91       	pop	r19
    2e38:	2f 91       	pop	r18
    2e3a:	0f 90       	pop	r0
    2e3c:	0f be       	out	0x3f, r0	; 63
    2e3e:	0f 90       	pop	r0
    2e40:	1f 90       	pop	r1
    2e42:	18 95       	reti

00002e44 <__vector_4>:
ISR(TIMER2_COMP_vect) /* Timer2 Compare value interrupt request */
{
    2e44:	1f 92       	push	r1
    2e46:	0f 92       	push	r0
    2e48:	0f b6       	in	r0, 0x3f	; 63
    2e4a:	0f 92       	push	r0
    2e4c:	11 24       	eor	r1, r1
    2e4e:	2f 93       	push	r18
    2e50:	3f 93       	push	r19
    2e52:	4f 93       	push	r20
    2e54:	5f 93       	push	r21
    2e56:	6f 93       	push	r22
    2e58:	7f 93       	push	r23
    2e5a:	8f 93       	push	r24
    2e5c:	9f 93       	push	r25
    2e5e:	af 93       	push	r26
    2e60:	bf 93       	push	r27
    2e62:	ef 93       	push	r30
    2e64:	ff 93       	push	r31
    2e66:	df 93       	push	r29
    2e68:	cf 93       	push	r28
    2e6a:	cd b7       	in	r28, 0x3d	; 61
    2e6c:	de b7       	in	r29, 0x3e	; 62
    if (g_callBackPtr_TIMER2 != NULL_PTR) /* If pointer doesn't point at NULL */
    2e6e:	80 91 80 01 	lds	r24, 0x0180
    2e72:	90 91 81 01 	lds	r25, 0x0181
    2e76:	00 97       	sbiw	r24, 0x00	; 0
    2e78:	29 f0       	breq	.+10     	; 0x2e84 <__vector_4+0x40>
    {
        (*g_callBackPtr_TIMER2)(); /*  As interrupt request, call back the pointer to function */
    2e7a:	e0 91 80 01 	lds	r30, 0x0180
    2e7e:	f0 91 81 01 	lds	r31, 0x0181
    2e82:	09 95       	icall
    }
}
    2e84:	cf 91       	pop	r28
    2e86:	df 91       	pop	r29
    2e88:	ff 91       	pop	r31
    2e8a:	ef 91       	pop	r30
    2e8c:	bf 91       	pop	r27
    2e8e:	af 91       	pop	r26
    2e90:	9f 91       	pop	r25
    2e92:	8f 91       	pop	r24
    2e94:	7f 91       	pop	r23
    2e96:	6f 91       	pop	r22
    2e98:	5f 91       	pop	r21
    2e9a:	4f 91       	pop	r20
    2e9c:	3f 91       	pop	r19
    2e9e:	2f 91       	pop	r18
    2ea0:	0f 90       	pop	r0
    2ea2:	0f be       	out	0x3f, r0	; 63
    2ea4:	0f 90       	pop	r0
    2ea6:	1f 90       	pop	r1
    2ea8:	18 95       	reti

00002eaa <Timer_init>:
 *
 * Return: void
 *
 */
void Timer_init(const Timer_ConfigType *Config_Ptr)
{
    2eaa:	df 93       	push	r29
    2eac:	cf 93       	push	r28
    2eae:	00 d0       	rcall	.+0      	; 0x2eb0 <Timer_init+0x6>
    2eb0:	00 d0       	rcall	.+0      	; 0x2eb2 <Timer_init+0x8>
    2eb2:	cd b7       	in	r28, 0x3d	; 61
    2eb4:	de b7       	in	r29, 0x3e	; 62
    2eb6:	9a 83       	std	Y+2, r25	; 0x02
    2eb8:	89 83       	std	Y+1, r24	; 0x01
    switch (Config_Ptr->timer_ID) /* Check for timer ID */
    2eba:	e9 81       	ldd	r30, Y+1	; 0x01
    2ebc:	fa 81       	ldd	r31, Y+2	; 0x02
    2ebe:	84 81       	ldd	r24, Z+4	; 0x04
    2ec0:	28 2f       	mov	r18, r24
    2ec2:	30 e0       	ldi	r19, 0x00	; 0
    2ec4:	3c 83       	std	Y+4, r19	; 0x04
    2ec6:	2b 83       	std	Y+3, r18	; 0x03
    2ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eca:	9c 81       	ldd	r25, Y+4	; 0x04
    2ecc:	81 30       	cpi	r24, 0x01	; 1
    2ece:	91 05       	cpc	r25, r1
    2ed0:	09 f4       	brne	.+2      	; 0x2ed4 <Timer_init+0x2a>
    2ed2:	4c c0       	rjmp	.+152    	; 0x2f6c <Timer_init+0xc2>
    2ed4:	2b 81       	ldd	r18, Y+3	; 0x03
    2ed6:	3c 81       	ldd	r19, Y+4	; 0x04
    2ed8:	22 30       	cpi	r18, 0x02	; 2
    2eda:	31 05       	cpc	r19, r1
    2edc:	09 f4       	brne	.+2      	; 0x2ee0 <Timer_init+0x36>
    2ede:	88 c0       	rjmp	.+272    	; 0x2ff0 <Timer_init+0x146>
    2ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee4:	00 97       	sbiw	r24, 0x00	; 0
    2ee6:	09 f0       	breq	.+2      	; 0x2eea <Timer_init+0x40>
    2ee8:	c3 c0       	rjmp	.+390    	; 0x3070 <Timer_init+0x1c6>
    {
    case TIMER0_ID:
        TCNT0 = Config_Ptr->timer_InitialValue;     /* Assign Timer0 initial value */
    2eea:	a2 e5       	ldi	r26, 0x52	; 82
    2eec:	b0 e0       	ldi	r27, 0x00	; 0
    2eee:	e9 81       	ldd	r30, Y+1	; 0x01
    2ef0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ef2:	80 81       	ld	r24, Z
    2ef4:	91 81       	ldd	r25, Z+1	; 0x01
    2ef6:	8c 93       	st	X, r24
        TCCR0 = (1 << FOC0);                        /* As this is a non-PWM mode set Timer0 Force Output bit */
    2ef8:	e3 e5       	ldi	r30, 0x53	; 83
    2efa:	f0 e0       	ldi	r31, 0x00	; 0
    2efc:	80 e8       	ldi	r24, 0x80	; 128
    2efe:	80 83       	st	Z, r24
        TIMSK |= (1 << TOIE0);                      /* Enable Timer0 overflow interrupt by default */
    2f00:	a9 e5       	ldi	r26, 0x59	; 89
    2f02:	b0 e0       	ldi	r27, 0x00	; 0
    2f04:	e9 e5       	ldi	r30, 0x59	; 89
    2f06:	f0 e0       	ldi	r31, 0x00	; 0
    2f08:	80 81       	ld	r24, Z
    2f0a:	81 60       	ori	r24, 0x01	; 1
    2f0c:	8c 93       	st	X, r24
        if (Config_Ptr->timer_mode == COMPARE_MODE) /* If Compare value mode */
    2f0e:	e9 81       	ldd	r30, Y+1	; 0x01
    2f10:	fa 81       	ldd	r31, Y+2	; 0x02
    2f12:	86 81       	ldd	r24, Z+6	; 0x06
    2f14:	81 30       	cpi	r24, 0x01	; 1
    2f16:	e1 f4       	brne	.+56     	; 0x2f50 <Timer_init+0xa6>
        {
            TCCR0 |= (1 << WGM01);                       /* Select compare mode bits WGM00= 0, WGM01= 1 */
    2f18:	a3 e5       	ldi	r26, 0x53	; 83
    2f1a:	b0 e0       	ldi	r27, 0x00	; 0
    2f1c:	e3 e5       	ldi	r30, 0x53	; 83
    2f1e:	f0 e0       	ldi	r31, 0x00	; 0
    2f20:	80 81       	ld	r24, Z
    2f22:	88 60       	ori	r24, 0x08	; 8
    2f24:	8c 93       	st	X, r24
            OCR0 = Config_Ptr->timer_compare_MatchValue; /* Assign Timer0 Compare value */
    2f26:	ac e5       	ldi	r26, 0x5C	; 92
    2f28:	b0 e0       	ldi	r27, 0x00	; 0
    2f2a:	e9 81       	ldd	r30, Y+1	; 0x01
    2f2c:	fa 81       	ldd	r31, Y+2	; 0x02
    2f2e:	82 81       	ldd	r24, Z+2	; 0x02
    2f30:	93 81       	ldd	r25, Z+3	; 0x03
    2f32:	8c 93       	st	X, r24
            TIMSK &= ~(1 << TOIE0);                      /* Disable Timer0 Overflow interrupt */
    2f34:	a9 e5       	ldi	r26, 0x59	; 89
    2f36:	b0 e0       	ldi	r27, 0x00	; 0
    2f38:	e9 e5       	ldi	r30, 0x59	; 89
    2f3a:	f0 e0       	ldi	r31, 0x00	; 0
    2f3c:	80 81       	ld	r24, Z
    2f3e:	8e 7f       	andi	r24, 0xFE	; 254
    2f40:	8c 93       	st	X, r24
            TIMSK |= (1 << OCIE0);                       /* Enable Timer0 Compare value interrupt */
    2f42:	a9 e5       	ldi	r26, 0x59	; 89
    2f44:	b0 e0       	ldi	r27, 0x00	; 0
    2f46:	e9 e5       	ldi	r30, 0x59	; 89
    2f48:	f0 e0       	ldi	r31, 0x00	; 0
    2f4a:	80 81       	ld	r24, Z
    2f4c:	82 60       	ori	r24, 0x02	; 2
    2f4e:	8c 93       	st	X, r24
        }
        TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->timer_clock & 0x07); /* Select Timer0 Clock prescale to start start counting */
    2f50:	a3 e5       	ldi	r26, 0x53	; 83
    2f52:	b0 e0       	ldi	r27, 0x00	; 0
    2f54:	e3 e5       	ldi	r30, 0x53	; 83
    2f56:	f0 e0       	ldi	r31, 0x00	; 0
    2f58:	80 81       	ld	r24, Z
    2f5a:	98 2f       	mov	r25, r24
    2f5c:	98 7f       	andi	r25, 0xF8	; 248
    2f5e:	e9 81       	ldd	r30, Y+1	; 0x01
    2f60:	fa 81       	ldd	r31, Y+2	; 0x02
    2f62:	85 81       	ldd	r24, Z+5	; 0x05
    2f64:	87 70       	andi	r24, 0x07	; 7
    2f66:	89 2b       	or	r24, r25
    2f68:	8c 93       	st	X, r24
    2f6a:	82 c0       	rjmp	.+260    	; 0x3070 <Timer_init+0x1c6>
        break;
    case TIMER1_ID:
        TCNT1 = Config_Ptr->timer_InitialValue;     /* Assign Timer1 initial value */
    2f6c:	ac e4       	ldi	r26, 0x4C	; 76
    2f6e:	b0 e0       	ldi	r27, 0x00	; 0
    2f70:	e9 81       	ldd	r30, Y+1	; 0x01
    2f72:	fa 81       	ldd	r31, Y+2	; 0x02
    2f74:	80 81       	ld	r24, Z
    2f76:	91 81       	ldd	r25, Z+1	; 0x01
    2f78:	11 96       	adiw	r26, 0x01	; 1
    2f7a:	9c 93       	st	X, r25
    2f7c:	8e 93       	st	-X, r24
        TCCR1A = (1 << FOC1A) | (1 << FOC1B);       /* As this is a non-PWM mode set Timer1 Force Output Compare A:B bits */
    2f7e:	ef e4       	ldi	r30, 0x4F	; 79
    2f80:	f0 e0       	ldi	r31, 0x00	; 0
    2f82:	8c e0       	ldi	r24, 0x0C	; 12
    2f84:	80 83       	st	Z, r24
        TIMSK |= (1 << TOIE1);                      /* Enable Timer1 overflow interrupt by default */
    2f86:	a9 e5       	ldi	r26, 0x59	; 89
    2f88:	b0 e0       	ldi	r27, 0x00	; 0
    2f8a:	e9 e5       	ldi	r30, 0x59	; 89
    2f8c:	f0 e0       	ldi	r31, 0x00	; 0
    2f8e:	80 81       	ld	r24, Z
    2f90:	84 60       	ori	r24, 0x04	; 4
    2f92:	8c 93       	st	X, r24
        if (Config_Ptr->timer_mode == COMPARE_MODE) /* If Compare value mode */
    2f94:	e9 81       	ldd	r30, Y+1	; 0x01
    2f96:	fa 81       	ldd	r31, Y+2	; 0x02
    2f98:	86 81       	ldd	r24, Z+6	; 0x06
    2f9a:	81 30       	cpi	r24, 0x01	; 1
    2f9c:	d9 f4       	brne	.+54     	; 0x2fd4 <Timer_init+0x12a>
        {
            TCCR1B = (1 << WGM12);                        /* Select compare mode bits WGM10= 0, WGM11= 0, WGM12= 1, WGM13= 0 */
    2f9e:	ee e4       	ldi	r30, 0x4E	; 78
    2fa0:	f0 e0       	ldi	r31, 0x00	; 0
    2fa2:	88 e0       	ldi	r24, 0x08	; 8
    2fa4:	80 83       	st	Z, r24
            OCR1A = Config_Ptr->timer_compare_MatchValue; /* Assign Timer1 Compare value */
    2fa6:	aa e4       	ldi	r26, 0x4A	; 74
    2fa8:	b0 e0       	ldi	r27, 0x00	; 0
    2faa:	e9 81       	ldd	r30, Y+1	; 0x01
    2fac:	fa 81       	ldd	r31, Y+2	; 0x02
    2fae:	82 81       	ldd	r24, Z+2	; 0x02
    2fb0:	93 81       	ldd	r25, Z+3	; 0x03
    2fb2:	11 96       	adiw	r26, 0x01	; 1
    2fb4:	9c 93       	st	X, r25
    2fb6:	8e 93       	st	-X, r24
            TIMSK &= ~(1 << TOIE1);                       /* Disable Timer1 Overflow interrupt */
    2fb8:	a9 e5       	ldi	r26, 0x59	; 89
    2fba:	b0 e0       	ldi	r27, 0x00	; 0
    2fbc:	e9 e5       	ldi	r30, 0x59	; 89
    2fbe:	f0 e0       	ldi	r31, 0x00	; 0
    2fc0:	80 81       	ld	r24, Z
    2fc2:	8b 7f       	andi	r24, 0xFB	; 251
    2fc4:	8c 93       	st	X, r24
            TIMSK |= (1 << OCIE1A);                       /* Enable Timer1 Compare value interrupt */
    2fc6:	a9 e5       	ldi	r26, 0x59	; 89
    2fc8:	b0 e0       	ldi	r27, 0x00	; 0
    2fca:	e9 e5       	ldi	r30, 0x59	; 89
    2fcc:	f0 e0       	ldi	r31, 0x00	; 0
    2fce:	80 81       	ld	r24, Z
    2fd0:	80 61       	ori	r24, 0x10	; 16
    2fd2:	8c 93       	st	X, r24
        }
        TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->timer_clock & 0x07); /* Select Timer1 Clock prescale to start start counting */
    2fd4:	ae e4       	ldi	r26, 0x4E	; 78
    2fd6:	b0 e0       	ldi	r27, 0x00	; 0
    2fd8:	ee e4       	ldi	r30, 0x4E	; 78
    2fda:	f0 e0       	ldi	r31, 0x00	; 0
    2fdc:	80 81       	ld	r24, Z
    2fde:	98 2f       	mov	r25, r24
    2fe0:	98 7f       	andi	r25, 0xF8	; 248
    2fe2:	e9 81       	ldd	r30, Y+1	; 0x01
    2fe4:	fa 81       	ldd	r31, Y+2	; 0x02
    2fe6:	85 81       	ldd	r24, Z+5	; 0x05
    2fe8:	87 70       	andi	r24, 0x07	; 7
    2fea:	89 2b       	or	r24, r25
    2fec:	8c 93       	st	X, r24
    2fee:	40 c0       	rjmp	.+128    	; 0x3070 <Timer_init+0x1c6>
        break;

    case TIMER2_ID:
        TCNT2 = Config_Ptr->timer_InitialValue;     /* Assign Timer2 initial value */
    2ff0:	a4 e4       	ldi	r26, 0x44	; 68
    2ff2:	b0 e0       	ldi	r27, 0x00	; 0
    2ff4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ff6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ff8:	80 81       	ld	r24, Z
    2ffa:	91 81       	ldd	r25, Z+1	; 0x01
    2ffc:	8c 93       	st	X, r24
        TCCR2 = (1 << FOC2);                        /* As this is a non-PWM mode set Timer2 Force Output Compare bit */
    2ffe:	e5 e4       	ldi	r30, 0x45	; 69
    3000:	f0 e0       	ldi	r31, 0x00	; 0
    3002:	80 e8       	ldi	r24, 0x80	; 128
    3004:	80 83       	st	Z, r24
        TIMSK |= (1 << TOIE2);                      /* Enable Timer2 overflow interrupt by default */
    3006:	a9 e5       	ldi	r26, 0x59	; 89
    3008:	b0 e0       	ldi	r27, 0x00	; 0
    300a:	e9 e5       	ldi	r30, 0x59	; 89
    300c:	f0 e0       	ldi	r31, 0x00	; 0
    300e:	80 81       	ld	r24, Z
    3010:	80 64       	ori	r24, 0x40	; 64
    3012:	8c 93       	st	X, r24
        if (Config_Ptr->timer_mode == COMPARE_MODE) /* If Compare value mode */
    3014:	e9 81       	ldd	r30, Y+1	; 0x01
    3016:	fa 81       	ldd	r31, Y+2	; 0x02
    3018:	86 81       	ldd	r24, Z+6	; 0x06
    301a:	81 30       	cpi	r24, 0x01	; 1
    301c:	e1 f4       	brne	.+56     	; 0x3056 <Timer_init+0x1ac>
        {
            TCCR2 |= (1 << WGM21);                       /* Select compare mode bits WGM20= 0, WGM21= 1 */
    301e:	a5 e4       	ldi	r26, 0x45	; 69
    3020:	b0 e0       	ldi	r27, 0x00	; 0
    3022:	e5 e4       	ldi	r30, 0x45	; 69
    3024:	f0 e0       	ldi	r31, 0x00	; 0
    3026:	80 81       	ld	r24, Z
    3028:	88 60       	ori	r24, 0x08	; 8
    302a:	8c 93       	st	X, r24
            OCR2 = Config_Ptr->timer_compare_MatchValue; /* Assign Timer2 Compare value */
    302c:	a3 e4       	ldi	r26, 0x43	; 67
    302e:	b0 e0       	ldi	r27, 0x00	; 0
    3030:	e9 81       	ldd	r30, Y+1	; 0x01
    3032:	fa 81       	ldd	r31, Y+2	; 0x02
    3034:	82 81       	ldd	r24, Z+2	; 0x02
    3036:	93 81       	ldd	r25, Z+3	; 0x03
    3038:	8c 93       	st	X, r24
            TIMSK &= ~(1 << TOIE2);                      /* Disable Timer2 Overflow interrupt */
    303a:	a9 e5       	ldi	r26, 0x59	; 89
    303c:	b0 e0       	ldi	r27, 0x00	; 0
    303e:	e9 e5       	ldi	r30, 0x59	; 89
    3040:	f0 e0       	ldi	r31, 0x00	; 0
    3042:	80 81       	ld	r24, Z
    3044:	8f 7b       	andi	r24, 0xBF	; 191
    3046:	8c 93       	st	X, r24
            TIMSK |= (1 << OCIE2);                       /* Enable Timer2 Compare value interrupt */
    3048:	a9 e5       	ldi	r26, 0x59	; 89
    304a:	b0 e0       	ldi	r27, 0x00	; 0
    304c:	e9 e5       	ldi	r30, 0x59	; 89
    304e:	f0 e0       	ldi	r31, 0x00	; 0
    3050:	80 81       	ld	r24, Z
    3052:	80 68       	ori	r24, 0x80	; 128
    3054:	8c 93       	st	X, r24
        }
        TCCR2 = (TCCR2 & 0xF8) | (Config_Ptr->timer_clock & 0x07); /* Select Timer2 Clock prescale to start start counting */
    3056:	a5 e4       	ldi	r26, 0x45	; 69
    3058:	b0 e0       	ldi	r27, 0x00	; 0
    305a:	e5 e4       	ldi	r30, 0x45	; 69
    305c:	f0 e0       	ldi	r31, 0x00	; 0
    305e:	80 81       	ld	r24, Z
    3060:	98 2f       	mov	r25, r24
    3062:	98 7f       	andi	r25, 0xF8	; 248
    3064:	e9 81       	ldd	r30, Y+1	; 0x01
    3066:	fa 81       	ldd	r31, Y+2	; 0x02
    3068:	85 81       	ldd	r24, Z+5	; 0x05
    306a:	87 70       	andi	r24, 0x07	; 7
    306c:	89 2b       	or	r24, r25
    306e:	8c 93       	st	X, r24
        break;
    default:
        /* Do Nothing */
        break;
    }
}
    3070:	0f 90       	pop	r0
    3072:	0f 90       	pop	r0
    3074:	0f 90       	pop	r0
    3076:	0f 90       	pop	r0
    3078:	cf 91       	pop	r28
    307a:	df 91       	pop	r29
    307c:	08 95       	ret

0000307e <Timer_deInit>:
 *
 * Return: void
 *
 */
void Timer_deInit(Timer_ID_Type timer_type)
{
    307e:	df 93       	push	r29
    3080:	cf 93       	push	r28
    3082:	00 d0       	rcall	.+0      	; 0x3084 <Timer_deInit+0x6>
    3084:	0f 92       	push	r0
    3086:	cd b7       	in	r28, 0x3d	; 61
    3088:	de b7       	in	r29, 0x3e	; 62
    308a:	89 83       	std	Y+1, r24	; 0x01
    switch (timer_type) /* Check for timer ID */
    308c:	89 81       	ldd	r24, Y+1	; 0x01
    308e:	28 2f       	mov	r18, r24
    3090:	30 e0       	ldi	r19, 0x00	; 0
    3092:	3b 83       	std	Y+3, r19	; 0x03
    3094:	2a 83       	std	Y+2, r18	; 0x02
    3096:	8a 81       	ldd	r24, Y+2	; 0x02
    3098:	9b 81       	ldd	r25, Y+3	; 0x03
    309a:	81 30       	cpi	r24, 0x01	; 1
    309c:	91 05       	cpc	r25, r1
    309e:	19 f1       	breq	.+70     	; 0x30e6 <Timer_deInit+0x68>
    30a0:	2a 81       	ldd	r18, Y+2	; 0x02
    30a2:	3b 81       	ldd	r19, Y+3	; 0x03
    30a4:	22 30       	cpi	r18, 0x02	; 2
    30a6:	31 05       	cpc	r19, r1
    30a8:	d9 f1       	breq	.+118    	; 0x3120 <Timer_deInit+0xa2>
    30aa:	8a 81       	ldd	r24, Y+2	; 0x02
    30ac:	9b 81       	ldd	r25, Y+3	; 0x03
    30ae:	00 97       	sbiw	r24, 0x00	; 0
    30b0:	09 f0       	breq	.+2      	; 0x30b4 <Timer_deInit+0x36>
    30b2:	4e c0       	rjmp	.+156    	; 0x3150 <Timer_deInit+0xd2>
    {
    case TIMER0_ID:
        TIMSK &= ~(1 << TOIE0); /* Disable Timer0 Overflow interrupt */
    30b4:	a9 e5       	ldi	r26, 0x59	; 89
    30b6:	b0 e0       	ldi	r27, 0x00	; 0
    30b8:	e9 e5       	ldi	r30, 0x59	; 89
    30ba:	f0 e0       	ldi	r31, 0x00	; 0
    30bc:	80 81       	ld	r24, Z
    30be:	8e 7f       	andi	r24, 0xFE	; 254
    30c0:	8c 93       	st	X, r24
        TIMSK &= ~(1 << OCIE0); /* Disable Timer0 Compare value interrupt */
    30c2:	a9 e5       	ldi	r26, 0x59	; 89
    30c4:	b0 e0       	ldi	r27, 0x00	; 0
    30c6:	e9 e5       	ldi	r30, 0x59	; 89
    30c8:	f0 e0       	ldi	r31, 0x00	; 0
    30ca:	80 81       	ld	r24, Z
    30cc:	8d 7f       	andi	r24, 0xFD	; 253
    30ce:	8c 93       	st	X, r24
        /* Clear All Timer0 Registers */
        TCCR0 = 0;
    30d0:	e3 e5       	ldi	r30, 0x53	; 83
    30d2:	f0 e0       	ldi	r31, 0x00	; 0
    30d4:	10 82       	st	Z, r1
        TCNT0 = 0;
    30d6:	e2 e5       	ldi	r30, 0x52	; 82
    30d8:	f0 e0       	ldi	r31, 0x00	; 0
    30da:	10 82       	st	Z, r1
        g_callBackPtr_TIMER0 = NULL_PTR; /* Assign Timer0 pointer to point to NULL*/
    30dc:	10 92 7d 01 	sts	0x017D, r1
    30e0:	10 92 7c 01 	sts	0x017C, r1
    30e4:	35 c0       	rjmp	.+106    	; 0x3150 <Timer_deInit+0xd2>
        break;
    case TIMER1_ID:
        TIMSK &= ~(1 << TOIE1);  /* Disable Timer1 Overflow interrupt */
    30e6:	a9 e5       	ldi	r26, 0x59	; 89
    30e8:	b0 e0       	ldi	r27, 0x00	; 0
    30ea:	e9 e5       	ldi	r30, 0x59	; 89
    30ec:	f0 e0       	ldi	r31, 0x00	; 0
    30ee:	80 81       	ld	r24, Z
    30f0:	8b 7f       	andi	r24, 0xFB	; 251
    30f2:	8c 93       	st	X, r24
        TIMSK &= ~(1 << OCIE1A); /* Disable Timer1 Compare value interrupt */
    30f4:	a9 e5       	ldi	r26, 0x59	; 89
    30f6:	b0 e0       	ldi	r27, 0x00	; 0
    30f8:	e9 e5       	ldi	r30, 0x59	; 89
    30fa:	f0 e0       	ldi	r31, 0x00	; 0
    30fc:	80 81       	ld	r24, Z
    30fe:	8f 7e       	andi	r24, 0xEF	; 239
    3100:	8c 93       	st	X, r24
        /* Clear All Timer1 Registers */
        TCCR1A = 0;
    3102:	ef e4       	ldi	r30, 0x4F	; 79
    3104:	f0 e0       	ldi	r31, 0x00	; 0
    3106:	10 82       	st	Z, r1
        TCCR1B = 0;
    3108:	ee e4       	ldi	r30, 0x4E	; 78
    310a:	f0 e0       	ldi	r31, 0x00	; 0
    310c:	10 82       	st	Z, r1
        TCNT1 = 0;
    310e:	ec e4       	ldi	r30, 0x4C	; 76
    3110:	f0 e0       	ldi	r31, 0x00	; 0
    3112:	11 82       	std	Z+1, r1	; 0x01
    3114:	10 82       	st	Z, r1
        g_callBackPtr_TIMER1 = NULL_PTR; /* Assign Timer1 pointer to point to NULL*/
    3116:	10 92 7f 01 	sts	0x017F, r1
    311a:	10 92 7e 01 	sts	0x017E, r1
    311e:	18 c0       	rjmp	.+48     	; 0x3150 <Timer_deInit+0xd2>
        break;
    case TIMER2_ID:
        TIMSK &= ~(1 << TOIE2); /* Disable Timer2 Overflow interrupt */
    3120:	a9 e5       	ldi	r26, 0x59	; 89
    3122:	b0 e0       	ldi	r27, 0x00	; 0
    3124:	e9 e5       	ldi	r30, 0x59	; 89
    3126:	f0 e0       	ldi	r31, 0x00	; 0
    3128:	80 81       	ld	r24, Z
    312a:	8f 7b       	andi	r24, 0xBF	; 191
    312c:	8c 93       	st	X, r24
        TIMSK &= ~(1 << OCIE2); /* Disable Timer2 Compare value interrupt */
    312e:	a9 e5       	ldi	r26, 0x59	; 89
    3130:	b0 e0       	ldi	r27, 0x00	; 0
    3132:	e9 e5       	ldi	r30, 0x59	; 89
    3134:	f0 e0       	ldi	r31, 0x00	; 0
    3136:	80 81       	ld	r24, Z
    3138:	8f 77       	andi	r24, 0x7F	; 127
    313a:	8c 93       	st	X, r24
        /* Clear All Timer2 Registers */
        TCCR2 = 0;
    313c:	e5 e4       	ldi	r30, 0x45	; 69
    313e:	f0 e0       	ldi	r31, 0x00	; 0
    3140:	10 82       	st	Z, r1
        TCNT2 = 0;
    3142:	e4 e4       	ldi	r30, 0x44	; 68
    3144:	f0 e0       	ldi	r31, 0x00	; 0
    3146:	10 82       	st	Z, r1
        g_callBackPtr_TIMER2 = NULL_PTR; /* Assign Timer1 pointer to point to NULL*/
    3148:	10 92 81 01 	sts	0x0181, r1
    314c:	10 92 80 01 	sts	0x0180, r1
        break;
    default:
        /* Do Nothing */
        break;
    }
}
    3150:	0f 90       	pop	r0
    3152:	0f 90       	pop	r0
    3154:	0f 90       	pop	r0
    3156:	cf 91       	pop	r28
    3158:	df 91       	pop	r29
    315a:	08 95       	ret

0000315c <Timer_setCallBack>:
 *
 * Return: void
 *
 */
void Timer_setCallBack(void (*a_ptr)(void), Timer_ID_Type a_timer_ID)
{
    315c:	df 93       	push	r29
    315e:	cf 93       	push	r28
    3160:	00 d0       	rcall	.+0      	; 0x3162 <Timer_setCallBack+0x6>
    3162:	00 d0       	rcall	.+0      	; 0x3164 <Timer_setCallBack+0x8>
    3164:	0f 92       	push	r0
    3166:	cd b7       	in	r28, 0x3d	; 61
    3168:	de b7       	in	r29, 0x3e	; 62
    316a:	9a 83       	std	Y+2, r25	; 0x02
    316c:	89 83       	std	Y+1, r24	; 0x01
    316e:	6b 83       	std	Y+3, r22	; 0x03
    /* Save the address of the Call back function in TimerX global variable */
    switch (a_timer_ID)
    3170:	8b 81       	ldd	r24, Y+3	; 0x03
    3172:	28 2f       	mov	r18, r24
    3174:	30 e0       	ldi	r19, 0x00	; 0
    3176:	3d 83       	std	Y+5, r19	; 0x05
    3178:	2c 83       	std	Y+4, r18	; 0x04
    317a:	8c 81       	ldd	r24, Y+4	; 0x04
    317c:	9d 81       	ldd	r25, Y+5	; 0x05
    317e:	81 30       	cpi	r24, 0x01	; 1
    3180:	91 05       	cpc	r25, r1
    3182:	81 f0       	breq	.+32     	; 0x31a4 <Timer_setCallBack+0x48>
    3184:	2c 81       	ldd	r18, Y+4	; 0x04
    3186:	3d 81       	ldd	r19, Y+5	; 0x05
    3188:	22 30       	cpi	r18, 0x02	; 2
    318a:	31 05       	cpc	r19, r1
    318c:	91 f0       	breq	.+36     	; 0x31b2 <Timer_setCallBack+0x56>
    318e:	8c 81       	ldd	r24, Y+4	; 0x04
    3190:	9d 81       	ldd	r25, Y+5	; 0x05
    3192:	00 97       	sbiw	r24, 0x00	; 0
    3194:	a1 f4       	brne	.+40     	; 0x31be <Timer_setCallBack+0x62>
    {
    case TIMER0_ID:
        /* Save the address of the Call back function in g_callBackPtr_TIMER0 global variable */
        g_callBackPtr_TIMER0 = a_ptr;
    3196:	89 81       	ldd	r24, Y+1	; 0x01
    3198:	9a 81       	ldd	r25, Y+2	; 0x02
    319a:	90 93 7d 01 	sts	0x017D, r25
    319e:	80 93 7c 01 	sts	0x017C, r24
    31a2:	0d c0       	rjmp	.+26     	; 0x31be <Timer_setCallBack+0x62>
        break;
    case TIMER1_ID:
        /* Save the address of the Call back function in g_callBackPtr_TIMER1 global variable */
        g_callBackPtr_TIMER1 = a_ptr;
    31a4:	89 81       	ldd	r24, Y+1	; 0x01
    31a6:	9a 81       	ldd	r25, Y+2	; 0x02
    31a8:	90 93 7f 01 	sts	0x017F, r25
    31ac:	80 93 7e 01 	sts	0x017E, r24
    31b0:	06 c0       	rjmp	.+12     	; 0x31be <Timer_setCallBack+0x62>
        break;
    case TIMER2_ID:
        /* Save the address of the Call back function in g_callBackPtr_TIMER2 global variable */
        g_callBackPtr_TIMER2 = a_ptr;
    31b2:	89 81       	ldd	r24, Y+1	; 0x01
    31b4:	9a 81       	ldd	r25, Y+2	; 0x02
    31b6:	90 93 81 01 	sts	0x0181, r25
    31ba:	80 93 80 01 	sts	0x0180, r24
        break;
    default:
        /* Do Nothing */
        break;
    }
}
    31be:	0f 90       	pop	r0
    31c0:	0f 90       	pop	r0
    31c2:	0f 90       	pop	r0
    31c4:	0f 90       	pop	r0
    31c6:	0f 90       	pop	r0
    31c8:	cf 91       	pop	r28
    31ca:	df 91       	pop	r29
    31cc:	08 95       	ret

000031ce <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *Config_Ptr)
{
    31ce:	df 93       	push	r29
    31d0:	cf 93       	push	r28
    31d2:	00 d0       	rcall	.+0      	; 0x31d4 <UART_init+0x6>
    31d4:	00 d0       	rcall	.+0      	; 0x31d6 <UART_init+0x8>
    31d6:	cd b7       	in	r28, 0x3d	; 61
    31d8:	de b7       	in	r29, 0x3e	; 62
    31da:	9c 83       	std	Y+4, r25	; 0x04
    31dc:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    31de:	1a 82       	std	Y+2, r1	; 0x02
    31e0:	19 82       	std	Y+1, r1	; 0x01

	/* Set U2X = 1 for double transmission speed */
	UCSRA = (1 << U2X);
    31e2:	eb e2       	ldi	r30, 0x2B	; 43
    31e4:	f0 e0       	ldi	r31, 0x00	; 0
    31e6:	82 e0       	ldi	r24, 0x02	; 2
    31e8:	80 83       	st	Z, r24
	 * RXEN  = 1: Enable Receiver
	 * TXEN  = 1: Enable Transmitter
	 * UCSZ2 = 0: Configure for 5, 6, 7, or 8-bit data mode (not used for 8-bit mode)
	 * RXB8 and TXB8: Not used in 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1 << RXEN) | (1 << TXEN);
    31ea:	ea e2       	ldi	r30, 0x2A	; 42
    31ec:	f0 e0       	ldi	r31, 0x00	; 0
    31ee:	88 e1       	ldi	r24, 0x18	; 24
    31f0:	80 83       	st	Z, r24
	 * UPM1:0  = 00: Disable parity bit (no parity)
	 * USBS    = 0: Configure for one stop bit
	 * UCSZ1:0 = 11: Set for 8-bit data mode
	 * UCPOL   = 0: Not used in asynchronous operation (only for synchronous)
	 ***********************************************************************/
	UCSRC = (1 << URSEL) | (Config_Ptr->bit_data << UCSZ0)
    31f2:	a0 e4       	ldi	r26, 0x40	; 64
    31f4:	b0 e0       	ldi	r27, 0x00	; 0
    31f6:	eb 81       	ldd	r30, Y+3	; 0x03
    31f8:	fc 81       	ldd	r31, Y+4	; 0x04
    31fa:	80 81       	ld	r24, Z
    31fc:	88 2f       	mov	r24, r24
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	88 0f       	add	r24, r24
    3202:	99 1f       	adc	r25, r25
    3204:	28 2f       	mov	r18, r24
    3206:	20 68       	ori	r18, 0x80	; 128
    3208:	eb 81       	ldd	r30, Y+3	; 0x03
    320a:	fc 81       	ldd	r31, Y+4	; 0x04
    320c:	81 81       	ldd	r24, Z+1	; 0x01
    320e:	88 2f       	mov	r24, r24
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	82 95       	swap	r24
    3214:	92 95       	swap	r25
    3216:	90 7f       	andi	r25, 0xF0	; 240
    3218:	98 27       	eor	r25, r24
    321a:	80 7f       	andi	r24, 0xF0	; 240
    321c:	98 27       	eor	r25, r24
    321e:	28 2b       	or	r18, r24
    3220:	eb 81       	ldd	r30, Y+3	; 0x03
    3222:	fc 81       	ldd	r31, Y+4	; 0x04
    3224:	82 81       	ldd	r24, Z+2	; 0x02
    3226:	88 2f       	mov	r24, r24
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	88 0f       	add	r24, r24
    322c:	99 1f       	adc	r25, r25
    322e:	88 0f       	add	r24, r24
    3230:	99 1f       	adc	r25, r25
    3232:	88 0f       	add	r24, r24
    3234:	99 1f       	adc	r25, r25
    3236:	82 2b       	or	r24, r18
    3238:	8c 93       	st	X, r24
			| (Config_Ptr->parity << UPM0) | (Config_Ptr->stop_bit << USBS);

	/* Calculate the UBRR register value */
	ubrr_value = (uint16) (((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    323a:	eb 81       	ldd	r30, Y+3	; 0x03
    323c:	fc 81       	ldd	r31, Y+4	; 0x04
    323e:	83 81       	ldd	r24, Z+3	; 0x03
    3240:	94 81       	ldd	r25, Z+4	; 0x04
    3242:	a5 81       	ldd	r26, Z+5	; 0x05
    3244:	b6 81       	ldd	r27, Z+6	; 0x06
    3246:	88 0f       	add	r24, r24
    3248:	99 1f       	adc	r25, r25
    324a:	aa 1f       	adc	r26, r26
    324c:	bb 1f       	adc	r27, r27
    324e:	88 0f       	add	r24, r24
    3250:	99 1f       	adc	r25, r25
    3252:	aa 1f       	adc	r26, r26
    3254:	bb 1f       	adc	r27, r27
    3256:	88 0f       	add	r24, r24
    3258:	99 1f       	adc	r25, r25
    325a:	aa 1f       	adc	r26, r26
    325c:	bb 1f       	adc	r27, r27
    325e:	9c 01       	movw	r18, r24
    3260:	ad 01       	movw	r20, r26
    3262:	80 e0       	ldi	r24, 0x00	; 0
    3264:	92 e1       	ldi	r25, 0x12	; 18
    3266:	aa e7       	ldi	r26, 0x7A	; 122
    3268:	b0 e0       	ldi	r27, 0x00	; 0
    326a:	bc 01       	movw	r22, r24
    326c:	cd 01       	movw	r24, r26
    326e:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__udivmodsi4>
    3272:	da 01       	movw	r26, r20
    3274:	c9 01       	movw	r24, r18
    3276:	01 97       	sbiw	r24, 0x01	; 1
    3278:	9a 83       	std	Y+2, r25	; 0x02
    327a:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value >> 8;
    327c:	e0 e4       	ldi	r30, 0x40	; 64
    327e:	f0 e0       	ldi	r31, 0x00	; 0
    3280:	89 81       	ldd	r24, Y+1	; 0x01
    3282:	9a 81       	ldd	r25, Y+2	; 0x02
    3284:	89 2f       	mov	r24, r25
    3286:	99 27       	eor	r25, r25
    3288:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    328a:	e9 e2       	ldi	r30, 0x29	; 41
    328c:	f0 e0       	ldi	r31, 0x00	; 0
    328e:	89 81       	ldd	r24, Y+1	; 0x01
    3290:	80 83       	st	Z, r24
}
    3292:	0f 90       	pop	r0
    3294:	0f 90       	pop	r0
    3296:	0f 90       	pop	r0
    3298:	0f 90       	pop	r0
    329a:	cf 91       	pop	r28
    329c:	df 91       	pop	r29
    329e:	08 95       	ret

000032a0 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    32a0:	df 93       	push	r29
    32a2:	cf 93       	push	r28
    32a4:	0f 92       	push	r0
    32a6:	cd b7       	in	r28, 0x3d	; 61
    32a8:	de b7       	in	r29, 0x3e	; 62
    32aa:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while (BIT_IS_CLEAR(UCSRA, UDRE))
    32ac:	eb e2       	ldi	r30, 0x2B	; 43
    32ae:	f0 e0       	ldi	r31, 0x00	; 0
    32b0:	80 81       	ld	r24, Z
    32b2:	88 2f       	mov	r24, r24
    32b4:	90 e0       	ldi	r25, 0x00	; 0
    32b6:	80 72       	andi	r24, 0x20	; 32
    32b8:	90 70       	andi	r25, 0x00	; 0
    32ba:	00 97       	sbiw	r24, 0x00	; 0
    32bc:	b9 f3       	breq	.-18     	; 0x32ac <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    32be:	ec e2       	ldi	r30, 0x2C	; 44
    32c0:	f0 e0       	ldi	r31, 0x00	; 0
    32c2:	89 81       	ldd	r24, Y+1	; 0x01
    32c4:	80 83       	st	Z, r24
	/************************* Another Method *************************
	 UDR = data;
	 while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	 SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    32c6:	0f 90       	pop	r0
    32c8:	cf 91       	pop	r28
    32ca:	df 91       	pop	r29
    32cc:	08 95       	ret

000032ce <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    32ce:	df 93       	push	r29
    32d0:	cf 93       	push	r28
    32d2:	cd b7       	in	r28, 0x3d	; 61
    32d4:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while (BIT_IS_CLEAR(UCSRA, RXC))
    32d6:	eb e2       	ldi	r30, 0x2B	; 43
    32d8:	f0 e0       	ldi	r31, 0x00	; 0
    32da:	80 81       	ld	r24, Z
    32dc:	88 23       	and	r24, r24
    32de:	dc f7       	brge	.-10     	; 0x32d6 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    32e0:	ec e2       	ldi	r30, 0x2C	; 44
    32e2:	f0 e0       	ldi	r31, 0x00	; 0
    32e4:	80 81       	ld	r24, Z
}
    32e6:	cf 91       	pop	r28
    32e8:	df 91       	pop	r29
    32ea:	08 95       	ret

000032ec <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    32ec:	df 93       	push	r29
    32ee:	cf 93       	push	r28
    32f0:	00 d0       	rcall	.+0      	; 0x32f2 <UART_sendString+0x6>
    32f2:	0f 92       	push	r0
    32f4:	cd b7       	in	r28, 0x3d	; 61
    32f6:	de b7       	in	r29, 0x3e	; 62
    32f8:	9b 83       	std	Y+3, r25	; 0x03
    32fa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    32fc:	19 82       	std	Y+1, r1	; 0x01
    32fe:	0e c0       	rjmp	.+28     	; 0x331c <UART_sendString+0x30>

	/* Send the whole string */
	while (Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3300:	89 81       	ldd	r24, Y+1	; 0x01
    3302:	28 2f       	mov	r18, r24
    3304:	30 e0       	ldi	r19, 0x00	; 0
    3306:	8a 81       	ldd	r24, Y+2	; 0x02
    3308:	9b 81       	ldd	r25, Y+3	; 0x03
    330a:	fc 01       	movw	r30, r24
    330c:	e2 0f       	add	r30, r18
    330e:	f3 1f       	adc	r31, r19
    3310:	80 81       	ld	r24, Z
    3312:	0e 94 50 19 	call	0x32a0	; 0x32a0 <UART_sendByte>
		i++;
    3316:	89 81       	ldd	r24, Y+1	; 0x01
    3318:	8f 5f       	subi	r24, 0xFF	; 255
    331a:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while (Str[i] != '\0')
    331c:	89 81       	ldd	r24, Y+1	; 0x01
    331e:	28 2f       	mov	r18, r24
    3320:	30 e0       	ldi	r19, 0x00	; 0
    3322:	8a 81       	ldd	r24, Y+2	; 0x02
    3324:	9b 81       	ldd	r25, Y+3	; 0x03
    3326:	fc 01       	movw	r30, r24
    3328:	e2 0f       	add	r30, r18
    332a:	f3 1f       	adc	r31, r19
    332c:	80 81       	ld	r24, Z
    332e:	88 23       	and	r24, r24
    3330:	39 f7       	brne	.-50     	; 0x3300 <UART_sendString+0x14>
	 {
	 UART_sendByte(*Str);
	 Str++;
	 }
	 *******************************************************************/
}
    3332:	0f 90       	pop	r0
    3334:	0f 90       	pop	r0
    3336:	0f 90       	pop	r0
    3338:	cf 91       	pop	r28
    333a:	df 91       	pop	r29
    333c:	08 95       	ret

0000333e <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    333e:	0f 93       	push	r16
    3340:	1f 93       	push	r17
    3342:	df 93       	push	r29
    3344:	cf 93       	push	r28
    3346:	00 d0       	rcall	.+0      	; 0x3348 <UART_receiveString+0xa>
    3348:	0f 92       	push	r0
    334a:	cd b7       	in	r28, 0x3d	; 61
    334c:	de b7       	in	r29, 0x3e	; 62
    334e:	9b 83       	std	Y+3, r25	; 0x03
    3350:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3352:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3354:	89 81       	ldd	r24, Y+1	; 0x01
    3356:	28 2f       	mov	r18, r24
    3358:	30 e0       	ldi	r19, 0x00	; 0
    335a:	8a 81       	ldd	r24, Y+2	; 0x02
    335c:	9b 81       	ldd	r25, Y+3	; 0x03
    335e:	8c 01       	movw	r16, r24
    3360:	02 0f       	add	r16, r18
    3362:	13 1f       	adc	r17, r19
    3364:	0e 94 67 19 	call	0x32ce	; 0x32ce <UART_recieveByte>
    3368:	f8 01       	movw	r30, r16
    336a:	80 83       	st	Z, r24
    336c:	0f c0       	rjmp	.+30     	; 0x338c <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while (Str[i] != '#')
	{
		i++;
    336e:	89 81       	ldd	r24, Y+1	; 0x01
    3370:	8f 5f       	subi	r24, 0xFF	; 255
    3372:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3374:	89 81       	ldd	r24, Y+1	; 0x01
    3376:	28 2f       	mov	r18, r24
    3378:	30 e0       	ldi	r19, 0x00	; 0
    337a:	8a 81       	ldd	r24, Y+2	; 0x02
    337c:	9b 81       	ldd	r25, Y+3	; 0x03
    337e:	8c 01       	movw	r16, r24
    3380:	02 0f       	add	r16, r18
    3382:	13 1f       	adc	r17, r19
    3384:	0e 94 67 19 	call	0x32ce	; 0x32ce <UART_recieveByte>
    3388:	f8 01       	movw	r30, r16
    338a:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while (Str[i] != '#')
    338c:	89 81       	ldd	r24, Y+1	; 0x01
    338e:	28 2f       	mov	r18, r24
    3390:	30 e0       	ldi	r19, 0x00	; 0
    3392:	8a 81       	ldd	r24, Y+2	; 0x02
    3394:	9b 81       	ldd	r25, Y+3	; 0x03
    3396:	fc 01       	movw	r30, r24
    3398:	e2 0f       	add	r30, r18
    339a:	f3 1f       	adc	r31, r19
    339c:	80 81       	ld	r24, Z
    339e:	83 32       	cpi	r24, 0x23	; 35
    33a0:	31 f7       	brne	.-52     	; 0x336e <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    33a2:	89 81       	ldd	r24, Y+1	; 0x01
    33a4:	28 2f       	mov	r18, r24
    33a6:	30 e0       	ldi	r19, 0x00	; 0
    33a8:	8a 81       	ldd	r24, Y+2	; 0x02
    33aa:	9b 81       	ldd	r25, Y+3	; 0x03
    33ac:	fc 01       	movw	r30, r24
    33ae:	e2 0f       	add	r30, r18
    33b0:	f3 1f       	adc	r31, r19
    33b2:	10 82       	st	Z, r1
}
    33b4:	0f 90       	pop	r0
    33b6:	0f 90       	pop	r0
    33b8:	0f 90       	pop	r0
    33ba:	cf 91       	pop	r28
    33bc:	df 91       	pop	r29
    33be:	1f 91       	pop	r17
    33c0:	0f 91       	pop	r16
    33c2:	08 95       	ret

000033c4 <__udivmodsi4>:
    33c4:	a1 e2       	ldi	r26, 0x21	; 33
    33c6:	1a 2e       	mov	r1, r26
    33c8:	aa 1b       	sub	r26, r26
    33ca:	bb 1b       	sub	r27, r27
    33cc:	fd 01       	movw	r30, r26
    33ce:	0d c0       	rjmp	.+26     	; 0x33ea <__udivmodsi4_ep>

000033d0 <__udivmodsi4_loop>:
    33d0:	aa 1f       	adc	r26, r26
    33d2:	bb 1f       	adc	r27, r27
    33d4:	ee 1f       	adc	r30, r30
    33d6:	ff 1f       	adc	r31, r31
    33d8:	a2 17       	cp	r26, r18
    33da:	b3 07       	cpc	r27, r19
    33dc:	e4 07       	cpc	r30, r20
    33de:	f5 07       	cpc	r31, r21
    33e0:	20 f0       	brcs	.+8      	; 0x33ea <__udivmodsi4_ep>
    33e2:	a2 1b       	sub	r26, r18
    33e4:	b3 0b       	sbc	r27, r19
    33e6:	e4 0b       	sbc	r30, r20
    33e8:	f5 0b       	sbc	r31, r21

000033ea <__udivmodsi4_ep>:
    33ea:	66 1f       	adc	r22, r22
    33ec:	77 1f       	adc	r23, r23
    33ee:	88 1f       	adc	r24, r24
    33f0:	99 1f       	adc	r25, r25
    33f2:	1a 94       	dec	r1
    33f4:	69 f7       	brne	.-38     	; 0x33d0 <__udivmodsi4_loop>
    33f6:	60 95       	com	r22
    33f8:	70 95       	com	r23
    33fa:	80 95       	com	r24
    33fc:	90 95       	com	r25
    33fe:	9b 01       	movw	r18, r22
    3400:	ac 01       	movw	r20, r24
    3402:	bd 01       	movw	r22, r26
    3404:	cf 01       	movw	r24, r30
    3406:	08 95       	ret

00003408 <__prologue_saves__>:
    3408:	2f 92       	push	r2
    340a:	3f 92       	push	r3
    340c:	4f 92       	push	r4
    340e:	5f 92       	push	r5
    3410:	6f 92       	push	r6
    3412:	7f 92       	push	r7
    3414:	8f 92       	push	r8
    3416:	9f 92       	push	r9
    3418:	af 92       	push	r10
    341a:	bf 92       	push	r11
    341c:	cf 92       	push	r12
    341e:	df 92       	push	r13
    3420:	ef 92       	push	r14
    3422:	ff 92       	push	r15
    3424:	0f 93       	push	r16
    3426:	1f 93       	push	r17
    3428:	cf 93       	push	r28
    342a:	df 93       	push	r29
    342c:	cd b7       	in	r28, 0x3d	; 61
    342e:	de b7       	in	r29, 0x3e	; 62
    3430:	ca 1b       	sub	r28, r26
    3432:	db 0b       	sbc	r29, r27
    3434:	0f b6       	in	r0, 0x3f	; 63
    3436:	f8 94       	cli
    3438:	de bf       	out	0x3e, r29	; 62
    343a:	0f be       	out	0x3f, r0	; 63
    343c:	cd bf       	out	0x3d, r28	; 61
    343e:	09 94       	ijmp

00003440 <__epilogue_restores__>:
    3440:	2a 88       	ldd	r2, Y+18	; 0x12
    3442:	39 88       	ldd	r3, Y+17	; 0x11
    3444:	48 88       	ldd	r4, Y+16	; 0x10
    3446:	5f 84       	ldd	r5, Y+15	; 0x0f
    3448:	6e 84       	ldd	r6, Y+14	; 0x0e
    344a:	7d 84       	ldd	r7, Y+13	; 0x0d
    344c:	8c 84       	ldd	r8, Y+12	; 0x0c
    344e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3450:	aa 84       	ldd	r10, Y+10	; 0x0a
    3452:	b9 84       	ldd	r11, Y+9	; 0x09
    3454:	c8 84       	ldd	r12, Y+8	; 0x08
    3456:	df 80       	ldd	r13, Y+7	; 0x07
    3458:	ee 80       	ldd	r14, Y+6	; 0x06
    345a:	fd 80       	ldd	r15, Y+5	; 0x05
    345c:	0c 81       	ldd	r16, Y+4	; 0x04
    345e:	1b 81       	ldd	r17, Y+3	; 0x03
    3460:	aa 81       	ldd	r26, Y+2	; 0x02
    3462:	b9 81       	ldd	r27, Y+1	; 0x01
    3464:	ce 0f       	add	r28, r30
    3466:	d1 1d       	adc	r29, r1
    3468:	0f b6       	in	r0, 0x3f	; 63
    346a:	f8 94       	cli
    346c:	de bf       	out	0x3e, r29	; 62
    346e:	0f be       	out	0x3f, r0	; 63
    3470:	cd bf       	out	0x3d, r28	; 61
    3472:	ed 01       	movw	r28, r26
    3474:	08 95       	ret

00003476 <itoa>:
    3476:	fb 01       	movw	r30, r22
    3478:	9f 01       	movw	r18, r30
    347a:	e8 94       	clt
    347c:	42 30       	cpi	r20, 0x02	; 2
    347e:	c4 f0       	brlt	.+48     	; 0x34b0 <itoa+0x3a>
    3480:	45 32       	cpi	r20, 0x25	; 37
    3482:	b4 f4       	brge	.+44     	; 0x34b0 <itoa+0x3a>
    3484:	4a 30       	cpi	r20, 0x0A	; 10
    3486:	29 f4       	brne	.+10     	; 0x3492 <itoa+0x1c>
    3488:	97 fb       	bst	r25, 7
    348a:	1e f4       	brtc	.+6      	; 0x3492 <itoa+0x1c>
    348c:	90 95       	com	r25
    348e:	81 95       	neg	r24
    3490:	9f 4f       	sbci	r25, 0xFF	; 255
    3492:	64 2f       	mov	r22, r20
    3494:	77 27       	eor	r23, r23
    3496:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <__udivmodhi4>
    349a:	80 5d       	subi	r24, 0xD0	; 208
    349c:	8a 33       	cpi	r24, 0x3A	; 58
    349e:	0c f0       	brlt	.+2      	; 0x34a2 <itoa+0x2c>
    34a0:	89 5d       	subi	r24, 0xD9	; 217
    34a2:	81 93       	st	Z+, r24
    34a4:	cb 01       	movw	r24, r22
    34a6:	00 97       	sbiw	r24, 0x00	; 0
    34a8:	a1 f7       	brne	.-24     	; 0x3492 <itoa+0x1c>
    34aa:	16 f4       	brtc	.+4      	; 0x34b0 <itoa+0x3a>
    34ac:	5d e2       	ldi	r21, 0x2D	; 45
    34ae:	51 93       	st	Z+, r21
    34b0:	10 82       	st	Z, r1
    34b2:	c9 01       	movw	r24, r18
    34b4:	0c 94 5c 1a 	jmp	0x34b8	; 0x34b8 <strrev>

000034b8 <strrev>:
    34b8:	dc 01       	movw	r26, r24
    34ba:	fc 01       	movw	r30, r24
    34bc:	67 2f       	mov	r22, r23
    34be:	71 91       	ld	r23, Z+
    34c0:	77 23       	and	r23, r23
    34c2:	e1 f7       	brne	.-8      	; 0x34bc <strrev+0x4>
    34c4:	32 97       	sbiw	r30, 0x02	; 2
    34c6:	04 c0       	rjmp	.+8      	; 0x34d0 <strrev+0x18>
    34c8:	7c 91       	ld	r23, X
    34ca:	6d 93       	st	X+, r22
    34cc:	70 83       	st	Z, r23
    34ce:	62 91       	ld	r22, -Z
    34d0:	ae 17       	cp	r26, r30
    34d2:	bf 07       	cpc	r27, r31
    34d4:	c8 f3       	brcs	.-14     	; 0x34c8 <strrev+0x10>
    34d6:	08 95       	ret

000034d8 <__udivmodhi4>:
    34d8:	aa 1b       	sub	r26, r26
    34da:	bb 1b       	sub	r27, r27
    34dc:	51 e1       	ldi	r21, 0x11	; 17
    34de:	07 c0       	rjmp	.+14     	; 0x34ee <__udivmodhi4_ep>

000034e0 <__udivmodhi4_loop>:
    34e0:	aa 1f       	adc	r26, r26
    34e2:	bb 1f       	adc	r27, r27
    34e4:	a6 17       	cp	r26, r22
    34e6:	b7 07       	cpc	r27, r23
    34e8:	10 f0       	brcs	.+4      	; 0x34ee <__udivmodhi4_ep>
    34ea:	a6 1b       	sub	r26, r22
    34ec:	b7 0b       	sbc	r27, r23

000034ee <__udivmodhi4_ep>:
    34ee:	88 1f       	adc	r24, r24
    34f0:	99 1f       	adc	r25, r25
    34f2:	5a 95       	dec	r21
    34f4:	a9 f7       	brne	.-22     	; 0x34e0 <__udivmodhi4_loop>
    34f6:	80 95       	com	r24
    34f8:	90 95       	com	r25
    34fa:	bc 01       	movw	r22, r24
    34fc:	cd 01       	movw	r24, r26
    34fe:	08 95       	ret

00003500 <_exit>:
    3500:	f8 94       	cli

00003502 <__stop_program>:
    3502:	ff cf       	rjmp	.-2      	; 0x3502 <__stop_program>
