
MCU_II_Mini_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f5e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013e  00800060  00002f5e  00002fd2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002610  00000000  00000000  00003110  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ff1  00000000  00000000  00005720  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000220  00000000  00000000  00006711  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000278  00000000  00000000  00006931  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a72  00000000  00000000  00006ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000177d  00000000  00000000  0000961b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015b6  00000000  00000000  0000ad98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000240  00000000  00000000  0000c350  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000361  00000000  00000000  0000c590  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000df4  00000000  00000000  0000c8f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000d6e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e5       	ldi	r30, 0x5E	; 94
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 39       	cpi	r26, 0x9E	; 158
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <main>
      7a:	0c 94 ad 17 	jmp	0x2f5a	; 0x2f5a <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__ashldi3>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	df 93       	push	r29
      8a:	cf 93       	push	r28
      8c:	cd b7       	in	r28, 0x3d	; 61
      8e:	de b7       	in	r29, 0x3e	; 62
      90:	60 97       	sbiw	r28, 0x10	; 16
      92:	0f b6       	in	r0, 0x3f	; 63
      94:	f8 94       	cli
      96:	de bf       	out	0x3e, r29	; 62
      98:	0f be       	out	0x3f, r0	; 63
      9a:	cd bf       	out	0x3d, r28	; 61
      9c:	a8 2f       	mov	r26, r24
      9e:	00 23       	and	r16, r16
      a0:	09 f4       	brne	.+2      	; 0xa4 <__ashldi3+0x22>
      a2:	61 c0       	rjmp	.+194    	; 0x166 <__ashldi3+0xe4>
      a4:	7e 01       	movw	r14, r28
      a6:	08 94       	sec
      a8:	e1 1c       	adc	r14, r1
      aa:	f1 1c       	adc	r15, r1
      ac:	88 e0       	ldi	r24, 0x08	; 8
      ae:	f7 01       	movw	r30, r14
      b0:	11 92       	st	Z+, r1
      b2:	8a 95       	dec	r24
      b4:	e9 f7       	brne	.-6      	; 0xb0 <__ashldi3+0x2e>
      b6:	29 83       	std	Y+1, r18	; 0x01
      b8:	3a 83       	std	Y+2, r19	; 0x02
      ba:	4b 83       	std	Y+3, r20	; 0x03
      bc:	5c 83       	std	Y+4, r21	; 0x04
      be:	6d 83       	std	Y+5, r22	; 0x05
      c0:	7e 83       	std	Y+6, r23	; 0x06
      c2:	af 83       	std	Y+7, r26	; 0x07
      c4:	98 87       	std	Y+8, r25	; 0x08
      c6:	80 e2       	ldi	r24, 0x20	; 32
      c8:	80 1b       	sub	r24, r16
      ca:	e8 2f       	mov	r30, r24
      cc:	ff 27       	eor	r31, r31
      ce:	e7 fd       	sbrc	r30, 7
      d0:	f0 95       	com	r31
      d2:	49 81       	ldd	r20, Y+1	; 0x01
      d4:	5a 81       	ldd	r21, Y+2	; 0x02
      d6:	6b 81       	ldd	r22, Y+3	; 0x03
      d8:	7c 81       	ldd	r23, Y+4	; 0x04
      da:	18 16       	cp	r1, r24
      dc:	84 f0       	brlt	.+32     	; 0xfe <__ashldi3+0x7c>
      de:	19 86       	std	Y+9, r1	; 0x09
      e0:	1a 86       	std	Y+10, r1	; 0x0a
      e2:	1b 86       	std	Y+11, r1	; 0x0b
      e4:	1c 86       	std	Y+12, r1	; 0x0c
      e6:	88 27       	eor	r24, r24
      e8:	99 27       	eor	r25, r25
      ea:	8e 1b       	sub	r24, r30
      ec:	9f 0b       	sbc	r25, r31
      ee:	04 c0       	rjmp	.+8      	; 0xf8 <__ashldi3+0x76>
      f0:	44 0f       	add	r20, r20
      f2:	55 1f       	adc	r21, r21
      f4:	66 1f       	adc	r22, r22
      f6:	77 1f       	adc	r23, r23
      f8:	8a 95       	dec	r24
      fa:	d2 f7       	brpl	.-12     	; 0xf0 <__ashldi3+0x6e>
      fc:	28 c0       	rjmp	.+80     	; 0x14e <__ashldi3+0xcc>
      fe:	20 2f       	mov	r18, r16
     100:	33 27       	eor	r19, r19
     102:	27 fd       	sbrc	r18, 7
     104:	30 95       	com	r19
     106:	db 01       	movw	r26, r22
     108:	ca 01       	movw	r24, r20
     10a:	02 2e       	mov	r0, r18
     10c:	04 c0       	rjmp	.+8      	; 0x116 <__ashldi3+0x94>
     10e:	88 0f       	add	r24, r24
     110:	99 1f       	adc	r25, r25
     112:	aa 1f       	adc	r26, r26
     114:	bb 1f       	adc	r27, r27
     116:	0a 94       	dec	r0
     118:	d2 f7       	brpl	.-12     	; 0x10e <__ashldi3+0x8c>
     11a:	89 87       	std	Y+9, r24	; 0x09
     11c:	9a 87       	std	Y+10, r25	; 0x0a
     11e:	ab 87       	std	Y+11, r26	; 0x0b
     120:	bc 87       	std	Y+12, r27	; 0x0c
     122:	04 c0       	rjmp	.+8      	; 0x12c <__ashldi3+0xaa>
     124:	76 95       	lsr	r23
     126:	67 95       	ror	r22
     128:	57 95       	ror	r21
     12a:	47 95       	ror	r20
     12c:	ea 95       	dec	r30
     12e:	d2 f7       	brpl	.-12     	; 0x124 <__ashldi3+0xa2>
     130:	8d 81       	ldd	r24, Y+5	; 0x05
     132:	9e 81       	ldd	r25, Y+6	; 0x06
     134:	af 81       	ldd	r26, Y+7	; 0x07
     136:	b8 85       	ldd	r27, Y+8	; 0x08
     138:	04 c0       	rjmp	.+8      	; 0x142 <__ashldi3+0xc0>
     13a:	88 0f       	add	r24, r24
     13c:	99 1f       	adc	r25, r25
     13e:	aa 1f       	adc	r26, r26
     140:	bb 1f       	adc	r27, r27
     142:	2a 95       	dec	r18
     144:	d2 f7       	brpl	.-12     	; 0x13a <__ashldi3+0xb8>
     146:	48 2b       	or	r20, r24
     148:	59 2b       	or	r21, r25
     14a:	6a 2b       	or	r22, r26
     14c:	7b 2b       	or	r23, r27
     14e:	4d 87       	std	Y+13, r20	; 0x0d
     150:	5e 87       	std	Y+14, r21	; 0x0e
     152:	6f 87       	std	Y+15, r22	; 0x0f
     154:	78 8b       	std	Y+16, r23	; 0x10
     156:	29 85       	ldd	r18, Y+9	; 0x09
     158:	3a 85       	ldd	r19, Y+10	; 0x0a
     15a:	4b 85       	ldd	r20, Y+11	; 0x0b
     15c:	5c 85       	ldd	r21, Y+12	; 0x0c
     15e:	6d 85       	ldd	r22, Y+13	; 0x0d
     160:	7e 85       	ldd	r23, Y+14	; 0x0e
     162:	af 85       	ldd	r26, Y+15	; 0x0f
     164:	98 89       	ldd	r25, Y+16	; 0x10
     166:	8a 2f       	mov	r24, r26
     168:	60 96       	adiw	r28, 0x10	; 16
     16a:	0f b6       	in	r0, 0x3f	; 63
     16c:	f8 94       	cli
     16e:	de bf       	out	0x3e, r29	; 62
     170:	0f be       	out	0x3f, r0	; 63
     172:	cd bf       	out	0x3d, r28	; 61
     174:	cf 91       	pop	r28
     176:	df 91       	pop	r29
     178:	0f 91       	pop	r16
     17a:	ff 90       	pop	r15
     17c:	ef 90       	pop	r14
     17e:	08 95       	ret

00000180 <__fixunssfsi>:
     180:	ef 92       	push	r14
     182:	ff 92       	push	r15
     184:	0f 93       	push	r16
     186:	1f 93       	push	r17
     188:	7b 01       	movw	r14, r22
     18a:	8c 01       	movw	r16, r24
     18c:	20 e0       	ldi	r18, 0x00	; 0
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	40 e0       	ldi	r20, 0x00	; 0
     192:	5f e4       	ldi	r21, 0x4F	; 79
     194:	0e 94 48 05 	call	0xa90	; 0xa90 <__gesf2>
     198:	88 23       	and	r24, r24
     19a:	8c f0       	brlt	.+34     	; 0x1be <__fixunssfsi+0x3e>
     19c:	c8 01       	movw	r24, r16
     19e:	b7 01       	movw	r22, r14
     1a0:	20 e0       	ldi	r18, 0x00	; 0
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	40 e0       	ldi	r20, 0x00	; 0
     1a6:	5f e4       	ldi	r21, 0x4F	; 79
     1a8:	0e 94 14 03 	call	0x628	; 0x628 <__subsf3>
     1ac:	0e 94 06 06 	call	0xc0c	; 0xc0c <__fixsfsi>
     1b0:	9b 01       	movw	r18, r22
     1b2:	ac 01       	movw	r20, r24
     1b4:	20 50       	subi	r18, 0x00	; 0
     1b6:	30 40       	sbci	r19, 0x00	; 0
     1b8:	40 40       	sbci	r20, 0x00	; 0
     1ba:	50 48       	sbci	r21, 0x80	; 128
     1bc:	06 c0       	rjmp	.+12     	; 0x1ca <__fixunssfsi+0x4a>
     1be:	c8 01       	movw	r24, r16
     1c0:	b7 01       	movw	r22, r14
     1c2:	0e 94 06 06 	call	0xc0c	; 0xc0c <__fixsfsi>
     1c6:	9b 01       	movw	r18, r22
     1c8:	ac 01       	movw	r20, r24
     1ca:	b9 01       	movw	r22, r18
     1cc:	ca 01       	movw	r24, r20
     1ce:	1f 91       	pop	r17
     1d0:	0f 91       	pop	r16
     1d2:	ff 90       	pop	r15
     1d4:	ef 90       	pop	r14
     1d6:	08 95       	ret

000001d8 <__floatundisf>:
     1d8:	a2 e0       	ldi	r26, 0x02	; 2
     1da:	b0 e0       	ldi	r27, 0x00	; 0
     1dc:	e2 ef       	ldi	r30, 0xF2	; 242
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	0c 94 45 17 	jmp	0x2e8a	; 0x2e8a <__prologue_saves__>
     1e4:	12 2f       	mov	r17, r18
     1e6:	b3 2e       	mov	r11, r19
     1e8:	a4 2e       	mov	r10, r20
     1ea:	95 2e       	mov	r9, r21
     1ec:	86 2e       	mov	r8, r22
     1ee:	37 2e       	mov	r3, r23
     1f0:	28 2e       	mov	r2, r24
     1f2:	9a 83       	std	Y+2, r25	; 0x02
     1f4:	c2 2e       	mov	r12, r18
     1f6:	d3 2e       	mov	r13, r19
     1f8:	e4 2e       	mov	r14, r20
     1fa:	f5 2e       	mov	r15, r21
     1fc:	a7 01       	movw	r20, r14
     1fe:	96 01       	movw	r18, r12
     200:	60 e0       	ldi	r22, 0x00	; 0
     202:	70 e0       	ldi	r23, 0x00	; 0
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	21 17       	cp	r18, r17
     20a:	a1 f4       	brne	.+40     	; 0x234 <__floatundisf+0x5c>
     20c:	3b 15       	cp	r19, r11
     20e:	91 f4       	brne	.+36     	; 0x234 <__floatundisf+0x5c>
     210:	4a 15       	cp	r20, r10
     212:	81 f4       	brne	.+32     	; 0x234 <__floatundisf+0x5c>
     214:	59 15       	cp	r21, r9
     216:	71 f4       	brne	.+28     	; 0x234 <__floatundisf+0x5c>
     218:	68 15       	cp	r22, r8
     21a:	61 f4       	brne	.+24     	; 0x234 <__floatundisf+0x5c>
     21c:	73 15       	cp	r23, r3
     21e:	51 f4       	brne	.+20     	; 0x234 <__floatundisf+0x5c>
     220:	82 15       	cp	r24, r2
     222:	41 f4       	brne	.+16     	; 0x234 <__floatundisf+0x5c>
     224:	aa 81       	ldd	r26, Y+2	; 0x02
     226:	9a 17       	cp	r25, r26
     228:	29 f4       	brne	.+10     	; 0x234 <__floatundisf+0x5c>
     22a:	c7 01       	movw	r24, r14
     22c:	b6 01       	movw	r22, r12
     22e:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__floatunsisf>
     232:	aa c0       	rjmp	.+340    	; 0x388 <__floatundisf+0x1b0>
     234:	21 2f       	mov	r18, r17
     236:	3b 2d       	mov	r19, r11
     238:	4a 2d       	mov	r20, r10
     23a:	59 2d       	mov	r21, r9
     23c:	68 2d       	mov	r22, r8
     23e:	73 2d       	mov	r23, r3
     240:	82 2d       	mov	r24, r2
     242:	9a 81       	ldd	r25, Y+2	; 0x02
     244:	00 e2       	ldi	r16, 0x20	; 32
     246:	0e 94 d3 06 	call	0xda6	; 0xda6 <__lshrdi3>
     24a:	c9 01       	movw	r24, r18
     24c:	da 01       	movw	r26, r20
     24e:	80 30       	cpi	r24, 0x00	; 0
     250:	e0 e0       	ldi	r30, 0x00	; 0
     252:	9e 07       	cpc	r25, r30
     254:	e1 e0       	ldi	r30, 0x01	; 1
     256:	ae 07       	cpc	r26, r30
     258:	e0 e0       	ldi	r30, 0x00	; 0
     25a:	be 07       	cpc	r27, r30
     25c:	80 f4       	brcc	.+32     	; 0x27e <__floatundisf+0xa6>
     25e:	8f 3f       	cpi	r24, 0xFF	; 255
     260:	91 05       	cpc	r25, r1
     262:	a1 05       	cpc	r26, r1
     264:	b1 05       	cpc	r27, r1
     266:	31 f0       	breq	.+12     	; 0x274 <__floatundisf+0x9c>
     268:	28 f0       	brcs	.+10     	; 0x274 <__floatundisf+0x9c>
     26a:	28 e0       	ldi	r18, 0x08	; 8
     26c:	30 e0       	ldi	r19, 0x00	; 0
     26e:	40 e0       	ldi	r20, 0x00	; 0
     270:	50 e0       	ldi	r21, 0x00	; 0
     272:	16 c0       	rjmp	.+44     	; 0x2a0 <__floatundisf+0xc8>
     274:	20 e0       	ldi	r18, 0x00	; 0
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	40 e0       	ldi	r20, 0x00	; 0
     27a:	50 e0       	ldi	r21, 0x00	; 0
     27c:	11 c0       	rjmp	.+34     	; 0x2a0 <__floatundisf+0xc8>
     27e:	80 30       	cpi	r24, 0x00	; 0
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	9f 07       	cpc	r25, r31
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	af 07       	cpc	r26, r31
     288:	f1 e0       	ldi	r31, 0x01	; 1
     28a:	bf 07       	cpc	r27, r31
     28c:	28 f0       	brcs	.+10     	; 0x298 <__floatundisf+0xc0>
     28e:	28 e1       	ldi	r18, 0x18	; 24
     290:	30 e0       	ldi	r19, 0x00	; 0
     292:	40 e0       	ldi	r20, 0x00	; 0
     294:	50 e0       	ldi	r21, 0x00	; 0
     296:	04 c0       	rjmp	.+8      	; 0x2a0 <__floatundisf+0xc8>
     298:	20 e1       	ldi	r18, 0x10	; 16
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	40 e0       	ldi	r20, 0x00	; 0
     29e:	50 e0       	ldi	r21, 0x00	; 0
     2a0:	02 2e       	mov	r0, r18
     2a2:	04 c0       	rjmp	.+8      	; 0x2ac <__floatundisf+0xd4>
     2a4:	b6 95       	lsr	r27
     2a6:	a7 95       	ror	r26
     2a8:	97 95       	ror	r25
     2aa:	87 95       	ror	r24
     2ac:	0a 94       	dec	r0
     2ae:	d2 f7       	brpl	.-12     	; 0x2a4 <__floatundisf+0xcc>
     2b0:	fc 01       	movw	r30, r24
     2b2:	e3 56       	subi	r30, 0x63	; 99
     2b4:	ff 4f       	sbci	r31, 0xFF	; 255
     2b6:	80 81       	ld	r24, Z
     2b8:	29 01       	movw	r4, r18
     2ba:	3a 01       	movw	r6, r20
     2bc:	48 0e       	add	r4, r24
     2be:	51 1c       	adc	r5, r1
     2c0:	61 1c       	adc	r6, r1
     2c2:	71 1c       	adc	r7, r1
     2c4:	49 82       	std	Y+1, r4	; 0x01
     2c6:	21 2f       	mov	r18, r17
     2c8:	3b 2d       	mov	r19, r11
     2ca:	4a 2d       	mov	r20, r10
     2cc:	59 2d       	mov	r21, r9
     2ce:	68 2d       	mov	r22, r8
     2d0:	73 2d       	mov	r23, r3
     2d2:	82 2d       	mov	r24, r2
     2d4:	9a 81       	ldd	r25, Y+2	; 0x02
     2d6:	04 2d       	mov	r16, r4
     2d8:	0e 94 d3 06 	call	0xda6	; 0xda6 <__lshrdi3>
     2dc:	c9 01       	movw	r24, r18
     2de:	da 01       	movw	r26, r20
     2e0:	4c 01       	movw	r8, r24
     2e2:	5d 01       	movw	r10, r26
     2e4:	80 e2       	ldi	r24, 0x20	; 32
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	84 19       	sub	r24, r4
     2ea:	95 09       	sbc	r25, r5
     2ec:	04 c0       	rjmp	.+8      	; 0x2f6 <__floatundisf+0x11e>
     2ee:	cc 0c       	add	r12, r12
     2f0:	dd 1c       	adc	r13, r13
     2f2:	ee 1c       	adc	r14, r14
     2f4:	ff 1c       	adc	r15, r15
     2f6:	8a 95       	dec	r24
     2f8:	d2 f7       	brpl	.-12     	; 0x2ee <__floatundisf+0x116>
     2fa:	c1 14       	cp	r12, r1
     2fc:	d1 04       	cpc	r13, r1
     2fe:	e1 04       	cpc	r14, r1
     300:	f1 04       	cpc	r15, r1
     302:	41 f0       	breq	.+16     	; 0x314 <__floatundisf+0x13c>
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	a0 e0       	ldi	r26, 0x00	; 0
     30a:	b0 e0       	ldi	r27, 0x00	; 0
     30c:	88 2a       	or	r8, r24
     30e:	99 2a       	or	r9, r25
     310:	aa 2a       	or	r10, r26
     312:	bb 2a       	or	r11, r27
     314:	90 e2       	ldi	r25, 0x20	; 32
     316:	49 16       	cp	r4, r25
     318:	51 04       	cpc	r5, r1
     31a:	61 04       	cpc	r6, r1
     31c:	71 04       	cpc	r7, r1
     31e:	59 f4       	brne	.+22     	; 0x336 <__floatundisf+0x15e>
     320:	0f 2e       	mov	r0, r31
     322:	f0 e0       	ldi	r31, 0x00	; 0
     324:	ef 2e       	mov	r14, r31
     326:	f0 e0       	ldi	r31, 0x00	; 0
     328:	ff 2e       	mov	r15, r31
     32a:	f0 e8       	ldi	r31, 0x80	; 128
     32c:	0f 2f       	mov	r16, r31
     32e:	ff e4       	ldi	r31, 0x4F	; 79
     330:	1f 2f       	mov	r17, r31
     332:	f0 2d       	mov	r31, r0
     334:	21 c0       	rjmp	.+66     	; 0x378 <__floatundisf+0x1a0>
     336:	af e1       	ldi	r26, 0x1F	; 31
     338:	4a 16       	cp	r4, r26
     33a:	51 04       	cpc	r5, r1
     33c:	61 04       	cpc	r6, r1
     33e:	71 04       	cpc	r7, r1
     340:	59 f4       	brne	.+22     	; 0x358 <__floatundisf+0x180>
     342:	0f 2e       	mov	r0, r31
     344:	f0 e0       	ldi	r31, 0x00	; 0
     346:	ef 2e       	mov	r14, r31
     348:	f0 e0       	ldi	r31, 0x00	; 0
     34a:	ff 2e       	mov	r15, r31
     34c:	f0 e0       	ldi	r31, 0x00	; 0
     34e:	0f 2f       	mov	r16, r31
     350:	ff e4       	ldi	r31, 0x4F	; 79
     352:	1f 2f       	mov	r17, r31
     354:	f0 2d       	mov	r31, r0
     356:	10 c0       	rjmp	.+32     	; 0x378 <__floatundisf+0x1a0>
     358:	61 e0       	ldi	r22, 0x01	; 1
     35a:	70 e0       	ldi	r23, 0x00	; 0
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	09 80       	ldd	r0, Y+1	; 0x01
     362:	04 c0       	rjmp	.+8      	; 0x36c <__floatundisf+0x194>
     364:	66 0f       	add	r22, r22
     366:	77 1f       	adc	r23, r23
     368:	88 1f       	adc	r24, r24
     36a:	99 1f       	adc	r25, r25
     36c:	0a 94       	dec	r0
     36e:	d2 f7       	brpl	.-12     	; 0x364 <__floatundisf+0x18c>
     370:	0e 94 a8 05 	call	0xb50	; 0xb50 <__floatsisf>
     374:	7b 01       	movw	r14, r22
     376:	8c 01       	movw	r16, r24
     378:	c5 01       	movw	r24, r10
     37a:	b4 01       	movw	r22, r8
     37c:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__floatunsisf>
     380:	a8 01       	movw	r20, r16
     382:	97 01       	movw	r18, r14
     384:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
     388:	22 96       	adiw	r28, 0x02	; 2
     38a:	e2 e1       	ldi	r30, 0x12	; 18
     38c:	0c 94 61 17 	jmp	0x2ec2	; 0x2ec2 <__epilogue_restores__>

00000390 <_fpadd_parts>:
     390:	a0 e0       	ldi	r26, 0x00	; 0
     392:	b0 e0       	ldi	r27, 0x00	; 0
     394:	ee ec       	ldi	r30, 0xCE	; 206
     396:	f1 e0       	ldi	r31, 0x01	; 1
     398:	0c 94 45 17 	jmp	0x2e8a	; 0x2e8a <__prologue_saves__>
     39c:	dc 01       	movw	r26, r24
     39e:	2b 01       	movw	r4, r22
     3a0:	fa 01       	movw	r30, r20
     3a2:	9c 91       	ld	r25, X
     3a4:	92 30       	cpi	r25, 0x02	; 2
     3a6:	08 f4       	brcc	.+2      	; 0x3aa <_fpadd_parts+0x1a>
     3a8:	39 c1       	rjmp	.+626    	; 0x61c <_fpadd_parts+0x28c>
     3aa:	eb 01       	movw	r28, r22
     3ac:	88 81       	ld	r24, Y
     3ae:	82 30       	cpi	r24, 0x02	; 2
     3b0:	08 f4       	brcc	.+2      	; 0x3b4 <_fpadd_parts+0x24>
     3b2:	33 c1       	rjmp	.+614    	; 0x61a <_fpadd_parts+0x28a>
     3b4:	94 30       	cpi	r25, 0x04	; 4
     3b6:	69 f4       	brne	.+26     	; 0x3d2 <_fpadd_parts+0x42>
     3b8:	84 30       	cpi	r24, 0x04	; 4
     3ba:	09 f0       	breq	.+2      	; 0x3be <_fpadd_parts+0x2e>
     3bc:	2f c1       	rjmp	.+606    	; 0x61c <_fpadd_parts+0x28c>
     3be:	11 96       	adiw	r26, 0x01	; 1
     3c0:	9c 91       	ld	r25, X
     3c2:	11 97       	sbiw	r26, 0x01	; 1
     3c4:	89 81       	ldd	r24, Y+1	; 0x01
     3c6:	98 17       	cp	r25, r24
     3c8:	09 f4       	brne	.+2      	; 0x3cc <_fpadd_parts+0x3c>
     3ca:	28 c1       	rjmp	.+592    	; 0x61c <_fpadd_parts+0x28c>
     3cc:	a5 e9       	ldi	r26, 0x95	; 149
     3ce:	b0 e0       	ldi	r27, 0x00	; 0
     3d0:	25 c1       	rjmp	.+586    	; 0x61c <_fpadd_parts+0x28c>
     3d2:	84 30       	cpi	r24, 0x04	; 4
     3d4:	09 f4       	brne	.+2      	; 0x3d8 <_fpadd_parts+0x48>
     3d6:	21 c1       	rjmp	.+578    	; 0x61a <_fpadd_parts+0x28a>
     3d8:	82 30       	cpi	r24, 0x02	; 2
     3da:	a9 f4       	brne	.+42     	; 0x406 <_fpadd_parts+0x76>
     3dc:	92 30       	cpi	r25, 0x02	; 2
     3de:	09 f0       	breq	.+2      	; 0x3e2 <_fpadd_parts+0x52>
     3e0:	1d c1       	rjmp	.+570    	; 0x61c <_fpadd_parts+0x28c>
     3e2:	9a 01       	movw	r18, r20
     3e4:	ad 01       	movw	r20, r26
     3e6:	88 e0       	ldi	r24, 0x08	; 8
     3e8:	ea 01       	movw	r28, r20
     3ea:	09 90       	ld	r0, Y+
     3ec:	ae 01       	movw	r20, r28
     3ee:	e9 01       	movw	r28, r18
     3f0:	09 92       	st	Y+, r0
     3f2:	9e 01       	movw	r18, r28
     3f4:	81 50       	subi	r24, 0x01	; 1
     3f6:	c1 f7       	brne	.-16     	; 0x3e8 <_fpadd_parts+0x58>
     3f8:	e2 01       	movw	r28, r4
     3fa:	89 81       	ldd	r24, Y+1	; 0x01
     3fc:	11 96       	adiw	r26, 0x01	; 1
     3fe:	9c 91       	ld	r25, X
     400:	89 23       	and	r24, r25
     402:	81 83       	std	Z+1, r24	; 0x01
     404:	08 c1       	rjmp	.+528    	; 0x616 <_fpadd_parts+0x286>
     406:	92 30       	cpi	r25, 0x02	; 2
     408:	09 f4       	brne	.+2      	; 0x40c <_fpadd_parts+0x7c>
     40a:	07 c1       	rjmp	.+526    	; 0x61a <_fpadd_parts+0x28a>
     40c:	12 96       	adiw	r26, 0x02	; 2
     40e:	2d 90       	ld	r2, X+
     410:	3c 90       	ld	r3, X
     412:	13 97       	sbiw	r26, 0x03	; 3
     414:	eb 01       	movw	r28, r22
     416:	8a 81       	ldd	r24, Y+2	; 0x02
     418:	9b 81       	ldd	r25, Y+3	; 0x03
     41a:	14 96       	adiw	r26, 0x04	; 4
     41c:	ad 90       	ld	r10, X+
     41e:	bd 90       	ld	r11, X+
     420:	cd 90       	ld	r12, X+
     422:	dc 90       	ld	r13, X
     424:	17 97       	sbiw	r26, 0x07	; 7
     426:	ec 80       	ldd	r14, Y+4	; 0x04
     428:	fd 80       	ldd	r15, Y+5	; 0x05
     42a:	0e 81       	ldd	r16, Y+6	; 0x06
     42c:	1f 81       	ldd	r17, Y+7	; 0x07
     42e:	91 01       	movw	r18, r2
     430:	28 1b       	sub	r18, r24
     432:	39 0b       	sbc	r19, r25
     434:	b9 01       	movw	r22, r18
     436:	37 ff       	sbrs	r19, 7
     438:	04 c0       	rjmp	.+8      	; 0x442 <_fpadd_parts+0xb2>
     43a:	66 27       	eor	r22, r22
     43c:	77 27       	eor	r23, r23
     43e:	62 1b       	sub	r22, r18
     440:	73 0b       	sbc	r23, r19
     442:	60 32       	cpi	r22, 0x20	; 32
     444:	71 05       	cpc	r23, r1
     446:	0c f0       	brlt	.+2      	; 0x44a <_fpadd_parts+0xba>
     448:	61 c0       	rjmp	.+194    	; 0x50c <_fpadd_parts+0x17c>
     44a:	12 16       	cp	r1, r18
     44c:	13 06       	cpc	r1, r19
     44e:	6c f5       	brge	.+90     	; 0x4aa <_fpadd_parts+0x11a>
     450:	37 01       	movw	r6, r14
     452:	48 01       	movw	r8, r16
     454:	06 2e       	mov	r0, r22
     456:	04 c0       	rjmp	.+8      	; 0x460 <_fpadd_parts+0xd0>
     458:	96 94       	lsr	r9
     45a:	87 94       	ror	r8
     45c:	77 94       	ror	r7
     45e:	67 94       	ror	r6
     460:	0a 94       	dec	r0
     462:	d2 f7       	brpl	.-12     	; 0x458 <_fpadd_parts+0xc8>
     464:	21 e0       	ldi	r18, 0x01	; 1
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	40 e0       	ldi	r20, 0x00	; 0
     46a:	50 e0       	ldi	r21, 0x00	; 0
     46c:	04 c0       	rjmp	.+8      	; 0x476 <_fpadd_parts+0xe6>
     46e:	22 0f       	add	r18, r18
     470:	33 1f       	adc	r19, r19
     472:	44 1f       	adc	r20, r20
     474:	55 1f       	adc	r21, r21
     476:	6a 95       	dec	r22
     478:	d2 f7       	brpl	.-12     	; 0x46e <_fpadd_parts+0xde>
     47a:	21 50       	subi	r18, 0x01	; 1
     47c:	30 40       	sbci	r19, 0x00	; 0
     47e:	40 40       	sbci	r20, 0x00	; 0
     480:	50 40       	sbci	r21, 0x00	; 0
     482:	2e 21       	and	r18, r14
     484:	3f 21       	and	r19, r15
     486:	40 23       	and	r20, r16
     488:	51 23       	and	r21, r17
     48a:	21 15       	cp	r18, r1
     48c:	31 05       	cpc	r19, r1
     48e:	41 05       	cpc	r20, r1
     490:	51 05       	cpc	r21, r1
     492:	21 f0       	breq	.+8      	; 0x49c <_fpadd_parts+0x10c>
     494:	21 e0       	ldi	r18, 0x01	; 1
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	40 e0       	ldi	r20, 0x00	; 0
     49a:	50 e0       	ldi	r21, 0x00	; 0
     49c:	79 01       	movw	r14, r18
     49e:	8a 01       	movw	r16, r20
     4a0:	e6 28       	or	r14, r6
     4a2:	f7 28       	or	r15, r7
     4a4:	08 29       	or	r16, r8
     4a6:	19 29       	or	r17, r9
     4a8:	3c c0       	rjmp	.+120    	; 0x522 <_fpadd_parts+0x192>
     4aa:	23 2b       	or	r18, r19
     4ac:	d1 f1       	breq	.+116    	; 0x522 <_fpadd_parts+0x192>
     4ae:	26 0e       	add	r2, r22
     4b0:	37 1e       	adc	r3, r23
     4b2:	35 01       	movw	r6, r10
     4b4:	46 01       	movw	r8, r12
     4b6:	06 2e       	mov	r0, r22
     4b8:	04 c0       	rjmp	.+8      	; 0x4c2 <_fpadd_parts+0x132>
     4ba:	96 94       	lsr	r9
     4bc:	87 94       	ror	r8
     4be:	77 94       	ror	r7
     4c0:	67 94       	ror	r6
     4c2:	0a 94       	dec	r0
     4c4:	d2 f7       	brpl	.-12     	; 0x4ba <_fpadd_parts+0x12a>
     4c6:	21 e0       	ldi	r18, 0x01	; 1
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	40 e0       	ldi	r20, 0x00	; 0
     4cc:	50 e0       	ldi	r21, 0x00	; 0
     4ce:	04 c0       	rjmp	.+8      	; 0x4d8 <_fpadd_parts+0x148>
     4d0:	22 0f       	add	r18, r18
     4d2:	33 1f       	adc	r19, r19
     4d4:	44 1f       	adc	r20, r20
     4d6:	55 1f       	adc	r21, r21
     4d8:	6a 95       	dec	r22
     4da:	d2 f7       	brpl	.-12     	; 0x4d0 <_fpadd_parts+0x140>
     4dc:	21 50       	subi	r18, 0x01	; 1
     4de:	30 40       	sbci	r19, 0x00	; 0
     4e0:	40 40       	sbci	r20, 0x00	; 0
     4e2:	50 40       	sbci	r21, 0x00	; 0
     4e4:	2a 21       	and	r18, r10
     4e6:	3b 21       	and	r19, r11
     4e8:	4c 21       	and	r20, r12
     4ea:	5d 21       	and	r21, r13
     4ec:	21 15       	cp	r18, r1
     4ee:	31 05       	cpc	r19, r1
     4f0:	41 05       	cpc	r20, r1
     4f2:	51 05       	cpc	r21, r1
     4f4:	21 f0       	breq	.+8      	; 0x4fe <_fpadd_parts+0x16e>
     4f6:	21 e0       	ldi	r18, 0x01	; 1
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	40 e0       	ldi	r20, 0x00	; 0
     4fc:	50 e0       	ldi	r21, 0x00	; 0
     4fe:	59 01       	movw	r10, r18
     500:	6a 01       	movw	r12, r20
     502:	a6 28       	or	r10, r6
     504:	b7 28       	or	r11, r7
     506:	c8 28       	or	r12, r8
     508:	d9 28       	or	r13, r9
     50a:	0b c0       	rjmp	.+22     	; 0x522 <_fpadd_parts+0x192>
     50c:	82 15       	cp	r24, r2
     50e:	93 05       	cpc	r25, r3
     510:	2c f0       	brlt	.+10     	; 0x51c <_fpadd_parts+0x18c>
     512:	1c 01       	movw	r2, r24
     514:	aa 24       	eor	r10, r10
     516:	bb 24       	eor	r11, r11
     518:	65 01       	movw	r12, r10
     51a:	03 c0       	rjmp	.+6      	; 0x522 <_fpadd_parts+0x192>
     51c:	ee 24       	eor	r14, r14
     51e:	ff 24       	eor	r15, r15
     520:	87 01       	movw	r16, r14
     522:	11 96       	adiw	r26, 0x01	; 1
     524:	9c 91       	ld	r25, X
     526:	d2 01       	movw	r26, r4
     528:	11 96       	adiw	r26, 0x01	; 1
     52a:	8c 91       	ld	r24, X
     52c:	98 17       	cp	r25, r24
     52e:	09 f4       	brne	.+2      	; 0x532 <_fpadd_parts+0x1a2>
     530:	45 c0       	rjmp	.+138    	; 0x5bc <_fpadd_parts+0x22c>
     532:	99 23       	and	r25, r25
     534:	39 f0       	breq	.+14     	; 0x544 <_fpadd_parts+0x1b4>
     536:	a8 01       	movw	r20, r16
     538:	97 01       	movw	r18, r14
     53a:	2a 19       	sub	r18, r10
     53c:	3b 09       	sbc	r19, r11
     53e:	4c 09       	sbc	r20, r12
     540:	5d 09       	sbc	r21, r13
     542:	06 c0       	rjmp	.+12     	; 0x550 <_fpadd_parts+0x1c0>
     544:	a6 01       	movw	r20, r12
     546:	95 01       	movw	r18, r10
     548:	2e 19       	sub	r18, r14
     54a:	3f 09       	sbc	r19, r15
     54c:	40 0b       	sbc	r20, r16
     54e:	51 0b       	sbc	r21, r17
     550:	57 fd       	sbrc	r21, 7
     552:	08 c0       	rjmp	.+16     	; 0x564 <_fpadd_parts+0x1d4>
     554:	11 82       	std	Z+1, r1	; 0x01
     556:	33 82       	std	Z+3, r3	; 0x03
     558:	22 82       	std	Z+2, r2	; 0x02
     55a:	24 83       	std	Z+4, r18	; 0x04
     55c:	35 83       	std	Z+5, r19	; 0x05
     55e:	46 83       	std	Z+6, r20	; 0x06
     560:	57 83       	std	Z+7, r21	; 0x07
     562:	1d c0       	rjmp	.+58     	; 0x59e <_fpadd_parts+0x20e>
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	81 83       	std	Z+1, r24	; 0x01
     568:	33 82       	std	Z+3, r3	; 0x03
     56a:	22 82       	std	Z+2, r2	; 0x02
     56c:	88 27       	eor	r24, r24
     56e:	99 27       	eor	r25, r25
     570:	dc 01       	movw	r26, r24
     572:	82 1b       	sub	r24, r18
     574:	93 0b       	sbc	r25, r19
     576:	a4 0b       	sbc	r26, r20
     578:	b5 0b       	sbc	r27, r21
     57a:	84 83       	std	Z+4, r24	; 0x04
     57c:	95 83       	std	Z+5, r25	; 0x05
     57e:	a6 83       	std	Z+6, r26	; 0x06
     580:	b7 83       	std	Z+7, r27	; 0x07
     582:	0d c0       	rjmp	.+26     	; 0x59e <_fpadd_parts+0x20e>
     584:	22 0f       	add	r18, r18
     586:	33 1f       	adc	r19, r19
     588:	44 1f       	adc	r20, r20
     58a:	55 1f       	adc	r21, r21
     58c:	24 83       	std	Z+4, r18	; 0x04
     58e:	35 83       	std	Z+5, r19	; 0x05
     590:	46 83       	std	Z+6, r20	; 0x06
     592:	57 83       	std	Z+7, r21	; 0x07
     594:	82 81       	ldd	r24, Z+2	; 0x02
     596:	93 81       	ldd	r25, Z+3	; 0x03
     598:	01 97       	sbiw	r24, 0x01	; 1
     59a:	93 83       	std	Z+3, r25	; 0x03
     59c:	82 83       	std	Z+2, r24	; 0x02
     59e:	24 81       	ldd	r18, Z+4	; 0x04
     5a0:	35 81       	ldd	r19, Z+5	; 0x05
     5a2:	46 81       	ldd	r20, Z+6	; 0x06
     5a4:	57 81       	ldd	r21, Z+7	; 0x07
     5a6:	da 01       	movw	r26, r20
     5a8:	c9 01       	movw	r24, r18
     5aa:	01 97       	sbiw	r24, 0x01	; 1
     5ac:	a1 09       	sbc	r26, r1
     5ae:	b1 09       	sbc	r27, r1
     5b0:	8f 5f       	subi	r24, 0xFF	; 255
     5b2:	9f 4f       	sbci	r25, 0xFF	; 255
     5b4:	af 4f       	sbci	r26, 0xFF	; 255
     5b6:	bf 43       	sbci	r27, 0x3F	; 63
     5b8:	28 f3       	brcs	.-54     	; 0x584 <_fpadd_parts+0x1f4>
     5ba:	0b c0       	rjmp	.+22     	; 0x5d2 <_fpadd_parts+0x242>
     5bc:	91 83       	std	Z+1, r25	; 0x01
     5be:	33 82       	std	Z+3, r3	; 0x03
     5c0:	22 82       	std	Z+2, r2	; 0x02
     5c2:	ea 0c       	add	r14, r10
     5c4:	fb 1c       	adc	r15, r11
     5c6:	0c 1d       	adc	r16, r12
     5c8:	1d 1d       	adc	r17, r13
     5ca:	e4 82       	std	Z+4, r14	; 0x04
     5cc:	f5 82       	std	Z+5, r15	; 0x05
     5ce:	06 83       	std	Z+6, r16	; 0x06
     5d0:	17 83       	std	Z+7, r17	; 0x07
     5d2:	83 e0       	ldi	r24, 0x03	; 3
     5d4:	80 83       	st	Z, r24
     5d6:	24 81       	ldd	r18, Z+4	; 0x04
     5d8:	35 81       	ldd	r19, Z+5	; 0x05
     5da:	46 81       	ldd	r20, Z+6	; 0x06
     5dc:	57 81       	ldd	r21, Z+7	; 0x07
     5de:	57 ff       	sbrs	r21, 7
     5e0:	1a c0       	rjmp	.+52     	; 0x616 <_fpadd_parts+0x286>
     5e2:	c9 01       	movw	r24, r18
     5e4:	aa 27       	eor	r26, r26
     5e6:	97 fd       	sbrc	r25, 7
     5e8:	a0 95       	com	r26
     5ea:	ba 2f       	mov	r27, r26
     5ec:	81 70       	andi	r24, 0x01	; 1
     5ee:	90 70       	andi	r25, 0x00	; 0
     5f0:	a0 70       	andi	r26, 0x00	; 0
     5f2:	b0 70       	andi	r27, 0x00	; 0
     5f4:	56 95       	lsr	r21
     5f6:	47 95       	ror	r20
     5f8:	37 95       	ror	r19
     5fa:	27 95       	ror	r18
     5fc:	82 2b       	or	r24, r18
     5fe:	93 2b       	or	r25, r19
     600:	a4 2b       	or	r26, r20
     602:	b5 2b       	or	r27, r21
     604:	84 83       	std	Z+4, r24	; 0x04
     606:	95 83       	std	Z+5, r25	; 0x05
     608:	a6 83       	std	Z+6, r26	; 0x06
     60a:	b7 83       	std	Z+7, r27	; 0x07
     60c:	82 81       	ldd	r24, Z+2	; 0x02
     60e:	93 81       	ldd	r25, Z+3	; 0x03
     610:	01 96       	adiw	r24, 0x01	; 1
     612:	93 83       	std	Z+3, r25	; 0x03
     614:	82 83       	std	Z+2, r24	; 0x02
     616:	df 01       	movw	r26, r30
     618:	01 c0       	rjmp	.+2      	; 0x61c <_fpadd_parts+0x28c>
     61a:	d2 01       	movw	r26, r4
     61c:	cd 01       	movw	r24, r26
     61e:	cd b7       	in	r28, 0x3d	; 61
     620:	de b7       	in	r29, 0x3e	; 62
     622:	e2 e1       	ldi	r30, 0x12	; 18
     624:	0c 94 61 17 	jmp	0x2ec2	; 0x2ec2 <__epilogue_restores__>

00000628 <__subsf3>:
     628:	a0 e2       	ldi	r26, 0x20	; 32
     62a:	b0 e0       	ldi	r27, 0x00	; 0
     62c:	ea e1       	ldi	r30, 0x1A	; 26
     62e:	f3 e0       	ldi	r31, 0x03	; 3
     630:	0c 94 51 17 	jmp	0x2ea2	; 0x2ea2 <__prologue_saves__+0x18>
     634:	69 83       	std	Y+1, r22	; 0x01
     636:	7a 83       	std	Y+2, r23	; 0x02
     638:	8b 83       	std	Y+3, r24	; 0x03
     63a:	9c 83       	std	Y+4, r25	; 0x04
     63c:	2d 83       	std	Y+5, r18	; 0x05
     63e:	3e 83       	std	Y+6, r19	; 0x06
     640:	4f 83       	std	Y+7, r20	; 0x07
     642:	58 87       	std	Y+8, r21	; 0x08
     644:	e9 e0       	ldi	r30, 0x09	; 9
     646:	ee 2e       	mov	r14, r30
     648:	f1 2c       	mov	r15, r1
     64a:	ec 0e       	add	r14, r28
     64c:	fd 1e       	adc	r15, r29
     64e:	ce 01       	movw	r24, r28
     650:	01 96       	adiw	r24, 0x01	; 1
     652:	b7 01       	movw	r22, r14
     654:	0e 94 76 08 	call	0x10ec	; 0x10ec <__unpack_f>
     658:	8e 01       	movw	r16, r28
     65a:	0f 5e       	subi	r16, 0xEF	; 239
     65c:	1f 4f       	sbci	r17, 0xFF	; 255
     65e:	ce 01       	movw	r24, r28
     660:	05 96       	adiw	r24, 0x05	; 5
     662:	b8 01       	movw	r22, r16
     664:	0e 94 76 08 	call	0x10ec	; 0x10ec <__unpack_f>
     668:	8a 89       	ldd	r24, Y+18	; 0x12
     66a:	91 e0       	ldi	r25, 0x01	; 1
     66c:	89 27       	eor	r24, r25
     66e:	8a 8b       	std	Y+18, r24	; 0x12
     670:	c7 01       	movw	r24, r14
     672:	b8 01       	movw	r22, r16
     674:	ae 01       	movw	r20, r28
     676:	47 5e       	subi	r20, 0xE7	; 231
     678:	5f 4f       	sbci	r21, 0xFF	; 255
     67a:	0e 94 c8 01 	call	0x390	; 0x390 <_fpadd_parts>
     67e:	0e 94 a1 07 	call	0xf42	; 0xf42 <__pack_f>
     682:	a0 96       	adiw	r28, 0x20	; 32
     684:	e6 e0       	ldi	r30, 0x06	; 6
     686:	0c 94 6d 17 	jmp	0x2eda	; 0x2eda <__epilogue_restores__+0x18>

0000068a <__addsf3>:
     68a:	a0 e2       	ldi	r26, 0x20	; 32
     68c:	b0 e0       	ldi	r27, 0x00	; 0
     68e:	eb e4       	ldi	r30, 0x4B	; 75
     690:	f3 e0       	ldi	r31, 0x03	; 3
     692:	0c 94 51 17 	jmp	0x2ea2	; 0x2ea2 <__prologue_saves__+0x18>
     696:	69 83       	std	Y+1, r22	; 0x01
     698:	7a 83       	std	Y+2, r23	; 0x02
     69a:	8b 83       	std	Y+3, r24	; 0x03
     69c:	9c 83       	std	Y+4, r25	; 0x04
     69e:	2d 83       	std	Y+5, r18	; 0x05
     6a0:	3e 83       	std	Y+6, r19	; 0x06
     6a2:	4f 83       	std	Y+7, r20	; 0x07
     6a4:	58 87       	std	Y+8, r21	; 0x08
     6a6:	f9 e0       	ldi	r31, 0x09	; 9
     6a8:	ef 2e       	mov	r14, r31
     6aa:	f1 2c       	mov	r15, r1
     6ac:	ec 0e       	add	r14, r28
     6ae:	fd 1e       	adc	r15, r29
     6b0:	ce 01       	movw	r24, r28
     6b2:	01 96       	adiw	r24, 0x01	; 1
     6b4:	b7 01       	movw	r22, r14
     6b6:	0e 94 76 08 	call	0x10ec	; 0x10ec <__unpack_f>
     6ba:	8e 01       	movw	r16, r28
     6bc:	0f 5e       	subi	r16, 0xEF	; 239
     6be:	1f 4f       	sbci	r17, 0xFF	; 255
     6c0:	ce 01       	movw	r24, r28
     6c2:	05 96       	adiw	r24, 0x05	; 5
     6c4:	b8 01       	movw	r22, r16
     6c6:	0e 94 76 08 	call	0x10ec	; 0x10ec <__unpack_f>
     6ca:	c7 01       	movw	r24, r14
     6cc:	b8 01       	movw	r22, r16
     6ce:	ae 01       	movw	r20, r28
     6d0:	47 5e       	subi	r20, 0xE7	; 231
     6d2:	5f 4f       	sbci	r21, 0xFF	; 255
     6d4:	0e 94 c8 01 	call	0x390	; 0x390 <_fpadd_parts>
     6d8:	0e 94 a1 07 	call	0xf42	; 0xf42 <__pack_f>
     6dc:	a0 96       	adiw	r28, 0x20	; 32
     6de:	e6 e0       	ldi	r30, 0x06	; 6
     6e0:	0c 94 6d 17 	jmp	0x2eda	; 0x2eda <__epilogue_restores__+0x18>

000006e4 <__mulsf3>:
     6e4:	a0 e2       	ldi	r26, 0x20	; 32
     6e6:	b0 e0       	ldi	r27, 0x00	; 0
     6e8:	e8 e7       	ldi	r30, 0x78	; 120
     6ea:	f3 e0       	ldi	r31, 0x03	; 3
     6ec:	0c 94 45 17 	jmp	0x2e8a	; 0x2e8a <__prologue_saves__>
     6f0:	69 83       	std	Y+1, r22	; 0x01
     6f2:	7a 83       	std	Y+2, r23	; 0x02
     6f4:	8b 83       	std	Y+3, r24	; 0x03
     6f6:	9c 83       	std	Y+4, r25	; 0x04
     6f8:	2d 83       	std	Y+5, r18	; 0x05
     6fa:	3e 83       	std	Y+6, r19	; 0x06
     6fc:	4f 83       	std	Y+7, r20	; 0x07
     6fe:	58 87       	std	Y+8, r21	; 0x08
     700:	ce 01       	movw	r24, r28
     702:	01 96       	adiw	r24, 0x01	; 1
     704:	be 01       	movw	r22, r28
     706:	67 5f       	subi	r22, 0xF7	; 247
     708:	7f 4f       	sbci	r23, 0xFF	; 255
     70a:	0e 94 76 08 	call	0x10ec	; 0x10ec <__unpack_f>
     70e:	ce 01       	movw	r24, r28
     710:	05 96       	adiw	r24, 0x05	; 5
     712:	be 01       	movw	r22, r28
     714:	6f 5e       	subi	r22, 0xEF	; 239
     716:	7f 4f       	sbci	r23, 0xFF	; 255
     718:	0e 94 76 08 	call	0x10ec	; 0x10ec <__unpack_f>
     71c:	99 85       	ldd	r25, Y+9	; 0x09
     71e:	92 30       	cpi	r25, 0x02	; 2
     720:	88 f0       	brcs	.+34     	; 0x744 <__mulsf3+0x60>
     722:	89 89       	ldd	r24, Y+17	; 0x11
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	c8 f0       	brcs	.+50     	; 0x75a <__mulsf3+0x76>
     728:	94 30       	cpi	r25, 0x04	; 4
     72a:	19 f4       	brne	.+6      	; 0x732 <__mulsf3+0x4e>
     72c:	82 30       	cpi	r24, 0x02	; 2
     72e:	51 f4       	brne	.+20     	; 0x744 <__mulsf3+0x60>
     730:	04 c0       	rjmp	.+8      	; 0x73a <__mulsf3+0x56>
     732:	84 30       	cpi	r24, 0x04	; 4
     734:	29 f4       	brne	.+10     	; 0x740 <__mulsf3+0x5c>
     736:	92 30       	cpi	r25, 0x02	; 2
     738:	81 f4       	brne	.+32     	; 0x75a <__mulsf3+0x76>
     73a:	85 e9       	ldi	r24, 0x95	; 149
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	c6 c0       	rjmp	.+396    	; 0x8cc <__stack+0x6d>
     740:	92 30       	cpi	r25, 0x02	; 2
     742:	49 f4       	brne	.+18     	; 0x756 <__mulsf3+0x72>
     744:	20 e0       	ldi	r18, 0x00	; 0
     746:	9a 85       	ldd	r25, Y+10	; 0x0a
     748:	8a 89       	ldd	r24, Y+18	; 0x12
     74a:	98 13       	cpse	r25, r24
     74c:	21 e0       	ldi	r18, 0x01	; 1
     74e:	2a 87       	std	Y+10, r18	; 0x0a
     750:	ce 01       	movw	r24, r28
     752:	09 96       	adiw	r24, 0x09	; 9
     754:	bb c0       	rjmp	.+374    	; 0x8cc <__stack+0x6d>
     756:	82 30       	cpi	r24, 0x02	; 2
     758:	49 f4       	brne	.+18     	; 0x76c <__mulsf3+0x88>
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	9a 85       	ldd	r25, Y+10	; 0x0a
     75e:	8a 89       	ldd	r24, Y+18	; 0x12
     760:	98 13       	cpse	r25, r24
     762:	21 e0       	ldi	r18, 0x01	; 1
     764:	2a 8b       	std	Y+18, r18	; 0x12
     766:	ce 01       	movw	r24, r28
     768:	41 96       	adiw	r24, 0x11	; 17
     76a:	b0 c0       	rjmp	.+352    	; 0x8cc <__stack+0x6d>
     76c:	2d 84       	ldd	r2, Y+13	; 0x0d
     76e:	3e 84       	ldd	r3, Y+14	; 0x0e
     770:	4f 84       	ldd	r4, Y+15	; 0x0f
     772:	58 88       	ldd	r5, Y+16	; 0x10
     774:	6d 88       	ldd	r6, Y+21	; 0x15
     776:	7e 88       	ldd	r7, Y+22	; 0x16
     778:	8f 88       	ldd	r8, Y+23	; 0x17
     77a:	98 8c       	ldd	r9, Y+24	; 0x18
     77c:	ee 24       	eor	r14, r14
     77e:	ff 24       	eor	r15, r15
     780:	87 01       	movw	r16, r14
     782:	aa 24       	eor	r10, r10
     784:	bb 24       	eor	r11, r11
     786:	65 01       	movw	r12, r10
     788:	40 e0       	ldi	r20, 0x00	; 0
     78a:	50 e0       	ldi	r21, 0x00	; 0
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	e0 e0       	ldi	r30, 0x00	; 0
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	c1 01       	movw	r24, r2
     796:	81 70       	andi	r24, 0x01	; 1
     798:	90 70       	andi	r25, 0x00	; 0
     79a:	89 2b       	or	r24, r25
     79c:	e9 f0       	breq	.+58     	; 0x7d8 <__mulsf3+0xf4>
     79e:	e6 0c       	add	r14, r6
     7a0:	f7 1c       	adc	r15, r7
     7a2:	08 1d       	adc	r16, r8
     7a4:	19 1d       	adc	r17, r9
     7a6:	9a 01       	movw	r18, r20
     7a8:	ab 01       	movw	r20, r22
     7aa:	2a 0d       	add	r18, r10
     7ac:	3b 1d       	adc	r19, r11
     7ae:	4c 1d       	adc	r20, r12
     7b0:	5d 1d       	adc	r21, r13
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	a0 e0       	ldi	r26, 0x00	; 0
     7b8:	b0 e0       	ldi	r27, 0x00	; 0
     7ba:	e6 14       	cp	r14, r6
     7bc:	f7 04       	cpc	r15, r7
     7be:	08 05       	cpc	r16, r8
     7c0:	19 05       	cpc	r17, r9
     7c2:	20 f4       	brcc	.+8      	; 0x7cc <__mulsf3+0xe8>
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	a0 e0       	ldi	r26, 0x00	; 0
     7ca:	b0 e0       	ldi	r27, 0x00	; 0
     7cc:	ba 01       	movw	r22, r20
     7ce:	a9 01       	movw	r20, r18
     7d0:	48 0f       	add	r20, r24
     7d2:	59 1f       	adc	r21, r25
     7d4:	6a 1f       	adc	r22, r26
     7d6:	7b 1f       	adc	r23, r27
     7d8:	aa 0c       	add	r10, r10
     7da:	bb 1c       	adc	r11, r11
     7dc:	cc 1c       	adc	r12, r12
     7de:	dd 1c       	adc	r13, r13
     7e0:	97 fe       	sbrs	r9, 7
     7e2:	08 c0       	rjmp	.+16     	; 0x7f4 <__mulsf3+0x110>
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	a0 e0       	ldi	r26, 0x00	; 0
     7ea:	b0 e0       	ldi	r27, 0x00	; 0
     7ec:	a8 2a       	or	r10, r24
     7ee:	b9 2a       	or	r11, r25
     7f0:	ca 2a       	or	r12, r26
     7f2:	db 2a       	or	r13, r27
     7f4:	31 96       	adiw	r30, 0x01	; 1
     7f6:	e0 32       	cpi	r30, 0x20	; 32
     7f8:	f1 05       	cpc	r31, r1
     7fa:	49 f0       	breq	.+18     	; 0x80e <__mulsf3+0x12a>
     7fc:	66 0c       	add	r6, r6
     7fe:	77 1c       	adc	r7, r7
     800:	88 1c       	adc	r8, r8
     802:	99 1c       	adc	r9, r9
     804:	56 94       	lsr	r5
     806:	47 94       	ror	r4
     808:	37 94       	ror	r3
     80a:	27 94       	ror	r2
     80c:	c3 cf       	rjmp	.-122    	; 0x794 <__mulsf3+0xb0>
     80e:	fa 85       	ldd	r31, Y+10	; 0x0a
     810:	ea 89       	ldd	r30, Y+18	; 0x12
     812:	2b 89       	ldd	r18, Y+19	; 0x13
     814:	3c 89       	ldd	r19, Y+20	; 0x14
     816:	8b 85       	ldd	r24, Y+11	; 0x0b
     818:	9c 85       	ldd	r25, Y+12	; 0x0c
     81a:	28 0f       	add	r18, r24
     81c:	39 1f       	adc	r19, r25
     81e:	2e 5f       	subi	r18, 0xFE	; 254
     820:	3f 4f       	sbci	r19, 0xFF	; 255
     822:	17 c0       	rjmp	.+46     	; 0x852 <__mulsf3+0x16e>
     824:	ca 01       	movw	r24, r20
     826:	81 70       	andi	r24, 0x01	; 1
     828:	90 70       	andi	r25, 0x00	; 0
     82a:	89 2b       	or	r24, r25
     82c:	61 f0       	breq	.+24     	; 0x846 <__mulsf3+0x162>
     82e:	16 95       	lsr	r17
     830:	07 95       	ror	r16
     832:	f7 94       	ror	r15
     834:	e7 94       	ror	r14
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	a0 e0       	ldi	r26, 0x00	; 0
     83c:	b0 e8       	ldi	r27, 0x80	; 128
     83e:	e8 2a       	or	r14, r24
     840:	f9 2a       	or	r15, r25
     842:	0a 2b       	or	r16, r26
     844:	1b 2b       	or	r17, r27
     846:	76 95       	lsr	r23
     848:	67 95       	ror	r22
     84a:	57 95       	ror	r21
     84c:	47 95       	ror	r20
     84e:	2f 5f       	subi	r18, 0xFF	; 255
     850:	3f 4f       	sbci	r19, 0xFF	; 255
     852:	77 fd       	sbrc	r23, 7
     854:	e7 cf       	rjmp	.-50     	; 0x824 <__mulsf3+0x140>
     856:	0c c0       	rjmp	.+24     	; 0x870 <__stack+0x11>
     858:	44 0f       	add	r20, r20
     85a:	55 1f       	adc	r21, r21
     85c:	66 1f       	adc	r22, r22
     85e:	77 1f       	adc	r23, r23
     860:	17 fd       	sbrc	r17, 7
     862:	41 60       	ori	r20, 0x01	; 1
     864:	ee 0c       	add	r14, r14
     866:	ff 1c       	adc	r15, r15
     868:	00 1f       	adc	r16, r16
     86a:	11 1f       	adc	r17, r17
     86c:	21 50       	subi	r18, 0x01	; 1
     86e:	30 40       	sbci	r19, 0x00	; 0
     870:	40 30       	cpi	r20, 0x00	; 0
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	59 07       	cpc	r21, r25
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	69 07       	cpc	r22, r25
     87a:	90 e4       	ldi	r25, 0x40	; 64
     87c:	79 07       	cpc	r23, r25
     87e:	60 f3       	brcs	.-40     	; 0x858 <__mulsf3+0x174>
     880:	2b 8f       	std	Y+27, r18	; 0x1b
     882:	3c 8f       	std	Y+28, r19	; 0x1c
     884:	db 01       	movw	r26, r22
     886:	ca 01       	movw	r24, r20
     888:	8f 77       	andi	r24, 0x7F	; 127
     88a:	90 70       	andi	r25, 0x00	; 0
     88c:	a0 70       	andi	r26, 0x00	; 0
     88e:	b0 70       	andi	r27, 0x00	; 0
     890:	80 34       	cpi	r24, 0x40	; 64
     892:	91 05       	cpc	r25, r1
     894:	a1 05       	cpc	r26, r1
     896:	b1 05       	cpc	r27, r1
     898:	61 f4       	brne	.+24     	; 0x8b2 <__stack+0x53>
     89a:	47 fd       	sbrc	r20, 7
     89c:	0a c0       	rjmp	.+20     	; 0x8b2 <__stack+0x53>
     89e:	e1 14       	cp	r14, r1
     8a0:	f1 04       	cpc	r15, r1
     8a2:	01 05       	cpc	r16, r1
     8a4:	11 05       	cpc	r17, r1
     8a6:	29 f0       	breq	.+10     	; 0x8b2 <__stack+0x53>
     8a8:	40 5c       	subi	r20, 0xC0	; 192
     8aa:	5f 4f       	sbci	r21, 0xFF	; 255
     8ac:	6f 4f       	sbci	r22, 0xFF	; 255
     8ae:	7f 4f       	sbci	r23, 0xFF	; 255
     8b0:	40 78       	andi	r20, 0x80	; 128
     8b2:	1a 8e       	std	Y+26, r1	; 0x1a
     8b4:	fe 17       	cp	r31, r30
     8b6:	11 f0       	breq	.+4      	; 0x8bc <__stack+0x5d>
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	8a 8f       	std	Y+26, r24	; 0x1a
     8bc:	4d 8f       	std	Y+29, r20	; 0x1d
     8be:	5e 8f       	std	Y+30, r21	; 0x1e
     8c0:	6f 8f       	std	Y+31, r22	; 0x1f
     8c2:	78 a3       	std	Y+32, r23	; 0x20
     8c4:	83 e0       	ldi	r24, 0x03	; 3
     8c6:	89 8f       	std	Y+25, r24	; 0x19
     8c8:	ce 01       	movw	r24, r28
     8ca:	49 96       	adiw	r24, 0x19	; 25
     8cc:	0e 94 a1 07 	call	0xf42	; 0xf42 <__pack_f>
     8d0:	a0 96       	adiw	r28, 0x20	; 32
     8d2:	e2 e1       	ldi	r30, 0x12	; 18
     8d4:	0c 94 61 17 	jmp	0x2ec2	; 0x2ec2 <__epilogue_restores__>

000008d8 <__divsf3>:
     8d8:	a8 e1       	ldi	r26, 0x18	; 24
     8da:	b0 e0       	ldi	r27, 0x00	; 0
     8dc:	e2 e7       	ldi	r30, 0x72	; 114
     8de:	f4 e0       	ldi	r31, 0x04	; 4
     8e0:	0c 94 4d 17 	jmp	0x2e9a	; 0x2e9a <__prologue_saves__+0x10>
     8e4:	69 83       	std	Y+1, r22	; 0x01
     8e6:	7a 83       	std	Y+2, r23	; 0x02
     8e8:	8b 83       	std	Y+3, r24	; 0x03
     8ea:	9c 83       	std	Y+4, r25	; 0x04
     8ec:	2d 83       	std	Y+5, r18	; 0x05
     8ee:	3e 83       	std	Y+6, r19	; 0x06
     8f0:	4f 83       	std	Y+7, r20	; 0x07
     8f2:	58 87       	std	Y+8, r21	; 0x08
     8f4:	b9 e0       	ldi	r27, 0x09	; 9
     8f6:	eb 2e       	mov	r14, r27
     8f8:	f1 2c       	mov	r15, r1
     8fa:	ec 0e       	add	r14, r28
     8fc:	fd 1e       	adc	r15, r29
     8fe:	ce 01       	movw	r24, r28
     900:	01 96       	adiw	r24, 0x01	; 1
     902:	b7 01       	movw	r22, r14
     904:	0e 94 76 08 	call	0x10ec	; 0x10ec <__unpack_f>
     908:	8e 01       	movw	r16, r28
     90a:	0f 5e       	subi	r16, 0xEF	; 239
     90c:	1f 4f       	sbci	r17, 0xFF	; 255
     90e:	ce 01       	movw	r24, r28
     910:	05 96       	adiw	r24, 0x05	; 5
     912:	b8 01       	movw	r22, r16
     914:	0e 94 76 08 	call	0x10ec	; 0x10ec <__unpack_f>
     918:	29 85       	ldd	r18, Y+9	; 0x09
     91a:	22 30       	cpi	r18, 0x02	; 2
     91c:	08 f4       	brcc	.+2      	; 0x920 <__divsf3+0x48>
     91e:	7e c0       	rjmp	.+252    	; 0xa1c <__divsf3+0x144>
     920:	39 89       	ldd	r19, Y+17	; 0x11
     922:	32 30       	cpi	r19, 0x02	; 2
     924:	10 f4       	brcc	.+4      	; 0x92a <__divsf3+0x52>
     926:	b8 01       	movw	r22, r16
     928:	7c c0       	rjmp	.+248    	; 0xa22 <__divsf3+0x14a>
     92a:	8a 85       	ldd	r24, Y+10	; 0x0a
     92c:	9a 89       	ldd	r25, Y+18	; 0x12
     92e:	89 27       	eor	r24, r25
     930:	8a 87       	std	Y+10, r24	; 0x0a
     932:	24 30       	cpi	r18, 0x04	; 4
     934:	11 f0       	breq	.+4      	; 0x93a <__divsf3+0x62>
     936:	22 30       	cpi	r18, 0x02	; 2
     938:	31 f4       	brne	.+12     	; 0x946 <__divsf3+0x6e>
     93a:	23 17       	cp	r18, r19
     93c:	09 f0       	breq	.+2      	; 0x940 <__divsf3+0x68>
     93e:	6e c0       	rjmp	.+220    	; 0xa1c <__divsf3+0x144>
     940:	65 e9       	ldi	r22, 0x95	; 149
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	6e c0       	rjmp	.+220    	; 0xa22 <__divsf3+0x14a>
     946:	34 30       	cpi	r19, 0x04	; 4
     948:	39 f4       	brne	.+14     	; 0x958 <__divsf3+0x80>
     94a:	1d 86       	std	Y+13, r1	; 0x0d
     94c:	1e 86       	std	Y+14, r1	; 0x0e
     94e:	1f 86       	std	Y+15, r1	; 0x0f
     950:	18 8a       	std	Y+16, r1	; 0x10
     952:	1c 86       	std	Y+12, r1	; 0x0c
     954:	1b 86       	std	Y+11, r1	; 0x0b
     956:	04 c0       	rjmp	.+8      	; 0x960 <__divsf3+0x88>
     958:	32 30       	cpi	r19, 0x02	; 2
     95a:	21 f4       	brne	.+8      	; 0x964 <__divsf3+0x8c>
     95c:	84 e0       	ldi	r24, 0x04	; 4
     95e:	89 87       	std	Y+9, r24	; 0x09
     960:	b7 01       	movw	r22, r14
     962:	5f c0       	rjmp	.+190    	; 0xa22 <__divsf3+0x14a>
     964:	2b 85       	ldd	r18, Y+11	; 0x0b
     966:	3c 85       	ldd	r19, Y+12	; 0x0c
     968:	8b 89       	ldd	r24, Y+19	; 0x13
     96a:	9c 89       	ldd	r25, Y+20	; 0x14
     96c:	28 1b       	sub	r18, r24
     96e:	39 0b       	sbc	r19, r25
     970:	3c 87       	std	Y+12, r19	; 0x0c
     972:	2b 87       	std	Y+11, r18	; 0x0b
     974:	ed 84       	ldd	r14, Y+13	; 0x0d
     976:	fe 84       	ldd	r15, Y+14	; 0x0e
     978:	0f 85       	ldd	r16, Y+15	; 0x0f
     97a:	18 89       	ldd	r17, Y+16	; 0x10
     97c:	ad 88       	ldd	r10, Y+21	; 0x15
     97e:	be 88       	ldd	r11, Y+22	; 0x16
     980:	cf 88       	ldd	r12, Y+23	; 0x17
     982:	d8 8c       	ldd	r13, Y+24	; 0x18
     984:	ea 14       	cp	r14, r10
     986:	fb 04       	cpc	r15, r11
     988:	0c 05       	cpc	r16, r12
     98a:	1d 05       	cpc	r17, r13
     98c:	40 f4       	brcc	.+16     	; 0x99e <__divsf3+0xc6>
     98e:	ee 0c       	add	r14, r14
     990:	ff 1c       	adc	r15, r15
     992:	00 1f       	adc	r16, r16
     994:	11 1f       	adc	r17, r17
     996:	21 50       	subi	r18, 0x01	; 1
     998:	30 40       	sbci	r19, 0x00	; 0
     99a:	3c 87       	std	Y+12, r19	; 0x0c
     99c:	2b 87       	std	Y+11, r18	; 0x0b
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e0       	ldi	r21, 0x00	; 0
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e0       	ldi	r26, 0x00	; 0
     9ac:	b0 e4       	ldi	r27, 0x40	; 64
     9ae:	60 e0       	ldi	r22, 0x00	; 0
     9b0:	70 e0       	ldi	r23, 0x00	; 0
     9b2:	ea 14       	cp	r14, r10
     9b4:	fb 04       	cpc	r15, r11
     9b6:	0c 05       	cpc	r16, r12
     9b8:	1d 05       	cpc	r17, r13
     9ba:	40 f0       	brcs	.+16     	; 0x9cc <__divsf3+0xf4>
     9bc:	28 2b       	or	r18, r24
     9be:	39 2b       	or	r19, r25
     9c0:	4a 2b       	or	r20, r26
     9c2:	5b 2b       	or	r21, r27
     9c4:	ea 18       	sub	r14, r10
     9c6:	fb 08       	sbc	r15, r11
     9c8:	0c 09       	sbc	r16, r12
     9ca:	1d 09       	sbc	r17, r13
     9cc:	b6 95       	lsr	r27
     9ce:	a7 95       	ror	r26
     9d0:	97 95       	ror	r25
     9d2:	87 95       	ror	r24
     9d4:	ee 0c       	add	r14, r14
     9d6:	ff 1c       	adc	r15, r15
     9d8:	00 1f       	adc	r16, r16
     9da:	11 1f       	adc	r17, r17
     9dc:	6f 5f       	subi	r22, 0xFF	; 255
     9de:	7f 4f       	sbci	r23, 0xFF	; 255
     9e0:	6f 31       	cpi	r22, 0x1F	; 31
     9e2:	71 05       	cpc	r23, r1
     9e4:	31 f7       	brne	.-52     	; 0x9b2 <__divsf3+0xda>
     9e6:	da 01       	movw	r26, r20
     9e8:	c9 01       	movw	r24, r18
     9ea:	8f 77       	andi	r24, 0x7F	; 127
     9ec:	90 70       	andi	r25, 0x00	; 0
     9ee:	a0 70       	andi	r26, 0x00	; 0
     9f0:	b0 70       	andi	r27, 0x00	; 0
     9f2:	80 34       	cpi	r24, 0x40	; 64
     9f4:	91 05       	cpc	r25, r1
     9f6:	a1 05       	cpc	r26, r1
     9f8:	b1 05       	cpc	r27, r1
     9fa:	61 f4       	brne	.+24     	; 0xa14 <__divsf3+0x13c>
     9fc:	27 fd       	sbrc	r18, 7
     9fe:	0a c0       	rjmp	.+20     	; 0xa14 <__divsf3+0x13c>
     a00:	e1 14       	cp	r14, r1
     a02:	f1 04       	cpc	r15, r1
     a04:	01 05       	cpc	r16, r1
     a06:	11 05       	cpc	r17, r1
     a08:	29 f0       	breq	.+10     	; 0xa14 <__divsf3+0x13c>
     a0a:	20 5c       	subi	r18, 0xC0	; 192
     a0c:	3f 4f       	sbci	r19, 0xFF	; 255
     a0e:	4f 4f       	sbci	r20, 0xFF	; 255
     a10:	5f 4f       	sbci	r21, 0xFF	; 255
     a12:	20 78       	andi	r18, 0x80	; 128
     a14:	2d 87       	std	Y+13, r18	; 0x0d
     a16:	3e 87       	std	Y+14, r19	; 0x0e
     a18:	4f 87       	std	Y+15, r20	; 0x0f
     a1a:	58 8b       	std	Y+16, r21	; 0x10
     a1c:	be 01       	movw	r22, r28
     a1e:	67 5f       	subi	r22, 0xF7	; 247
     a20:	7f 4f       	sbci	r23, 0xFF	; 255
     a22:	cb 01       	movw	r24, r22
     a24:	0e 94 a1 07 	call	0xf42	; 0xf42 <__pack_f>
     a28:	68 96       	adiw	r28, 0x18	; 24
     a2a:	ea e0       	ldi	r30, 0x0A	; 10
     a2c:	0c 94 69 17 	jmp	0x2ed2	; 0x2ed2 <__epilogue_restores__+0x10>

00000a30 <__gtsf2>:
     a30:	a8 e1       	ldi	r26, 0x18	; 24
     a32:	b0 e0       	ldi	r27, 0x00	; 0
     a34:	ee e1       	ldi	r30, 0x1E	; 30
     a36:	f5 e0       	ldi	r31, 0x05	; 5
     a38:	0c 94 51 17 	jmp	0x2ea2	; 0x2ea2 <__prologue_saves__+0x18>
     a3c:	69 83       	std	Y+1, r22	; 0x01
     a3e:	7a 83       	std	Y+2, r23	; 0x02
     a40:	8b 83       	std	Y+3, r24	; 0x03
     a42:	9c 83       	std	Y+4, r25	; 0x04
     a44:	2d 83       	std	Y+5, r18	; 0x05
     a46:	3e 83       	std	Y+6, r19	; 0x06
     a48:	4f 83       	std	Y+7, r20	; 0x07
     a4a:	58 87       	std	Y+8, r21	; 0x08
     a4c:	89 e0       	ldi	r24, 0x09	; 9
     a4e:	e8 2e       	mov	r14, r24
     a50:	f1 2c       	mov	r15, r1
     a52:	ec 0e       	add	r14, r28
     a54:	fd 1e       	adc	r15, r29
     a56:	ce 01       	movw	r24, r28
     a58:	01 96       	adiw	r24, 0x01	; 1
     a5a:	b7 01       	movw	r22, r14
     a5c:	0e 94 76 08 	call	0x10ec	; 0x10ec <__unpack_f>
     a60:	8e 01       	movw	r16, r28
     a62:	0f 5e       	subi	r16, 0xEF	; 239
     a64:	1f 4f       	sbci	r17, 0xFF	; 255
     a66:	ce 01       	movw	r24, r28
     a68:	05 96       	adiw	r24, 0x05	; 5
     a6a:	b8 01       	movw	r22, r16
     a6c:	0e 94 76 08 	call	0x10ec	; 0x10ec <__unpack_f>
     a70:	89 85       	ldd	r24, Y+9	; 0x09
     a72:	82 30       	cpi	r24, 0x02	; 2
     a74:	40 f0       	brcs	.+16     	; 0xa86 <__gtsf2+0x56>
     a76:	89 89       	ldd	r24, Y+17	; 0x11
     a78:	82 30       	cpi	r24, 0x02	; 2
     a7a:	28 f0       	brcs	.+10     	; 0xa86 <__gtsf2+0x56>
     a7c:	c7 01       	movw	r24, r14
     a7e:	b8 01       	movw	r22, r16
     a80:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__fpcmp_parts_f>
     a84:	01 c0       	rjmp	.+2      	; 0xa88 <__gtsf2+0x58>
     a86:	8f ef       	ldi	r24, 0xFF	; 255
     a88:	68 96       	adiw	r28, 0x18	; 24
     a8a:	e6 e0       	ldi	r30, 0x06	; 6
     a8c:	0c 94 6d 17 	jmp	0x2eda	; 0x2eda <__epilogue_restores__+0x18>

00000a90 <__gesf2>:
     a90:	a8 e1       	ldi	r26, 0x18	; 24
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	ee e4       	ldi	r30, 0x4E	; 78
     a96:	f5 e0       	ldi	r31, 0x05	; 5
     a98:	0c 94 51 17 	jmp	0x2ea2	; 0x2ea2 <__prologue_saves__+0x18>
     a9c:	69 83       	std	Y+1, r22	; 0x01
     a9e:	7a 83       	std	Y+2, r23	; 0x02
     aa0:	8b 83       	std	Y+3, r24	; 0x03
     aa2:	9c 83       	std	Y+4, r25	; 0x04
     aa4:	2d 83       	std	Y+5, r18	; 0x05
     aa6:	3e 83       	std	Y+6, r19	; 0x06
     aa8:	4f 83       	std	Y+7, r20	; 0x07
     aaa:	58 87       	std	Y+8, r21	; 0x08
     aac:	89 e0       	ldi	r24, 0x09	; 9
     aae:	e8 2e       	mov	r14, r24
     ab0:	f1 2c       	mov	r15, r1
     ab2:	ec 0e       	add	r14, r28
     ab4:	fd 1e       	adc	r15, r29
     ab6:	ce 01       	movw	r24, r28
     ab8:	01 96       	adiw	r24, 0x01	; 1
     aba:	b7 01       	movw	r22, r14
     abc:	0e 94 76 08 	call	0x10ec	; 0x10ec <__unpack_f>
     ac0:	8e 01       	movw	r16, r28
     ac2:	0f 5e       	subi	r16, 0xEF	; 239
     ac4:	1f 4f       	sbci	r17, 0xFF	; 255
     ac6:	ce 01       	movw	r24, r28
     ac8:	05 96       	adiw	r24, 0x05	; 5
     aca:	b8 01       	movw	r22, r16
     acc:	0e 94 76 08 	call	0x10ec	; 0x10ec <__unpack_f>
     ad0:	89 85       	ldd	r24, Y+9	; 0x09
     ad2:	82 30       	cpi	r24, 0x02	; 2
     ad4:	40 f0       	brcs	.+16     	; 0xae6 <__gesf2+0x56>
     ad6:	89 89       	ldd	r24, Y+17	; 0x11
     ad8:	82 30       	cpi	r24, 0x02	; 2
     ada:	28 f0       	brcs	.+10     	; 0xae6 <__gesf2+0x56>
     adc:	c7 01       	movw	r24, r14
     ade:	b8 01       	movw	r22, r16
     ae0:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__fpcmp_parts_f>
     ae4:	01 c0       	rjmp	.+2      	; 0xae8 <__gesf2+0x58>
     ae6:	8f ef       	ldi	r24, 0xFF	; 255
     ae8:	68 96       	adiw	r28, 0x18	; 24
     aea:	e6 e0       	ldi	r30, 0x06	; 6
     aec:	0c 94 6d 17 	jmp	0x2eda	; 0x2eda <__epilogue_restores__+0x18>

00000af0 <__ltsf2>:
     af0:	a8 e1       	ldi	r26, 0x18	; 24
     af2:	b0 e0       	ldi	r27, 0x00	; 0
     af4:	ee e7       	ldi	r30, 0x7E	; 126
     af6:	f5 e0       	ldi	r31, 0x05	; 5
     af8:	0c 94 51 17 	jmp	0x2ea2	; 0x2ea2 <__prologue_saves__+0x18>
     afc:	69 83       	std	Y+1, r22	; 0x01
     afe:	7a 83       	std	Y+2, r23	; 0x02
     b00:	8b 83       	std	Y+3, r24	; 0x03
     b02:	9c 83       	std	Y+4, r25	; 0x04
     b04:	2d 83       	std	Y+5, r18	; 0x05
     b06:	3e 83       	std	Y+6, r19	; 0x06
     b08:	4f 83       	std	Y+7, r20	; 0x07
     b0a:	58 87       	std	Y+8, r21	; 0x08
     b0c:	89 e0       	ldi	r24, 0x09	; 9
     b0e:	e8 2e       	mov	r14, r24
     b10:	f1 2c       	mov	r15, r1
     b12:	ec 0e       	add	r14, r28
     b14:	fd 1e       	adc	r15, r29
     b16:	ce 01       	movw	r24, r28
     b18:	01 96       	adiw	r24, 0x01	; 1
     b1a:	b7 01       	movw	r22, r14
     b1c:	0e 94 76 08 	call	0x10ec	; 0x10ec <__unpack_f>
     b20:	8e 01       	movw	r16, r28
     b22:	0f 5e       	subi	r16, 0xEF	; 239
     b24:	1f 4f       	sbci	r17, 0xFF	; 255
     b26:	ce 01       	movw	r24, r28
     b28:	05 96       	adiw	r24, 0x05	; 5
     b2a:	b8 01       	movw	r22, r16
     b2c:	0e 94 76 08 	call	0x10ec	; 0x10ec <__unpack_f>
     b30:	89 85       	ldd	r24, Y+9	; 0x09
     b32:	82 30       	cpi	r24, 0x02	; 2
     b34:	40 f0       	brcs	.+16     	; 0xb46 <__ltsf2+0x56>
     b36:	89 89       	ldd	r24, Y+17	; 0x11
     b38:	82 30       	cpi	r24, 0x02	; 2
     b3a:	28 f0       	brcs	.+10     	; 0xb46 <__ltsf2+0x56>
     b3c:	c7 01       	movw	r24, r14
     b3e:	b8 01       	movw	r22, r16
     b40:	0e 94 ee 08 	call	0x11dc	; 0x11dc <__fpcmp_parts_f>
     b44:	01 c0       	rjmp	.+2      	; 0xb48 <__ltsf2+0x58>
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	68 96       	adiw	r28, 0x18	; 24
     b4a:	e6 e0       	ldi	r30, 0x06	; 6
     b4c:	0c 94 6d 17 	jmp	0x2eda	; 0x2eda <__epilogue_restores__+0x18>

00000b50 <__floatsisf>:
     b50:	a8 e0       	ldi	r26, 0x08	; 8
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	ee ea       	ldi	r30, 0xAE	; 174
     b56:	f5 e0       	ldi	r31, 0x05	; 5
     b58:	0c 94 4e 17 	jmp	0x2e9c	; 0x2e9c <__prologue_saves__+0x12>
     b5c:	9b 01       	movw	r18, r22
     b5e:	ac 01       	movw	r20, r24
     b60:	83 e0       	ldi	r24, 0x03	; 3
     b62:	89 83       	std	Y+1, r24	; 0x01
     b64:	da 01       	movw	r26, r20
     b66:	c9 01       	movw	r24, r18
     b68:	88 27       	eor	r24, r24
     b6a:	b7 fd       	sbrc	r27, 7
     b6c:	83 95       	inc	r24
     b6e:	99 27       	eor	r25, r25
     b70:	aa 27       	eor	r26, r26
     b72:	bb 27       	eor	r27, r27
     b74:	b8 2e       	mov	r11, r24
     b76:	21 15       	cp	r18, r1
     b78:	31 05       	cpc	r19, r1
     b7a:	41 05       	cpc	r20, r1
     b7c:	51 05       	cpc	r21, r1
     b7e:	19 f4       	brne	.+6      	; 0xb86 <__floatsisf+0x36>
     b80:	82 e0       	ldi	r24, 0x02	; 2
     b82:	89 83       	std	Y+1, r24	; 0x01
     b84:	3a c0       	rjmp	.+116    	; 0xbfa <__floatsisf+0xaa>
     b86:	88 23       	and	r24, r24
     b88:	a9 f0       	breq	.+42     	; 0xbb4 <__floatsisf+0x64>
     b8a:	20 30       	cpi	r18, 0x00	; 0
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	38 07       	cpc	r19, r24
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	48 07       	cpc	r20, r24
     b94:	80 e8       	ldi	r24, 0x80	; 128
     b96:	58 07       	cpc	r21, r24
     b98:	29 f4       	brne	.+10     	; 0xba4 <__floatsisf+0x54>
     b9a:	60 e0       	ldi	r22, 0x00	; 0
     b9c:	70 e0       	ldi	r23, 0x00	; 0
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	9f ec       	ldi	r25, 0xCF	; 207
     ba2:	30 c0       	rjmp	.+96     	; 0xc04 <__floatsisf+0xb4>
     ba4:	ee 24       	eor	r14, r14
     ba6:	ff 24       	eor	r15, r15
     ba8:	87 01       	movw	r16, r14
     baa:	e2 1a       	sub	r14, r18
     bac:	f3 0a       	sbc	r15, r19
     bae:	04 0b       	sbc	r16, r20
     bb0:	15 0b       	sbc	r17, r21
     bb2:	02 c0       	rjmp	.+4      	; 0xbb8 <__floatsisf+0x68>
     bb4:	79 01       	movw	r14, r18
     bb6:	8a 01       	movw	r16, r20
     bb8:	8e e1       	ldi	r24, 0x1E	; 30
     bba:	c8 2e       	mov	r12, r24
     bbc:	d1 2c       	mov	r13, r1
     bbe:	dc 82       	std	Y+4, r13	; 0x04
     bc0:	cb 82       	std	Y+3, r12	; 0x03
     bc2:	ed 82       	std	Y+5, r14	; 0x05
     bc4:	fe 82       	std	Y+6, r15	; 0x06
     bc6:	0f 83       	std	Y+7, r16	; 0x07
     bc8:	18 87       	std	Y+8, r17	; 0x08
     bca:	c8 01       	movw	r24, r16
     bcc:	b7 01       	movw	r22, r14
     bce:	0e 94 52 07 	call	0xea4	; 0xea4 <__clzsi2>
     bd2:	01 97       	sbiw	r24, 0x01	; 1
     bd4:	18 16       	cp	r1, r24
     bd6:	19 06       	cpc	r1, r25
     bd8:	84 f4       	brge	.+32     	; 0xbfa <__floatsisf+0xaa>
     bda:	08 2e       	mov	r0, r24
     bdc:	04 c0       	rjmp	.+8      	; 0xbe6 <__floatsisf+0x96>
     bde:	ee 0c       	add	r14, r14
     be0:	ff 1c       	adc	r15, r15
     be2:	00 1f       	adc	r16, r16
     be4:	11 1f       	adc	r17, r17
     be6:	0a 94       	dec	r0
     be8:	d2 f7       	brpl	.-12     	; 0xbde <__floatsisf+0x8e>
     bea:	ed 82       	std	Y+5, r14	; 0x05
     bec:	fe 82       	std	Y+6, r15	; 0x06
     bee:	0f 83       	std	Y+7, r16	; 0x07
     bf0:	18 87       	std	Y+8, r17	; 0x08
     bf2:	c8 1a       	sub	r12, r24
     bf4:	d9 0a       	sbc	r13, r25
     bf6:	dc 82       	std	Y+4, r13	; 0x04
     bf8:	cb 82       	std	Y+3, r12	; 0x03
     bfa:	ba 82       	std	Y+2, r11	; 0x02
     bfc:	ce 01       	movw	r24, r28
     bfe:	01 96       	adiw	r24, 0x01	; 1
     c00:	0e 94 a1 07 	call	0xf42	; 0xf42 <__pack_f>
     c04:	28 96       	adiw	r28, 0x08	; 8
     c06:	e9 e0       	ldi	r30, 0x09	; 9
     c08:	0c 94 6a 17 	jmp	0x2ed4	; 0x2ed4 <__epilogue_restores__+0x12>

00000c0c <__fixsfsi>:
     c0c:	ac e0       	ldi	r26, 0x0C	; 12
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	ec e0       	ldi	r30, 0x0C	; 12
     c12:	f6 e0       	ldi	r31, 0x06	; 6
     c14:	0c 94 55 17 	jmp	0x2eaa	; 0x2eaa <__prologue_saves__+0x20>
     c18:	69 83       	std	Y+1, r22	; 0x01
     c1a:	7a 83       	std	Y+2, r23	; 0x02
     c1c:	8b 83       	std	Y+3, r24	; 0x03
     c1e:	9c 83       	std	Y+4, r25	; 0x04
     c20:	ce 01       	movw	r24, r28
     c22:	01 96       	adiw	r24, 0x01	; 1
     c24:	be 01       	movw	r22, r28
     c26:	6b 5f       	subi	r22, 0xFB	; 251
     c28:	7f 4f       	sbci	r23, 0xFF	; 255
     c2a:	0e 94 76 08 	call	0x10ec	; 0x10ec <__unpack_f>
     c2e:	8d 81       	ldd	r24, Y+5	; 0x05
     c30:	82 30       	cpi	r24, 0x02	; 2
     c32:	61 f1       	breq	.+88     	; 0xc8c <__fixsfsi+0x80>
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	50 f1       	brcs	.+84     	; 0xc8c <__fixsfsi+0x80>
     c38:	84 30       	cpi	r24, 0x04	; 4
     c3a:	21 f4       	brne	.+8      	; 0xc44 <__fixsfsi+0x38>
     c3c:	8e 81       	ldd	r24, Y+6	; 0x06
     c3e:	88 23       	and	r24, r24
     c40:	51 f1       	breq	.+84     	; 0xc96 <__fixsfsi+0x8a>
     c42:	2e c0       	rjmp	.+92     	; 0xca0 <__fixsfsi+0x94>
     c44:	2f 81       	ldd	r18, Y+7	; 0x07
     c46:	38 85       	ldd	r19, Y+8	; 0x08
     c48:	37 fd       	sbrc	r19, 7
     c4a:	20 c0       	rjmp	.+64     	; 0xc8c <__fixsfsi+0x80>
     c4c:	6e 81       	ldd	r22, Y+6	; 0x06
     c4e:	2f 31       	cpi	r18, 0x1F	; 31
     c50:	31 05       	cpc	r19, r1
     c52:	1c f0       	brlt	.+6      	; 0xc5a <__fixsfsi+0x4e>
     c54:	66 23       	and	r22, r22
     c56:	f9 f0       	breq	.+62     	; 0xc96 <__fixsfsi+0x8a>
     c58:	23 c0       	rjmp	.+70     	; 0xca0 <__fixsfsi+0x94>
     c5a:	8e e1       	ldi	r24, 0x1E	; 30
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	82 1b       	sub	r24, r18
     c60:	93 0b       	sbc	r25, r19
     c62:	29 85       	ldd	r18, Y+9	; 0x09
     c64:	3a 85       	ldd	r19, Y+10	; 0x0a
     c66:	4b 85       	ldd	r20, Y+11	; 0x0b
     c68:	5c 85       	ldd	r21, Y+12	; 0x0c
     c6a:	04 c0       	rjmp	.+8      	; 0xc74 <__fixsfsi+0x68>
     c6c:	56 95       	lsr	r21
     c6e:	47 95       	ror	r20
     c70:	37 95       	ror	r19
     c72:	27 95       	ror	r18
     c74:	8a 95       	dec	r24
     c76:	d2 f7       	brpl	.-12     	; 0xc6c <__fixsfsi+0x60>
     c78:	66 23       	and	r22, r22
     c7a:	b1 f0       	breq	.+44     	; 0xca8 <__fixsfsi+0x9c>
     c7c:	50 95       	com	r21
     c7e:	40 95       	com	r20
     c80:	30 95       	com	r19
     c82:	21 95       	neg	r18
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	0e c0       	rjmp	.+28     	; 0xca8 <__fixsfsi+0x9c>
     c8c:	20 e0       	ldi	r18, 0x00	; 0
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	40 e0       	ldi	r20, 0x00	; 0
     c92:	50 e0       	ldi	r21, 0x00	; 0
     c94:	09 c0       	rjmp	.+18     	; 0xca8 <__fixsfsi+0x9c>
     c96:	2f ef       	ldi	r18, 0xFF	; 255
     c98:	3f ef       	ldi	r19, 0xFF	; 255
     c9a:	4f ef       	ldi	r20, 0xFF	; 255
     c9c:	5f e7       	ldi	r21, 0x7F	; 127
     c9e:	04 c0       	rjmp	.+8      	; 0xca8 <__fixsfsi+0x9c>
     ca0:	20 e0       	ldi	r18, 0x00	; 0
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	40 e0       	ldi	r20, 0x00	; 0
     ca6:	50 e8       	ldi	r21, 0x80	; 128
     ca8:	b9 01       	movw	r22, r18
     caa:	ca 01       	movw	r24, r20
     cac:	2c 96       	adiw	r28, 0x0c	; 12
     cae:	e2 e0       	ldi	r30, 0x02	; 2
     cb0:	0c 94 71 17 	jmp	0x2ee2	; 0x2ee2 <__epilogue_restores__+0x20>

00000cb4 <__floatunsisf>:
     cb4:	a8 e0       	ldi	r26, 0x08	; 8
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e0 e6       	ldi	r30, 0x60	; 96
     cba:	f6 e0       	ldi	r31, 0x06	; 6
     cbc:	0c 94 4d 17 	jmp	0x2e9a	; 0x2e9a <__prologue_saves__+0x10>
     cc0:	7b 01       	movw	r14, r22
     cc2:	8c 01       	movw	r16, r24
     cc4:	61 15       	cp	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	81 05       	cpc	r24, r1
     cca:	91 05       	cpc	r25, r1
     ccc:	19 f4       	brne	.+6      	; 0xcd4 <__floatunsisf+0x20>
     cce:	82 e0       	ldi	r24, 0x02	; 2
     cd0:	89 83       	std	Y+1, r24	; 0x01
     cd2:	60 c0       	rjmp	.+192    	; 0xd94 <__floatunsisf+0xe0>
     cd4:	83 e0       	ldi	r24, 0x03	; 3
     cd6:	89 83       	std	Y+1, r24	; 0x01
     cd8:	8e e1       	ldi	r24, 0x1E	; 30
     cda:	c8 2e       	mov	r12, r24
     cdc:	d1 2c       	mov	r13, r1
     cde:	dc 82       	std	Y+4, r13	; 0x04
     ce0:	cb 82       	std	Y+3, r12	; 0x03
     ce2:	ed 82       	std	Y+5, r14	; 0x05
     ce4:	fe 82       	std	Y+6, r15	; 0x06
     ce6:	0f 83       	std	Y+7, r16	; 0x07
     ce8:	18 87       	std	Y+8, r17	; 0x08
     cea:	c8 01       	movw	r24, r16
     cec:	b7 01       	movw	r22, r14
     cee:	0e 94 52 07 	call	0xea4	; 0xea4 <__clzsi2>
     cf2:	fc 01       	movw	r30, r24
     cf4:	31 97       	sbiw	r30, 0x01	; 1
     cf6:	f7 ff       	sbrs	r31, 7
     cf8:	3b c0       	rjmp	.+118    	; 0xd70 <__floatunsisf+0xbc>
     cfa:	22 27       	eor	r18, r18
     cfc:	33 27       	eor	r19, r19
     cfe:	2e 1b       	sub	r18, r30
     d00:	3f 0b       	sbc	r19, r31
     d02:	57 01       	movw	r10, r14
     d04:	68 01       	movw	r12, r16
     d06:	02 2e       	mov	r0, r18
     d08:	04 c0       	rjmp	.+8      	; 0xd12 <__floatunsisf+0x5e>
     d0a:	d6 94       	lsr	r13
     d0c:	c7 94       	ror	r12
     d0e:	b7 94       	ror	r11
     d10:	a7 94       	ror	r10
     d12:	0a 94       	dec	r0
     d14:	d2 f7       	brpl	.-12     	; 0xd0a <__floatunsisf+0x56>
     d16:	40 e0       	ldi	r20, 0x00	; 0
     d18:	50 e0       	ldi	r21, 0x00	; 0
     d1a:	60 e0       	ldi	r22, 0x00	; 0
     d1c:	70 e0       	ldi	r23, 0x00	; 0
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	a0 e0       	ldi	r26, 0x00	; 0
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	04 c0       	rjmp	.+8      	; 0xd30 <__floatunsisf+0x7c>
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	aa 1f       	adc	r26, r26
     d2e:	bb 1f       	adc	r27, r27
     d30:	2a 95       	dec	r18
     d32:	d2 f7       	brpl	.-12     	; 0xd28 <__floatunsisf+0x74>
     d34:	01 97       	sbiw	r24, 0x01	; 1
     d36:	a1 09       	sbc	r26, r1
     d38:	b1 09       	sbc	r27, r1
     d3a:	8e 21       	and	r24, r14
     d3c:	9f 21       	and	r25, r15
     d3e:	a0 23       	and	r26, r16
     d40:	b1 23       	and	r27, r17
     d42:	00 97       	sbiw	r24, 0x00	; 0
     d44:	a1 05       	cpc	r26, r1
     d46:	b1 05       	cpc	r27, r1
     d48:	21 f0       	breq	.+8      	; 0xd52 <__floatunsisf+0x9e>
     d4a:	41 e0       	ldi	r20, 0x01	; 1
     d4c:	50 e0       	ldi	r21, 0x00	; 0
     d4e:	60 e0       	ldi	r22, 0x00	; 0
     d50:	70 e0       	ldi	r23, 0x00	; 0
     d52:	4a 29       	or	r20, r10
     d54:	5b 29       	or	r21, r11
     d56:	6c 29       	or	r22, r12
     d58:	7d 29       	or	r23, r13
     d5a:	4d 83       	std	Y+5, r20	; 0x05
     d5c:	5e 83       	std	Y+6, r21	; 0x06
     d5e:	6f 83       	std	Y+7, r22	; 0x07
     d60:	78 87       	std	Y+8, r23	; 0x08
     d62:	8e e1       	ldi	r24, 0x1E	; 30
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	8e 1b       	sub	r24, r30
     d68:	9f 0b       	sbc	r25, r31
     d6a:	9c 83       	std	Y+4, r25	; 0x04
     d6c:	8b 83       	std	Y+3, r24	; 0x03
     d6e:	12 c0       	rjmp	.+36     	; 0xd94 <__floatunsisf+0xe0>
     d70:	30 97       	sbiw	r30, 0x00	; 0
     d72:	81 f0       	breq	.+32     	; 0xd94 <__floatunsisf+0xe0>
     d74:	0e 2e       	mov	r0, r30
     d76:	04 c0       	rjmp	.+8      	; 0xd80 <__floatunsisf+0xcc>
     d78:	ee 0c       	add	r14, r14
     d7a:	ff 1c       	adc	r15, r15
     d7c:	00 1f       	adc	r16, r16
     d7e:	11 1f       	adc	r17, r17
     d80:	0a 94       	dec	r0
     d82:	d2 f7       	brpl	.-12     	; 0xd78 <__floatunsisf+0xc4>
     d84:	ed 82       	std	Y+5, r14	; 0x05
     d86:	fe 82       	std	Y+6, r15	; 0x06
     d88:	0f 83       	std	Y+7, r16	; 0x07
     d8a:	18 87       	std	Y+8, r17	; 0x08
     d8c:	ce 1a       	sub	r12, r30
     d8e:	df 0a       	sbc	r13, r31
     d90:	dc 82       	std	Y+4, r13	; 0x04
     d92:	cb 82       	std	Y+3, r12	; 0x03
     d94:	1a 82       	std	Y+2, r1	; 0x02
     d96:	ce 01       	movw	r24, r28
     d98:	01 96       	adiw	r24, 0x01	; 1
     d9a:	0e 94 a1 07 	call	0xf42	; 0xf42 <__pack_f>
     d9e:	28 96       	adiw	r28, 0x08	; 8
     da0:	ea e0       	ldi	r30, 0x0A	; 10
     da2:	0c 94 69 17 	jmp	0x2ed2	; 0x2ed2 <__epilogue_restores__+0x10>

00000da6 <__lshrdi3>:
     da6:	ef 92       	push	r14
     da8:	ff 92       	push	r15
     daa:	0f 93       	push	r16
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
     db4:	60 97       	sbiw	r28, 0x10	; 16
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	f8 94       	cli
     dba:	de bf       	out	0x3e, r29	; 62
     dbc:	0f be       	out	0x3f, r0	; 63
     dbe:	cd bf       	out	0x3d, r28	; 61
     dc0:	a8 2f       	mov	r26, r24
     dc2:	00 23       	and	r16, r16
     dc4:	09 f4       	brne	.+2      	; 0xdc8 <__lshrdi3+0x22>
     dc6:	61 c0       	rjmp	.+194    	; 0xe8a <__lshrdi3+0xe4>
     dc8:	7e 01       	movw	r14, r28
     dca:	08 94       	sec
     dcc:	e1 1c       	adc	r14, r1
     dce:	f1 1c       	adc	r15, r1
     dd0:	88 e0       	ldi	r24, 0x08	; 8
     dd2:	f7 01       	movw	r30, r14
     dd4:	11 92       	st	Z+, r1
     dd6:	8a 95       	dec	r24
     dd8:	e9 f7       	brne	.-6      	; 0xdd4 <__lshrdi3+0x2e>
     dda:	29 83       	std	Y+1, r18	; 0x01
     ddc:	3a 83       	std	Y+2, r19	; 0x02
     dde:	4b 83       	std	Y+3, r20	; 0x03
     de0:	5c 83       	std	Y+4, r21	; 0x04
     de2:	6d 83       	std	Y+5, r22	; 0x05
     de4:	7e 83       	std	Y+6, r23	; 0x06
     de6:	af 83       	std	Y+7, r26	; 0x07
     de8:	98 87       	std	Y+8, r25	; 0x08
     dea:	80 e2       	ldi	r24, 0x20	; 32
     dec:	80 1b       	sub	r24, r16
     dee:	e8 2f       	mov	r30, r24
     df0:	ff 27       	eor	r31, r31
     df2:	e7 fd       	sbrc	r30, 7
     df4:	f0 95       	com	r31
     df6:	4d 81       	ldd	r20, Y+5	; 0x05
     df8:	5e 81       	ldd	r21, Y+6	; 0x06
     dfa:	6f 81       	ldd	r22, Y+7	; 0x07
     dfc:	78 85       	ldd	r23, Y+8	; 0x08
     dfe:	18 16       	cp	r1, r24
     e00:	84 f0       	brlt	.+32     	; 0xe22 <__lshrdi3+0x7c>
     e02:	1d 86       	std	Y+13, r1	; 0x0d
     e04:	1e 86       	std	Y+14, r1	; 0x0e
     e06:	1f 86       	std	Y+15, r1	; 0x0f
     e08:	18 8a       	std	Y+16, r1	; 0x10
     e0a:	88 27       	eor	r24, r24
     e0c:	99 27       	eor	r25, r25
     e0e:	8e 1b       	sub	r24, r30
     e10:	9f 0b       	sbc	r25, r31
     e12:	04 c0       	rjmp	.+8      	; 0xe1c <__lshrdi3+0x76>
     e14:	76 95       	lsr	r23
     e16:	67 95       	ror	r22
     e18:	57 95       	ror	r21
     e1a:	47 95       	ror	r20
     e1c:	8a 95       	dec	r24
     e1e:	d2 f7       	brpl	.-12     	; 0xe14 <__lshrdi3+0x6e>
     e20:	28 c0       	rjmp	.+80     	; 0xe72 <__lshrdi3+0xcc>
     e22:	20 2f       	mov	r18, r16
     e24:	33 27       	eor	r19, r19
     e26:	27 fd       	sbrc	r18, 7
     e28:	30 95       	com	r19
     e2a:	db 01       	movw	r26, r22
     e2c:	ca 01       	movw	r24, r20
     e2e:	02 2e       	mov	r0, r18
     e30:	04 c0       	rjmp	.+8      	; 0xe3a <__lshrdi3+0x94>
     e32:	b6 95       	lsr	r27
     e34:	a7 95       	ror	r26
     e36:	97 95       	ror	r25
     e38:	87 95       	ror	r24
     e3a:	0a 94       	dec	r0
     e3c:	d2 f7       	brpl	.-12     	; 0xe32 <__lshrdi3+0x8c>
     e3e:	8d 87       	std	Y+13, r24	; 0x0d
     e40:	9e 87       	std	Y+14, r25	; 0x0e
     e42:	af 87       	std	Y+15, r26	; 0x0f
     e44:	b8 8b       	std	Y+16, r27	; 0x10
     e46:	04 c0       	rjmp	.+8      	; 0xe50 <__lshrdi3+0xaa>
     e48:	44 0f       	add	r20, r20
     e4a:	55 1f       	adc	r21, r21
     e4c:	66 1f       	adc	r22, r22
     e4e:	77 1f       	adc	r23, r23
     e50:	ea 95       	dec	r30
     e52:	d2 f7       	brpl	.-12     	; 0xe48 <__lshrdi3+0xa2>
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	9a 81       	ldd	r25, Y+2	; 0x02
     e58:	ab 81       	ldd	r26, Y+3	; 0x03
     e5a:	bc 81       	ldd	r27, Y+4	; 0x04
     e5c:	04 c0       	rjmp	.+8      	; 0xe66 <__lshrdi3+0xc0>
     e5e:	b6 95       	lsr	r27
     e60:	a7 95       	ror	r26
     e62:	97 95       	ror	r25
     e64:	87 95       	ror	r24
     e66:	2a 95       	dec	r18
     e68:	d2 f7       	brpl	.-12     	; 0xe5e <__lshrdi3+0xb8>
     e6a:	48 2b       	or	r20, r24
     e6c:	59 2b       	or	r21, r25
     e6e:	6a 2b       	or	r22, r26
     e70:	7b 2b       	or	r23, r27
     e72:	49 87       	std	Y+9, r20	; 0x09
     e74:	5a 87       	std	Y+10, r21	; 0x0a
     e76:	6b 87       	std	Y+11, r22	; 0x0b
     e78:	7c 87       	std	Y+12, r23	; 0x0c
     e7a:	29 85       	ldd	r18, Y+9	; 0x09
     e7c:	3a 85       	ldd	r19, Y+10	; 0x0a
     e7e:	4b 85       	ldd	r20, Y+11	; 0x0b
     e80:	5c 85       	ldd	r21, Y+12	; 0x0c
     e82:	6d 85       	ldd	r22, Y+13	; 0x0d
     e84:	7e 85       	ldd	r23, Y+14	; 0x0e
     e86:	af 85       	ldd	r26, Y+15	; 0x0f
     e88:	98 89       	ldd	r25, Y+16	; 0x10
     e8a:	8a 2f       	mov	r24, r26
     e8c:	60 96       	adiw	r28, 0x10	; 16
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	f8 94       	cli
     e92:	de bf       	out	0x3e, r29	; 62
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	cd bf       	out	0x3d, r28	; 61
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	0f 91       	pop	r16
     e9e:	ff 90       	pop	r15
     ea0:	ef 90       	pop	r14
     ea2:	08 95       	ret

00000ea4 <__clzsi2>:
     ea4:	ef 92       	push	r14
     ea6:	ff 92       	push	r15
     ea8:	0f 93       	push	r16
     eaa:	1f 93       	push	r17
     eac:	7b 01       	movw	r14, r22
     eae:	8c 01       	movw	r16, r24
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	e8 16       	cp	r14, r24
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	f8 06       	cpc	r15, r24
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	08 07       	cpc	r16, r24
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	18 07       	cpc	r17, r24
     ec0:	88 f4       	brcc	.+34     	; 0xee4 <__clzsi2+0x40>
     ec2:	8f ef       	ldi	r24, 0xFF	; 255
     ec4:	e8 16       	cp	r14, r24
     ec6:	f1 04       	cpc	r15, r1
     ec8:	01 05       	cpc	r16, r1
     eca:	11 05       	cpc	r17, r1
     ecc:	31 f0       	breq	.+12     	; 0xeda <__clzsi2+0x36>
     ece:	28 f0       	brcs	.+10     	; 0xeda <__clzsi2+0x36>
     ed0:	88 e0       	ldi	r24, 0x08	; 8
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	a0 e0       	ldi	r26, 0x00	; 0
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	17 c0       	rjmp	.+46     	; 0xf08 <__clzsi2+0x64>
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	a0 e0       	ldi	r26, 0x00	; 0
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	12 c0       	rjmp	.+36     	; 0xf08 <__clzsi2+0x64>
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	e8 16       	cp	r14, r24
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	f8 06       	cpc	r15, r24
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	08 07       	cpc	r16, r24
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	18 07       	cpc	r17, r24
     ef4:	28 f0       	brcs	.+10     	; 0xf00 <__clzsi2+0x5c>
     ef6:	88 e1       	ldi	r24, 0x18	; 24
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	a0 e0       	ldi	r26, 0x00	; 0
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	04 c0       	rjmp	.+8      	; 0xf08 <__clzsi2+0x64>
     f00:	80 e1       	ldi	r24, 0x10	; 16
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	a0 e0       	ldi	r26, 0x00	; 0
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	20 e2       	ldi	r18, 0x20	; 32
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	40 e0       	ldi	r20, 0x00	; 0
     f0e:	50 e0       	ldi	r21, 0x00	; 0
     f10:	28 1b       	sub	r18, r24
     f12:	39 0b       	sbc	r19, r25
     f14:	4a 0b       	sbc	r20, r26
     f16:	5b 0b       	sbc	r21, r27
     f18:	04 c0       	rjmp	.+8      	; 0xf22 <__clzsi2+0x7e>
     f1a:	16 95       	lsr	r17
     f1c:	07 95       	ror	r16
     f1e:	f7 94       	ror	r15
     f20:	e7 94       	ror	r14
     f22:	8a 95       	dec	r24
     f24:	d2 f7       	brpl	.-12     	; 0xf1a <__clzsi2+0x76>
     f26:	f7 01       	movw	r30, r14
     f28:	e3 56       	subi	r30, 0x63	; 99
     f2a:	ff 4f       	sbci	r31, 0xFF	; 255
     f2c:	80 81       	ld	r24, Z
     f2e:	28 1b       	sub	r18, r24
     f30:	31 09       	sbc	r19, r1
     f32:	41 09       	sbc	r20, r1
     f34:	51 09       	sbc	r21, r1
     f36:	c9 01       	movw	r24, r18
     f38:	1f 91       	pop	r17
     f3a:	0f 91       	pop	r16
     f3c:	ff 90       	pop	r15
     f3e:	ef 90       	pop	r14
     f40:	08 95       	ret

00000f42 <__pack_f>:
     f42:	df 92       	push	r13
     f44:	ef 92       	push	r14
     f46:	ff 92       	push	r15
     f48:	0f 93       	push	r16
     f4a:	1f 93       	push	r17
     f4c:	fc 01       	movw	r30, r24
     f4e:	e4 80       	ldd	r14, Z+4	; 0x04
     f50:	f5 80       	ldd	r15, Z+5	; 0x05
     f52:	06 81       	ldd	r16, Z+6	; 0x06
     f54:	17 81       	ldd	r17, Z+7	; 0x07
     f56:	d1 80       	ldd	r13, Z+1	; 0x01
     f58:	80 81       	ld	r24, Z
     f5a:	82 30       	cpi	r24, 0x02	; 2
     f5c:	48 f4       	brcc	.+18     	; 0xf70 <__pack_f+0x2e>
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	a0 e1       	ldi	r26, 0x10	; 16
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e8 2a       	or	r14, r24
     f68:	f9 2a       	or	r15, r25
     f6a:	0a 2b       	or	r16, r26
     f6c:	1b 2b       	or	r17, r27
     f6e:	a5 c0       	rjmp	.+330    	; 0x10ba <__pack_f+0x178>
     f70:	84 30       	cpi	r24, 0x04	; 4
     f72:	09 f4       	brne	.+2      	; 0xf76 <__pack_f+0x34>
     f74:	9f c0       	rjmp	.+318    	; 0x10b4 <__pack_f+0x172>
     f76:	82 30       	cpi	r24, 0x02	; 2
     f78:	21 f4       	brne	.+8      	; 0xf82 <__pack_f+0x40>
     f7a:	ee 24       	eor	r14, r14
     f7c:	ff 24       	eor	r15, r15
     f7e:	87 01       	movw	r16, r14
     f80:	05 c0       	rjmp	.+10     	; 0xf8c <__pack_f+0x4a>
     f82:	e1 14       	cp	r14, r1
     f84:	f1 04       	cpc	r15, r1
     f86:	01 05       	cpc	r16, r1
     f88:	11 05       	cpc	r17, r1
     f8a:	19 f4       	brne	.+6      	; 0xf92 <__pack_f+0x50>
     f8c:	e0 e0       	ldi	r30, 0x00	; 0
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	96 c0       	rjmp	.+300    	; 0x10be <__pack_f+0x17c>
     f92:	62 81       	ldd	r22, Z+2	; 0x02
     f94:	73 81       	ldd	r23, Z+3	; 0x03
     f96:	9f ef       	ldi	r25, 0xFF	; 255
     f98:	62 38       	cpi	r22, 0x82	; 130
     f9a:	79 07       	cpc	r23, r25
     f9c:	0c f0       	brlt	.+2      	; 0xfa0 <__pack_f+0x5e>
     f9e:	5b c0       	rjmp	.+182    	; 0x1056 <__pack_f+0x114>
     fa0:	22 e8       	ldi	r18, 0x82	; 130
     fa2:	3f ef       	ldi	r19, 0xFF	; 255
     fa4:	26 1b       	sub	r18, r22
     fa6:	37 0b       	sbc	r19, r23
     fa8:	2a 31       	cpi	r18, 0x1A	; 26
     faa:	31 05       	cpc	r19, r1
     fac:	2c f0       	brlt	.+10     	; 0xfb8 <__pack_f+0x76>
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	40 e0       	ldi	r20, 0x00	; 0
     fb4:	50 e0       	ldi	r21, 0x00	; 0
     fb6:	2a c0       	rjmp	.+84     	; 0x100c <__pack_f+0xca>
     fb8:	b8 01       	movw	r22, r16
     fba:	a7 01       	movw	r20, r14
     fbc:	02 2e       	mov	r0, r18
     fbe:	04 c0       	rjmp	.+8      	; 0xfc8 <__pack_f+0x86>
     fc0:	76 95       	lsr	r23
     fc2:	67 95       	ror	r22
     fc4:	57 95       	ror	r21
     fc6:	47 95       	ror	r20
     fc8:	0a 94       	dec	r0
     fca:	d2 f7       	brpl	.-12     	; 0xfc0 <__pack_f+0x7e>
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	a0 e0       	ldi	r26, 0x00	; 0
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	04 c0       	rjmp	.+8      	; 0xfde <__pack_f+0x9c>
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	aa 1f       	adc	r26, r26
     fdc:	bb 1f       	adc	r27, r27
     fde:	2a 95       	dec	r18
     fe0:	d2 f7       	brpl	.-12     	; 0xfd6 <__pack_f+0x94>
     fe2:	01 97       	sbiw	r24, 0x01	; 1
     fe4:	a1 09       	sbc	r26, r1
     fe6:	b1 09       	sbc	r27, r1
     fe8:	8e 21       	and	r24, r14
     fea:	9f 21       	and	r25, r15
     fec:	a0 23       	and	r26, r16
     fee:	b1 23       	and	r27, r17
     ff0:	00 97       	sbiw	r24, 0x00	; 0
     ff2:	a1 05       	cpc	r26, r1
     ff4:	b1 05       	cpc	r27, r1
     ff6:	21 f0       	breq	.+8      	; 0x1000 <__pack_f+0xbe>
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	a0 e0       	ldi	r26, 0x00	; 0
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	9a 01       	movw	r18, r20
    1002:	ab 01       	movw	r20, r22
    1004:	28 2b       	or	r18, r24
    1006:	39 2b       	or	r19, r25
    1008:	4a 2b       	or	r20, r26
    100a:	5b 2b       	or	r21, r27
    100c:	da 01       	movw	r26, r20
    100e:	c9 01       	movw	r24, r18
    1010:	8f 77       	andi	r24, 0x7F	; 127
    1012:	90 70       	andi	r25, 0x00	; 0
    1014:	a0 70       	andi	r26, 0x00	; 0
    1016:	b0 70       	andi	r27, 0x00	; 0
    1018:	80 34       	cpi	r24, 0x40	; 64
    101a:	91 05       	cpc	r25, r1
    101c:	a1 05       	cpc	r26, r1
    101e:	b1 05       	cpc	r27, r1
    1020:	39 f4       	brne	.+14     	; 0x1030 <__pack_f+0xee>
    1022:	27 ff       	sbrs	r18, 7
    1024:	09 c0       	rjmp	.+18     	; 0x1038 <__pack_f+0xf6>
    1026:	20 5c       	subi	r18, 0xC0	; 192
    1028:	3f 4f       	sbci	r19, 0xFF	; 255
    102a:	4f 4f       	sbci	r20, 0xFF	; 255
    102c:	5f 4f       	sbci	r21, 0xFF	; 255
    102e:	04 c0       	rjmp	.+8      	; 0x1038 <__pack_f+0xf6>
    1030:	21 5c       	subi	r18, 0xC1	; 193
    1032:	3f 4f       	sbci	r19, 0xFF	; 255
    1034:	4f 4f       	sbci	r20, 0xFF	; 255
    1036:	5f 4f       	sbci	r21, 0xFF	; 255
    1038:	e0 e0       	ldi	r30, 0x00	; 0
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	20 30       	cpi	r18, 0x00	; 0
    103e:	a0 e0       	ldi	r26, 0x00	; 0
    1040:	3a 07       	cpc	r19, r26
    1042:	a0 e0       	ldi	r26, 0x00	; 0
    1044:	4a 07       	cpc	r20, r26
    1046:	a0 e4       	ldi	r26, 0x40	; 64
    1048:	5a 07       	cpc	r21, r26
    104a:	10 f0       	brcs	.+4      	; 0x1050 <__pack_f+0x10e>
    104c:	e1 e0       	ldi	r30, 0x01	; 1
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	79 01       	movw	r14, r18
    1052:	8a 01       	movw	r16, r20
    1054:	27 c0       	rjmp	.+78     	; 0x10a4 <__pack_f+0x162>
    1056:	60 38       	cpi	r22, 0x80	; 128
    1058:	71 05       	cpc	r23, r1
    105a:	64 f5       	brge	.+88     	; 0x10b4 <__pack_f+0x172>
    105c:	fb 01       	movw	r30, r22
    105e:	e1 58       	subi	r30, 0x81	; 129
    1060:	ff 4f       	sbci	r31, 0xFF	; 255
    1062:	d8 01       	movw	r26, r16
    1064:	c7 01       	movw	r24, r14
    1066:	8f 77       	andi	r24, 0x7F	; 127
    1068:	90 70       	andi	r25, 0x00	; 0
    106a:	a0 70       	andi	r26, 0x00	; 0
    106c:	b0 70       	andi	r27, 0x00	; 0
    106e:	80 34       	cpi	r24, 0x40	; 64
    1070:	91 05       	cpc	r25, r1
    1072:	a1 05       	cpc	r26, r1
    1074:	b1 05       	cpc	r27, r1
    1076:	39 f4       	brne	.+14     	; 0x1086 <__pack_f+0x144>
    1078:	e7 fe       	sbrs	r14, 7
    107a:	0d c0       	rjmp	.+26     	; 0x1096 <__pack_f+0x154>
    107c:	80 e4       	ldi	r24, 0x40	; 64
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	a0 e0       	ldi	r26, 0x00	; 0
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	04 c0       	rjmp	.+8      	; 0x108e <__pack_f+0x14c>
    1086:	8f e3       	ldi	r24, 0x3F	; 63
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	a0 e0       	ldi	r26, 0x00	; 0
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e8 0e       	add	r14, r24
    1090:	f9 1e       	adc	r15, r25
    1092:	0a 1f       	adc	r16, r26
    1094:	1b 1f       	adc	r17, r27
    1096:	17 ff       	sbrs	r17, 7
    1098:	05 c0       	rjmp	.+10     	; 0x10a4 <__pack_f+0x162>
    109a:	16 95       	lsr	r17
    109c:	07 95       	ror	r16
    109e:	f7 94       	ror	r15
    10a0:	e7 94       	ror	r14
    10a2:	31 96       	adiw	r30, 0x01	; 1
    10a4:	87 e0       	ldi	r24, 0x07	; 7
    10a6:	16 95       	lsr	r17
    10a8:	07 95       	ror	r16
    10aa:	f7 94       	ror	r15
    10ac:	e7 94       	ror	r14
    10ae:	8a 95       	dec	r24
    10b0:	d1 f7       	brne	.-12     	; 0x10a6 <__pack_f+0x164>
    10b2:	05 c0       	rjmp	.+10     	; 0x10be <__pack_f+0x17c>
    10b4:	ee 24       	eor	r14, r14
    10b6:	ff 24       	eor	r15, r15
    10b8:	87 01       	movw	r16, r14
    10ba:	ef ef       	ldi	r30, 0xFF	; 255
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	6e 2f       	mov	r22, r30
    10c0:	67 95       	ror	r22
    10c2:	66 27       	eor	r22, r22
    10c4:	67 95       	ror	r22
    10c6:	90 2f       	mov	r25, r16
    10c8:	9f 77       	andi	r25, 0x7F	; 127
    10ca:	d7 94       	ror	r13
    10cc:	dd 24       	eor	r13, r13
    10ce:	d7 94       	ror	r13
    10d0:	8e 2f       	mov	r24, r30
    10d2:	86 95       	lsr	r24
    10d4:	49 2f       	mov	r20, r25
    10d6:	46 2b       	or	r20, r22
    10d8:	58 2f       	mov	r21, r24
    10da:	5d 29       	or	r21, r13
    10dc:	b7 01       	movw	r22, r14
    10de:	ca 01       	movw	r24, r20
    10e0:	1f 91       	pop	r17
    10e2:	0f 91       	pop	r16
    10e4:	ff 90       	pop	r15
    10e6:	ef 90       	pop	r14
    10e8:	df 90       	pop	r13
    10ea:	08 95       	ret

000010ec <__unpack_f>:
    10ec:	fc 01       	movw	r30, r24
    10ee:	db 01       	movw	r26, r22
    10f0:	40 81       	ld	r20, Z
    10f2:	51 81       	ldd	r21, Z+1	; 0x01
    10f4:	22 81       	ldd	r18, Z+2	; 0x02
    10f6:	62 2f       	mov	r22, r18
    10f8:	6f 77       	andi	r22, 0x7F	; 127
    10fa:	70 e0       	ldi	r23, 0x00	; 0
    10fc:	22 1f       	adc	r18, r18
    10fe:	22 27       	eor	r18, r18
    1100:	22 1f       	adc	r18, r18
    1102:	93 81       	ldd	r25, Z+3	; 0x03
    1104:	89 2f       	mov	r24, r25
    1106:	88 0f       	add	r24, r24
    1108:	82 2b       	or	r24, r18
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	99 1f       	adc	r25, r25
    1110:	99 27       	eor	r25, r25
    1112:	99 1f       	adc	r25, r25
    1114:	11 96       	adiw	r26, 0x01	; 1
    1116:	9c 93       	st	X, r25
    1118:	11 97       	sbiw	r26, 0x01	; 1
    111a:	21 15       	cp	r18, r1
    111c:	31 05       	cpc	r19, r1
    111e:	a9 f5       	brne	.+106    	; 0x118a <__unpack_f+0x9e>
    1120:	41 15       	cp	r20, r1
    1122:	51 05       	cpc	r21, r1
    1124:	61 05       	cpc	r22, r1
    1126:	71 05       	cpc	r23, r1
    1128:	11 f4       	brne	.+4      	; 0x112e <__unpack_f+0x42>
    112a:	82 e0       	ldi	r24, 0x02	; 2
    112c:	37 c0       	rjmp	.+110    	; 0x119c <__unpack_f+0xb0>
    112e:	82 e8       	ldi	r24, 0x82	; 130
    1130:	9f ef       	ldi	r25, 0xFF	; 255
    1132:	13 96       	adiw	r26, 0x03	; 3
    1134:	9c 93       	st	X, r25
    1136:	8e 93       	st	-X, r24
    1138:	12 97       	sbiw	r26, 0x02	; 2
    113a:	9a 01       	movw	r18, r20
    113c:	ab 01       	movw	r20, r22
    113e:	67 e0       	ldi	r22, 0x07	; 7
    1140:	22 0f       	add	r18, r18
    1142:	33 1f       	adc	r19, r19
    1144:	44 1f       	adc	r20, r20
    1146:	55 1f       	adc	r21, r21
    1148:	6a 95       	dec	r22
    114a:	d1 f7       	brne	.-12     	; 0x1140 <__unpack_f+0x54>
    114c:	83 e0       	ldi	r24, 0x03	; 3
    114e:	8c 93       	st	X, r24
    1150:	0d c0       	rjmp	.+26     	; 0x116c <__unpack_f+0x80>
    1152:	22 0f       	add	r18, r18
    1154:	33 1f       	adc	r19, r19
    1156:	44 1f       	adc	r20, r20
    1158:	55 1f       	adc	r21, r21
    115a:	12 96       	adiw	r26, 0x02	; 2
    115c:	8d 91       	ld	r24, X+
    115e:	9c 91       	ld	r25, X
    1160:	13 97       	sbiw	r26, 0x03	; 3
    1162:	01 97       	sbiw	r24, 0x01	; 1
    1164:	13 96       	adiw	r26, 0x03	; 3
    1166:	9c 93       	st	X, r25
    1168:	8e 93       	st	-X, r24
    116a:	12 97       	sbiw	r26, 0x02	; 2
    116c:	20 30       	cpi	r18, 0x00	; 0
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	38 07       	cpc	r19, r24
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	48 07       	cpc	r20, r24
    1176:	80 e4       	ldi	r24, 0x40	; 64
    1178:	58 07       	cpc	r21, r24
    117a:	58 f3       	brcs	.-42     	; 0x1152 <__unpack_f+0x66>
    117c:	14 96       	adiw	r26, 0x04	; 4
    117e:	2d 93       	st	X+, r18
    1180:	3d 93       	st	X+, r19
    1182:	4d 93       	st	X+, r20
    1184:	5c 93       	st	X, r21
    1186:	17 97       	sbiw	r26, 0x07	; 7
    1188:	08 95       	ret
    118a:	2f 3f       	cpi	r18, 0xFF	; 255
    118c:	31 05       	cpc	r19, r1
    118e:	79 f4       	brne	.+30     	; 0x11ae <__unpack_f+0xc2>
    1190:	41 15       	cp	r20, r1
    1192:	51 05       	cpc	r21, r1
    1194:	61 05       	cpc	r22, r1
    1196:	71 05       	cpc	r23, r1
    1198:	19 f4       	brne	.+6      	; 0x11a0 <__unpack_f+0xb4>
    119a:	84 e0       	ldi	r24, 0x04	; 4
    119c:	8c 93       	st	X, r24
    119e:	08 95       	ret
    11a0:	64 ff       	sbrs	r22, 4
    11a2:	03 c0       	rjmp	.+6      	; 0x11aa <__unpack_f+0xbe>
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	8c 93       	st	X, r24
    11a8:	12 c0       	rjmp	.+36     	; 0x11ce <__unpack_f+0xe2>
    11aa:	1c 92       	st	X, r1
    11ac:	10 c0       	rjmp	.+32     	; 0x11ce <__unpack_f+0xe2>
    11ae:	2f 57       	subi	r18, 0x7F	; 127
    11b0:	30 40       	sbci	r19, 0x00	; 0
    11b2:	13 96       	adiw	r26, 0x03	; 3
    11b4:	3c 93       	st	X, r19
    11b6:	2e 93       	st	-X, r18
    11b8:	12 97       	sbiw	r26, 0x02	; 2
    11ba:	83 e0       	ldi	r24, 0x03	; 3
    11bc:	8c 93       	st	X, r24
    11be:	87 e0       	ldi	r24, 0x07	; 7
    11c0:	44 0f       	add	r20, r20
    11c2:	55 1f       	adc	r21, r21
    11c4:	66 1f       	adc	r22, r22
    11c6:	77 1f       	adc	r23, r23
    11c8:	8a 95       	dec	r24
    11ca:	d1 f7       	brne	.-12     	; 0x11c0 <__unpack_f+0xd4>
    11cc:	70 64       	ori	r23, 0x40	; 64
    11ce:	14 96       	adiw	r26, 0x04	; 4
    11d0:	4d 93       	st	X+, r20
    11d2:	5d 93       	st	X+, r21
    11d4:	6d 93       	st	X+, r22
    11d6:	7c 93       	st	X, r23
    11d8:	17 97       	sbiw	r26, 0x07	; 7
    11da:	08 95       	ret

000011dc <__fpcmp_parts_f>:
    11dc:	1f 93       	push	r17
    11de:	dc 01       	movw	r26, r24
    11e0:	fb 01       	movw	r30, r22
    11e2:	9c 91       	ld	r25, X
    11e4:	92 30       	cpi	r25, 0x02	; 2
    11e6:	08 f4       	brcc	.+2      	; 0x11ea <__fpcmp_parts_f+0xe>
    11e8:	47 c0       	rjmp	.+142    	; 0x1278 <__fpcmp_parts_f+0x9c>
    11ea:	80 81       	ld	r24, Z
    11ec:	82 30       	cpi	r24, 0x02	; 2
    11ee:	08 f4       	brcc	.+2      	; 0x11f2 <__fpcmp_parts_f+0x16>
    11f0:	43 c0       	rjmp	.+134    	; 0x1278 <__fpcmp_parts_f+0x9c>
    11f2:	94 30       	cpi	r25, 0x04	; 4
    11f4:	51 f4       	brne	.+20     	; 0x120a <__fpcmp_parts_f+0x2e>
    11f6:	11 96       	adiw	r26, 0x01	; 1
    11f8:	1c 91       	ld	r17, X
    11fa:	84 30       	cpi	r24, 0x04	; 4
    11fc:	99 f5       	brne	.+102    	; 0x1264 <__fpcmp_parts_f+0x88>
    11fe:	81 81       	ldd	r24, Z+1	; 0x01
    1200:	68 2f       	mov	r22, r24
    1202:	70 e0       	ldi	r23, 0x00	; 0
    1204:	61 1b       	sub	r22, r17
    1206:	71 09       	sbc	r23, r1
    1208:	3f c0       	rjmp	.+126    	; 0x1288 <__fpcmp_parts_f+0xac>
    120a:	84 30       	cpi	r24, 0x04	; 4
    120c:	21 f0       	breq	.+8      	; 0x1216 <__fpcmp_parts_f+0x3a>
    120e:	92 30       	cpi	r25, 0x02	; 2
    1210:	31 f4       	brne	.+12     	; 0x121e <__fpcmp_parts_f+0x42>
    1212:	82 30       	cpi	r24, 0x02	; 2
    1214:	b9 f1       	breq	.+110    	; 0x1284 <__fpcmp_parts_f+0xa8>
    1216:	81 81       	ldd	r24, Z+1	; 0x01
    1218:	88 23       	and	r24, r24
    121a:	89 f1       	breq	.+98     	; 0x127e <__fpcmp_parts_f+0xa2>
    121c:	2d c0       	rjmp	.+90     	; 0x1278 <__fpcmp_parts_f+0x9c>
    121e:	11 96       	adiw	r26, 0x01	; 1
    1220:	1c 91       	ld	r17, X
    1222:	11 97       	sbiw	r26, 0x01	; 1
    1224:	82 30       	cpi	r24, 0x02	; 2
    1226:	f1 f0       	breq	.+60     	; 0x1264 <__fpcmp_parts_f+0x88>
    1228:	81 81       	ldd	r24, Z+1	; 0x01
    122a:	18 17       	cp	r17, r24
    122c:	d9 f4       	brne	.+54     	; 0x1264 <__fpcmp_parts_f+0x88>
    122e:	12 96       	adiw	r26, 0x02	; 2
    1230:	2d 91       	ld	r18, X+
    1232:	3c 91       	ld	r19, X
    1234:	13 97       	sbiw	r26, 0x03	; 3
    1236:	82 81       	ldd	r24, Z+2	; 0x02
    1238:	93 81       	ldd	r25, Z+3	; 0x03
    123a:	82 17       	cp	r24, r18
    123c:	93 07       	cpc	r25, r19
    123e:	94 f0       	brlt	.+36     	; 0x1264 <__fpcmp_parts_f+0x88>
    1240:	28 17       	cp	r18, r24
    1242:	39 07       	cpc	r19, r25
    1244:	bc f0       	brlt	.+46     	; 0x1274 <__fpcmp_parts_f+0x98>
    1246:	14 96       	adiw	r26, 0x04	; 4
    1248:	8d 91       	ld	r24, X+
    124a:	9d 91       	ld	r25, X+
    124c:	0d 90       	ld	r0, X+
    124e:	bc 91       	ld	r27, X
    1250:	a0 2d       	mov	r26, r0
    1252:	24 81       	ldd	r18, Z+4	; 0x04
    1254:	35 81       	ldd	r19, Z+5	; 0x05
    1256:	46 81       	ldd	r20, Z+6	; 0x06
    1258:	57 81       	ldd	r21, Z+7	; 0x07
    125a:	28 17       	cp	r18, r24
    125c:	39 07       	cpc	r19, r25
    125e:	4a 07       	cpc	r20, r26
    1260:	5b 07       	cpc	r21, r27
    1262:	18 f4       	brcc	.+6      	; 0x126a <__fpcmp_parts_f+0x8e>
    1264:	11 23       	and	r17, r17
    1266:	41 f0       	breq	.+16     	; 0x1278 <__fpcmp_parts_f+0x9c>
    1268:	0a c0       	rjmp	.+20     	; 0x127e <__fpcmp_parts_f+0xa2>
    126a:	82 17       	cp	r24, r18
    126c:	93 07       	cpc	r25, r19
    126e:	a4 07       	cpc	r26, r20
    1270:	b5 07       	cpc	r27, r21
    1272:	40 f4       	brcc	.+16     	; 0x1284 <__fpcmp_parts_f+0xa8>
    1274:	11 23       	and	r17, r17
    1276:	19 f0       	breq	.+6      	; 0x127e <__fpcmp_parts_f+0xa2>
    1278:	61 e0       	ldi	r22, 0x01	; 1
    127a:	70 e0       	ldi	r23, 0x00	; 0
    127c:	05 c0       	rjmp	.+10     	; 0x1288 <__fpcmp_parts_f+0xac>
    127e:	6f ef       	ldi	r22, 0xFF	; 255
    1280:	7f ef       	ldi	r23, 0xFF	; 255
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <__fpcmp_parts_f+0xac>
    1284:	60 e0       	ldi	r22, 0x00	; 0
    1286:	70 e0       	ldi	r23, 0x00	; 0
    1288:	cb 01       	movw	r24, r22
    128a:	1f 91       	pop	r17
    128c:	08 95       	ret

0000128e <ADC_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ADC_init(void)
{
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	cd b7       	in	r28, 0x3d	; 61
    1294:	de b7       	in	r29, 0x3e	; 62
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 11 to choose internal reference voltage  = 2.56v as reference voltage
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX = (1 << REFS1) | (1 << REFS0);
    1296:	e7 e2       	ldi	r30, 0x27	; 39
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 ec       	ldi	r24, 0xC0	; 192
    129c:	80 83       	st	Z, r24
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADATE   = 0 Disable Auto Trigger
	 * ADPS2:0 = 111 to choose ADC_Clock = F_CPU/128 = 16Mhz/128 = 125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
    129e:	e6 e2       	ldi	r30, 0x26	; 38
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	87 e8       	ldi	r24, 0x87	; 135
    12a4:	80 83       	st	Z, r24
}
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel_num)
{
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	0f 92       	push	r0
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
    12b6:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; /* Input channel number must be from 0 --> 7 */
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
    12ba:	87 70       	andi	r24, 0x07	; 7
    12bc:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
    12be:	a7 e2       	ldi	r26, 0x27	; 39
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	e7 e2       	ldi	r30, 0x27	; 39
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	80 7e       	andi	r24, 0xE0	; 224
    12ca:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
    12cc:	a7 e2       	ldi	r26, 0x27	; 39
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	e7 e2       	ldi	r30, 0x27	; 39
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	90 81       	ld	r25, Z
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	89 2b       	or	r24, r25
    12da:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADSC); /* Start conversion write '1' to ADSC */
    12dc:	a6 e2       	ldi	r26, 0x26	; 38
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e6 e2       	ldi	r30, 0x26	; 38
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	80 64       	ori	r24, 0x40	; 64
    12e8:	8c 93       	st	X, r24
	while (BIT_IS_CLEAR(ADCSRA, ADIF))
    12ea:	e6 e2       	ldi	r30, 0x26	; 38
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	88 2f       	mov	r24, r24
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	80 71       	andi	r24, 0x10	; 16
    12f6:	90 70       	andi	r25, 0x00	; 0
    12f8:	00 97       	sbiw	r24, 0x00	; 0
    12fa:	b9 f3       	breq	.-18     	; 0x12ea <ADC_readChannel+0x3e>
		; /* Wait for conversion to complete, ADIF becomes '1' */
	SET_BIT(ADCSRA, ADIF); /* Clear ADIF by write '1' to it :) */
    12fc:	a6 e2       	ldi	r26, 0x26	; 38
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e6 e2       	ldi	r30, 0x26	; 38
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	80 61       	ori	r24, 0x10	; 16
    1308:	8c 93       	st	X, r24
	return ADC; /* Read the digital value from the data register */
    130a:	e4 e2       	ldi	r30, 0x24	; 36
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	91 81       	ldd	r25, Z+1	; 0x01
}
    1312:	0f 90       	pop	r0
    1314:	cf 91       	pop	r28
    1316:	df 91       	pop	r29
    1318:	08 95       	ret

0000131a <Buzzer_init>:
 *
 * Return: void
 *
 */
void Buzzer_init(void)
{
    131a:	df 93       	push	r29
    131c:	cf 93       	push	r28
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN, PIN_OUTPUT);
    1322:	83 e0       	ldi	r24, 0x03	; 3
    1324:	63 e0       	ldi	r22, 0x03	; 3
    1326:	41 e0       	ldi	r20, 0x01	; 1
    1328:	0e 94 3b 0a 	call	0x1476	; 0x1476 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
    132c:	83 e0       	ldi	r24, 0x03	; 3
    132e:	63 e0       	ldi	r22, 0x03	; 3
    1330:	40 e0       	ldi	r20, 0x00	; 0
    1332:	0e 94 26 0b 	call	0x164c	; 0x164c <GPIO_writePin>
}
    1336:	cf 91       	pop	r28
    1338:	df 91       	pop	r29
    133a:	08 95       	ret

0000133c <Buzzer_on>:
 *
 * Return: void
 *
 */
void Buzzer_on(void)
{
    133c:	df 93       	push	r29
    133e:	cf 93       	push	r28
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_HIGH);
    1344:	83 e0       	ldi	r24, 0x03	; 3
    1346:	63 e0       	ldi	r22, 0x03	; 3
    1348:	41 e0       	ldi	r20, 0x01	; 1
    134a:	0e 94 26 0b 	call	0x164c	; 0x164c <GPIO_writePin>
}
    134e:	cf 91       	pop	r28
    1350:	df 91       	pop	r29
    1352:	08 95       	ret

00001354 <Buzzer_off>:
 *
 * Return: void
 *
 */
void Buzzer_off(void)
{
    1354:	df 93       	push	r29
    1356:	cf 93       	push	r28
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
    135c:	83 e0       	ldi	r24, 0x03	; 3
    135e:	63 e0       	ldi	r22, 0x03	; 3
    1360:	40 e0       	ldi	r20, 0x00	; 0
    1362:	0e 94 26 0b 	call	0x164c	; 0x164c <GPIO_writePin>
}
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <DcMotor_Init>:
 *
 * Return: void
 *
 */
void DcMotor_Init(void)
{
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DC_MOTOR_PORT, DC_MOTOR_IN1, PIN_OUTPUT);
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	60 e0       	ldi	r22, 0x00	; 0
    1378:	41 e0       	ldi	r20, 0x01	; 1
    137a:	0e 94 3b 0a 	call	0x1476	; 0x1476 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT, DC_MOTOR_IN2, PIN_OUTPUT);
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	61 e0       	ldi	r22, 0x01	; 1
    1382:	41 e0       	ldi	r20, 0x01	; 1
    1384:	0e 94 3b 0a 	call	0x1476	; 0x1476 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT, DC_MOTOR_EN1, PIN_OUTPUT);
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	63 e0       	ldi	r22, 0x03	; 3
    138c:	41 e0       	ldi	r20, 0x01	; 1
    138e:	0e 94 3b 0a 	call	0x1476	; 0x1476 <GPIO_setupPinDirection>

#if LOGIC_CONNECTION
	GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_IN1, LOGIC_LOW);
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	60 e0       	ldi	r22, 0x00	; 0
    1396:	40 e0       	ldi	r20, 0x00	; 0
    1398:	0e 94 26 0b 	call	0x164c	; 0x164c <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_IN2, LOGIC_LOW);
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	61 e0       	ldi	r22, 0x01	; 1
    13a0:	40 e0       	ldi	r20, 0x00	; 0
    13a2:	0e 94 26 0b 	call	0x164c	; 0x164c <GPIO_writePin>

#else
	GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_IN1, LOGIC_HIGH);
	GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_IN2, LOGIC_HIGH);
#endif
}
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <DcMotor_Rotate>:
 *
 * Return: void
 *
 */
void DcMotor_Rotate(DcMotor_State state, uint8 speed)
{
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <DcMotor_Rotate+0x6>
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <DcMotor_Rotate+0x8>
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	89 83       	std	Y+1, r24	; 0x01
    13ba:	6a 83       	std	Y+2, r22	; 0x02
	PWM_Timer0_Start(speed);
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <PWM_Timer0_Start>
	switch (state)
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	3c 83       	std	Y+4, r19	; 0x04
    13ca:	2b 83       	std	Y+3, r18	; 0x03
    13cc:	8b 81       	ldd	r24, Y+3	; 0x03
    13ce:	9c 81       	ldd	r25, Y+4	; 0x04
    13d0:	81 30       	cpi	r24, 0x01	; 1
    13d2:	91 05       	cpc	r25, r1
    13d4:	a1 f0       	breq	.+40     	; 0x13fe <DcMotor_Rotate+0x52>
    13d6:	2b 81       	ldd	r18, Y+3	; 0x03
    13d8:	3c 81       	ldd	r19, Y+4	; 0x04
    13da:	22 30       	cpi	r18, 0x02	; 2
    13dc:	31 05       	cpc	r19, r1
    13de:	d1 f0       	breq	.+52     	; 0x1414 <DcMotor_Rotate+0x68>
    13e0:	8b 81       	ldd	r24, Y+3	; 0x03
    13e2:	9c 81       	ldd	r25, Y+4	; 0x04
    13e4:	00 97       	sbiw	r24, 0x00	; 0
    13e6:	01 f5       	brne	.+64     	; 0x1428 <DcMotor_Rotate+0x7c>
	{
	case OFF:
		/* Stop the motor */
#if LOGIC_CONNECTION
		GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_IN1, LOGIC_LOW);
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	60 e0       	ldi	r22, 0x00	; 0
    13ec:	40 e0       	ldi	r20, 0x00	; 0
    13ee:	0e 94 26 0b 	call	0x164c	; 0x164c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_IN2, LOGIC_LOW);
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	61 e0       	ldi	r22, 0x01	; 1
    13f6:	40 e0       	ldi	r20, 0x00	; 0
    13f8:	0e 94 26 0b 	call	0x164c	; 0x164c <GPIO_writePin>
    13fc:	15 c0       	rjmp	.+42     	; 0x1428 <DcMotor_Rotate+0x7c>
#endif
		break;
	case CW:
		/* Rotates the motor CW */
#if LOGIC_CONNECTION
		GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_IN1, LOGIC_HIGH);
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	60 e0       	ldi	r22, 0x00	; 0
    1402:	41 e0       	ldi	r20, 0x01	; 1
    1404:	0e 94 26 0b 	call	0x164c	; 0x164c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_IN2, LOGIC_LOW);
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	61 e0       	ldi	r22, 0x01	; 1
    140c:	40 e0       	ldi	r20, 0x00	; 0
    140e:	0e 94 26 0b 	call	0x164c	; 0x164c <GPIO_writePin>
    1412:	0a c0       	rjmp	.+20     	; 0x1428 <DcMotor_Rotate+0x7c>
#endif
		break;
	case ACW:
		/* Rotates the motor A-CW */
#if LOGIC_CONNECTION
		GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_IN1, LOGIC_LOW);
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	60 e0       	ldi	r22, 0x00	; 0
    1418:	40 e0       	ldi	r20, 0x00	; 0
    141a:	0e 94 26 0b 	call	0x164c	; 0x164c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT, DC_MOTOR_IN2, LOGIC_HIGH);
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	61 e0       	ldi	r22, 0x01	; 1
    1422:	41 e0       	ldi	r20, 0x01	; 1
    1424:	0e 94 26 0b 	call	0x164c	; 0x164c <GPIO_writePin>
		break;
	default:
		/* Do Nothing */
		break;
	}
}
    1428:	0f 90       	pop	r0
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	cf 91       	pop	r28
    1432:	df 91       	pop	r29
    1434:	08 95       	ret

00001436 <FlameSensor_init>:
 *
 * Return: void
 *
 */
void FlameSensor_init(void)
{
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(FLAME_SENSOR_PORT, FLAME_SENSOR_OUT, PIN_INPUT);
    143e:	83 e0       	ldi	r24, 0x03	; 3
    1440:	62 e0       	ldi	r22, 0x02	; 2
    1442:	40 e0       	ldi	r20, 0x00	; 0
    1444:	0e 94 3b 0a 	call	0x1476	; 0x1476 <GPIO_setupPinDirection>
}
    1448:	cf 91       	pop	r28
    144a:	df 91       	pop	r29
    144c:	08 95       	ret

0000144e <FlameSensor_getValue>:
 *
 * Return: void
 *
 */
uint8 FlameSensor_getValue(void)
{
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	0f 92       	push	r0
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
	if (GPIO_readPin(FLAME_SENSOR_PORT, FLAME_SENSOR_OUT))
    1458:	83 e0       	ldi	r24, 0x03	; 3
    145a:	62 e0       	ldi	r22, 0x02	; 2
    145c:	0e 94 11 0c 	call	0x1822	; 0x1822 <GPIO_readPin>
    1460:	88 23       	and	r24, r24
    1462:	19 f0       	breq	.+6      	; 0x146a <FlameSensor_getValue+0x1c>
	{
		return LOGIC_HIGH;
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	89 83       	std	Y+1, r24	; 0x01
    1468:	01 c0       	rjmp	.+2      	; 0x146c <FlameSensor_getValue+0x1e>
	}
	else
	{
		return LOGIC_LOW;
    146a:	19 82       	std	Y+1, r1	; 0x01
    146c:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
    146e:	0f 90       	pop	r0
    1470:	cf 91       	pop	r28
    1472:	df 91       	pop	r29
    1474:	08 95       	ret

00001476 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1476:	df 93       	push	r29
    1478:	cf 93       	push	r28
    147a:	00 d0       	rcall	.+0      	; 0x147c <GPIO_setupPinDirection+0x6>
    147c:	00 d0       	rcall	.+0      	; 0x147e <GPIO_setupPinDirection+0x8>
    147e:	0f 92       	push	r0
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	89 83       	std	Y+1, r24	; 0x01
    1486:	6a 83       	std	Y+2, r22	; 0x02
    1488:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    148a:	8a 81       	ldd	r24, Y+2	; 0x02
    148c:	88 30       	cpi	r24, 0x08	; 8
    148e:	08 f0       	brcs	.+2      	; 0x1492 <GPIO_setupPinDirection+0x1c>
    1490:	d5 c0       	rjmp	.+426    	; 0x163c <GPIO_setupPinDirection+0x1c6>
    1492:	89 81       	ldd	r24, Y+1	; 0x01
    1494:	84 30       	cpi	r24, 0x04	; 4
    1496:	08 f0       	brcs	.+2      	; 0x149a <GPIO_setupPinDirection+0x24>
    1498:	d1 c0       	rjmp	.+418    	; 0x163c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	3d 83       	std	Y+5, r19	; 0x05
    14a2:	2c 83       	std	Y+4, r18	; 0x04
    14a4:	8c 81       	ldd	r24, Y+4	; 0x04
    14a6:	9d 81       	ldd	r25, Y+5	; 0x05
    14a8:	81 30       	cpi	r24, 0x01	; 1
    14aa:	91 05       	cpc	r25, r1
    14ac:	09 f4       	brne	.+2      	; 0x14b0 <GPIO_setupPinDirection+0x3a>
    14ae:	43 c0       	rjmp	.+134    	; 0x1536 <GPIO_setupPinDirection+0xc0>
    14b0:	2c 81       	ldd	r18, Y+4	; 0x04
    14b2:	3d 81       	ldd	r19, Y+5	; 0x05
    14b4:	22 30       	cpi	r18, 0x02	; 2
    14b6:	31 05       	cpc	r19, r1
    14b8:	2c f4       	brge	.+10     	; 0x14c4 <GPIO_setupPinDirection+0x4e>
    14ba:	8c 81       	ldd	r24, Y+4	; 0x04
    14bc:	9d 81       	ldd	r25, Y+5	; 0x05
    14be:	00 97       	sbiw	r24, 0x00	; 0
    14c0:	71 f0       	breq	.+28     	; 0x14de <GPIO_setupPinDirection+0x68>
    14c2:	bc c0       	rjmp	.+376    	; 0x163c <GPIO_setupPinDirection+0x1c6>
    14c4:	2c 81       	ldd	r18, Y+4	; 0x04
    14c6:	3d 81       	ldd	r19, Y+5	; 0x05
    14c8:	22 30       	cpi	r18, 0x02	; 2
    14ca:	31 05       	cpc	r19, r1
    14cc:	09 f4       	brne	.+2      	; 0x14d0 <GPIO_setupPinDirection+0x5a>
    14ce:	5f c0       	rjmp	.+190    	; 0x158e <GPIO_setupPinDirection+0x118>
    14d0:	8c 81       	ldd	r24, Y+4	; 0x04
    14d2:	9d 81       	ldd	r25, Y+5	; 0x05
    14d4:	83 30       	cpi	r24, 0x03	; 3
    14d6:	91 05       	cpc	r25, r1
    14d8:	09 f4       	brne	.+2      	; 0x14dc <GPIO_setupPinDirection+0x66>
    14da:	85 c0       	rjmp	.+266    	; 0x15e6 <GPIO_setupPinDirection+0x170>
    14dc:	af c0       	rjmp	.+350    	; 0x163c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    14de:	8b 81       	ldd	r24, Y+3	; 0x03
    14e0:	81 30       	cpi	r24, 0x01	; 1
    14e2:	a1 f4       	brne	.+40     	; 0x150c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    14e4:	aa e3       	ldi	r26, 0x3A	; 58
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	ea e3       	ldi	r30, 0x3A	; 58
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	48 2f       	mov	r20, r24
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	02 2e       	mov	r0, r18
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <GPIO_setupPinDirection+0x8c>
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	0a 94       	dec	r0
    1504:	e2 f7       	brpl	.-8      	; 0x14fe <GPIO_setupPinDirection+0x88>
    1506:	84 2b       	or	r24, r20
    1508:	8c 93       	st	X, r24
    150a:	98 c0       	rjmp	.+304    	; 0x163c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    150c:	aa e3       	ldi	r26, 0x3A	; 58
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	ea e3       	ldi	r30, 0x3A	; 58
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	48 2f       	mov	r20, r24
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	28 2f       	mov	r18, r24
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	02 2e       	mov	r0, r18
    1524:	02 c0       	rjmp	.+4      	; 0x152a <GPIO_setupPinDirection+0xb4>
    1526:	88 0f       	add	r24, r24
    1528:	99 1f       	adc	r25, r25
    152a:	0a 94       	dec	r0
    152c:	e2 f7       	brpl	.-8      	; 0x1526 <GPIO_setupPinDirection+0xb0>
    152e:	80 95       	com	r24
    1530:	84 23       	and	r24, r20
    1532:	8c 93       	st	X, r24
    1534:	83 c0       	rjmp	.+262    	; 0x163c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	81 30       	cpi	r24, 0x01	; 1
    153a:	a1 f4       	brne	.+40     	; 0x1564 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    153c:	a7 e3       	ldi	r26, 0x37	; 55
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	e7 e3       	ldi	r30, 0x37	; 55
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	48 2f       	mov	r20, r24
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	28 2f       	mov	r18, r24
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	02 2e       	mov	r0, r18
    1554:	02 c0       	rjmp	.+4      	; 0x155a <GPIO_setupPinDirection+0xe4>
    1556:	88 0f       	add	r24, r24
    1558:	99 1f       	adc	r25, r25
    155a:	0a 94       	dec	r0
    155c:	e2 f7       	brpl	.-8      	; 0x1556 <GPIO_setupPinDirection+0xe0>
    155e:	84 2b       	or	r24, r20
    1560:	8c 93       	st	X, r24
    1562:	6c c0       	rjmp	.+216    	; 0x163c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1564:	a7 e3       	ldi	r26, 0x37	; 55
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	e7 e3       	ldi	r30, 0x37	; 55
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	48 2f       	mov	r20, r24
    1570:	8a 81       	ldd	r24, Y+2	; 0x02
    1572:	28 2f       	mov	r18, r24
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	02 2e       	mov	r0, r18
    157c:	02 c0       	rjmp	.+4      	; 0x1582 <GPIO_setupPinDirection+0x10c>
    157e:	88 0f       	add	r24, r24
    1580:	99 1f       	adc	r25, r25
    1582:	0a 94       	dec	r0
    1584:	e2 f7       	brpl	.-8      	; 0x157e <GPIO_setupPinDirection+0x108>
    1586:	80 95       	com	r24
    1588:	84 23       	and	r24, r20
    158a:	8c 93       	st	X, r24
    158c:	57 c0       	rjmp	.+174    	; 0x163c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	81 30       	cpi	r24, 0x01	; 1
    1592:	a1 f4       	brne	.+40     	; 0x15bc <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1594:	a4 e3       	ldi	r26, 0x34	; 52
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e4 e3       	ldi	r30, 0x34	; 52
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	48 2f       	mov	r20, r24
    15a0:	8a 81       	ldd	r24, Y+2	; 0x02
    15a2:	28 2f       	mov	r18, r24
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	02 2e       	mov	r0, r18
    15ac:	02 c0       	rjmp	.+4      	; 0x15b2 <GPIO_setupPinDirection+0x13c>
    15ae:	88 0f       	add	r24, r24
    15b0:	99 1f       	adc	r25, r25
    15b2:	0a 94       	dec	r0
    15b4:	e2 f7       	brpl	.-8      	; 0x15ae <GPIO_setupPinDirection+0x138>
    15b6:	84 2b       	or	r24, r20
    15b8:	8c 93       	st	X, r24
    15ba:	40 c0       	rjmp	.+128    	; 0x163c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    15bc:	a4 e3       	ldi	r26, 0x34	; 52
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	e4 e3       	ldi	r30, 0x34	; 52
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	48 2f       	mov	r20, r24
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	28 2f       	mov	r18, r24
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	02 2e       	mov	r0, r18
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <GPIO_setupPinDirection+0x164>
    15d6:	88 0f       	add	r24, r24
    15d8:	99 1f       	adc	r25, r25
    15da:	0a 94       	dec	r0
    15dc:	e2 f7       	brpl	.-8      	; 0x15d6 <GPIO_setupPinDirection+0x160>
    15de:	80 95       	com	r24
    15e0:	84 23       	and	r24, r20
    15e2:	8c 93       	st	X, r24
    15e4:	2b c0       	rjmp	.+86     	; 0x163c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    15e6:	8b 81       	ldd	r24, Y+3	; 0x03
    15e8:	81 30       	cpi	r24, 0x01	; 1
    15ea:	a1 f4       	brne	.+40     	; 0x1614 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    15ec:	a1 e3       	ldi	r26, 0x31	; 49
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	e1 e3       	ldi	r30, 0x31	; 49
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	48 2f       	mov	r20, r24
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	28 2f       	mov	r18, r24
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	02 2e       	mov	r0, r18
    1604:	02 c0       	rjmp	.+4      	; 0x160a <GPIO_setupPinDirection+0x194>
    1606:	88 0f       	add	r24, r24
    1608:	99 1f       	adc	r25, r25
    160a:	0a 94       	dec	r0
    160c:	e2 f7       	brpl	.-8      	; 0x1606 <GPIO_setupPinDirection+0x190>
    160e:	84 2b       	or	r24, r20
    1610:	8c 93       	st	X, r24
    1612:	14 c0       	rjmp	.+40     	; 0x163c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1614:	a1 e3       	ldi	r26, 0x31	; 49
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	e1 e3       	ldi	r30, 0x31	; 49
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	48 2f       	mov	r20, r24
    1620:	8a 81       	ldd	r24, Y+2	; 0x02
    1622:	28 2f       	mov	r18, r24
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	02 2e       	mov	r0, r18
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <GPIO_setupPinDirection+0x1bc>
    162e:	88 0f       	add	r24, r24
    1630:	99 1f       	adc	r25, r25
    1632:	0a 94       	dec	r0
    1634:	e2 f7       	brpl	.-8      	; 0x162e <GPIO_setupPinDirection+0x1b8>
    1636:	80 95       	com	r24
    1638:	84 23       	and	r24, r20
    163a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	cf 91       	pop	r28
    1648:	df 91       	pop	r29
    164a:	08 95       	ret

0000164c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    164c:	df 93       	push	r29
    164e:	cf 93       	push	r28
    1650:	00 d0       	rcall	.+0      	; 0x1652 <GPIO_writePin+0x6>
    1652:	00 d0       	rcall	.+0      	; 0x1654 <GPIO_writePin+0x8>
    1654:	0f 92       	push	r0
    1656:	cd b7       	in	r28, 0x3d	; 61
    1658:	de b7       	in	r29, 0x3e	; 62
    165a:	89 83       	std	Y+1, r24	; 0x01
    165c:	6a 83       	std	Y+2, r22	; 0x02
    165e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	88 30       	cpi	r24, 0x08	; 8
    1664:	08 f0       	brcs	.+2      	; 0x1668 <GPIO_writePin+0x1c>
    1666:	d5 c0       	rjmp	.+426    	; 0x1812 <GPIO_writePin+0x1c6>
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	84 30       	cpi	r24, 0x04	; 4
    166c:	08 f0       	brcs	.+2      	; 0x1670 <GPIO_writePin+0x24>
    166e:	d1 c0       	rjmp	.+418    	; 0x1812 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1670:	89 81       	ldd	r24, Y+1	; 0x01
    1672:	28 2f       	mov	r18, r24
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	3d 83       	std	Y+5, r19	; 0x05
    1678:	2c 83       	std	Y+4, r18	; 0x04
    167a:	8c 81       	ldd	r24, Y+4	; 0x04
    167c:	9d 81       	ldd	r25, Y+5	; 0x05
    167e:	81 30       	cpi	r24, 0x01	; 1
    1680:	91 05       	cpc	r25, r1
    1682:	09 f4       	brne	.+2      	; 0x1686 <GPIO_writePin+0x3a>
    1684:	43 c0       	rjmp	.+134    	; 0x170c <GPIO_writePin+0xc0>
    1686:	2c 81       	ldd	r18, Y+4	; 0x04
    1688:	3d 81       	ldd	r19, Y+5	; 0x05
    168a:	22 30       	cpi	r18, 0x02	; 2
    168c:	31 05       	cpc	r19, r1
    168e:	2c f4       	brge	.+10     	; 0x169a <GPIO_writePin+0x4e>
    1690:	8c 81       	ldd	r24, Y+4	; 0x04
    1692:	9d 81       	ldd	r25, Y+5	; 0x05
    1694:	00 97       	sbiw	r24, 0x00	; 0
    1696:	71 f0       	breq	.+28     	; 0x16b4 <GPIO_writePin+0x68>
    1698:	bc c0       	rjmp	.+376    	; 0x1812 <GPIO_writePin+0x1c6>
    169a:	2c 81       	ldd	r18, Y+4	; 0x04
    169c:	3d 81       	ldd	r19, Y+5	; 0x05
    169e:	22 30       	cpi	r18, 0x02	; 2
    16a0:	31 05       	cpc	r19, r1
    16a2:	09 f4       	brne	.+2      	; 0x16a6 <GPIO_writePin+0x5a>
    16a4:	5f c0       	rjmp	.+190    	; 0x1764 <GPIO_writePin+0x118>
    16a6:	8c 81       	ldd	r24, Y+4	; 0x04
    16a8:	9d 81       	ldd	r25, Y+5	; 0x05
    16aa:	83 30       	cpi	r24, 0x03	; 3
    16ac:	91 05       	cpc	r25, r1
    16ae:	09 f4       	brne	.+2      	; 0x16b2 <GPIO_writePin+0x66>
    16b0:	85 c0       	rjmp	.+266    	; 0x17bc <GPIO_writePin+0x170>
    16b2:	af c0       	rjmp	.+350    	; 0x1812 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	81 30       	cpi	r24, 0x01	; 1
    16b8:	a1 f4       	brne	.+40     	; 0x16e2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    16ba:	ab e3       	ldi	r26, 0x3B	; 59
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	eb e3       	ldi	r30, 0x3B	; 59
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	48 2f       	mov	r20, r24
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	02 2e       	mov	r0, r18
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <GPIO_writePin+0x8c>
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	0a 94       	dec	r0
    16da:	e2 f7       	brpl	.-8      	; 0x16d4 <GPIO_writePin+0x88>
    16dc:	84 2b       	or	r24, r20
    16de:	8c 93       	st	X, r24
    16e0:	98 c0       	rjmp	.+304    	; 0x1812 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    16e2:	ab e3       	ldi	r26, 0x3B	; 59
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	eb e3       	ldi	r30, 0x3B	; 59
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	48 2f       	mov	r20, r24
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	02 2e       	mov	r0, r18
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <GPIO_writePin+0xb4>
    16fc:	88 0f       	add	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	0a 94       	dec	r0
    1702:	e2 f7       	brpl	.-8      	; 0x16fc <GPIO_writePin+0xb0>
    1704:	80 95       	com	r24
    1706:	84 23       	and	r24, r20
    1708:	8c 93       	st	X, r24
    170a:	83 c0       	rjmp	.+262    	; 0x1812 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
    170e:	81 30       	cpi	r24, 0x01	; 1
    1710:	a1 f4       	brne	.+40     	; 0x173a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1712:	a8 e3       	ldi	r26, 0x38	; 56
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	e8 e3       	ldi	r30, 0x38	; 56
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	48 2f       	mov	r20, r24
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	28 2f       	mov	r18, r24
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	02 2e       	mov	r0, r18
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <GPIO_writePin+0xe4>
    172c:	88 0f       	add	r24, r24
    172e:	99 1f       	adc	r25, r25
    1730:	0a 94       	dec	r0
    1732:	e2 f7       	brpl	.-8      	; 0x172c <GPIO_writePin+0xe0>
    1734:	84 2b       	or	r24, r20
    1736:	8c 93       	st	X, r24
    1738:	6c c0       	rjmp	.+216    	; 0x1812 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    173a:	a8 e3       	ldi	r26, 0x38	; 56
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	e8 e3       	ldi	r30, 0x38	; 56
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	48 2f       	mov	r20, r24
    1746:	8a 81       	ldd	r24, Y+2	; 0x02
    1748:	28 2f       	mov	r18, r24
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	02 2e       	mov	r0, r18
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <GPIO_writePin+0x10c>
    1754:	88 0f       	add	r24, r24
    1756:	99 1f       	adc	r25, r25
    1758:	0a 94       	dec	r0
    175a:	e2 f7       	brpl	.-8      	; 0x1754 <GPIO_writePin+0x108>
    175c:	80 95       	com	r24
    175e:	84 23       	and	r24, r20
    1760:	8c 93       	st	X, r24
    1762:	57 c0       	rjmp	.+174    	; 0x1812 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1764:	8b 81       	ldd	r24, Y+3	; 0x03
    1766:	81 30       	cpi	r24, 0x01	; 1
    1768:	a1 f4       	brne	.+40     	; 0x1792 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    176a:	a5 e3       	ldi	r26, 0x35	; 53
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	e5 e3       	ldi	r30, 0x35	; 53
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	48 2f       	mov	r20, r24
    1776:	8a 81       	ldd	r24, Y+2	; 0x02
    1778:	28 2f       	mov	r18, r24
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	02 2e       	mov	r0, r18
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <GPIO_writePin+0x13c>
    1784:	88 0f       	add	r24, r24
    1786:	99 1f       	adc	r25, r25
    1788:	0a 94       	dec	r0
    178a:	e2 f7       	brpl	.-8      	; 0x1784 <GPIO_writePin+0x138>
    178c:	84 2b       	or	r24, r20
    178e:	8c 93       	st	X, r24
    1790:	40 c0       	rjmp	.+128    	; 0x1812 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1792:	a5 e3       	ldi	r26, 0x35	; 53
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	e5 e3       	ldi	r30, 0x35	; 53
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	48 2f       	mov	r20, r24
    179e:	8a 81       	ldd	r24, Y+2	; 0x02
    17a0:	28 2f       	mov	r18, r24
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	02 2e       	mov	r0, r18
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <GPIO_writePin+0x164>
    17ac:	88 0f       	add	r24, r24
    17ae:	99 1f       	adc	r25, r25
    17b0:	0a 94       	dec	r0
    17b2:	e2 f7       	brpl	.-8      	; 0x17ac <GPIO_writePin+0x160>
    17b4:	80 95       	com	r24
    17b6:	84 23       	and	r24, r20
    17b8:	8c 93       	st	X, r24
    17ba:	2b c0       	rjmp	.+86     	; 0x1812 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    17bc:	8b 81       	ldd	r24, Y+3	; 0x03
    17be:	81 30       	cpi	r24, 0x01	; 1
    17c0:	a1 f4       	brne	.+40     	; 0x17ea <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    17c2:	a2 e3       	ldi	r26, 0x32	; 50
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	e2 e3       	ldi	r30, 0x32	; 50
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	48 2f       	mov	r20, r24
    17ce:	8a 81       	ldd	r24, Y+2	; 0x02
    17d0:	28 2f       	mov	r18, r24
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	02 2e       	mov	r0, r18
    17da:	02 c0       	rjmp	.+4      	; 0x17e0 <GPIO_writePin+0x194>
    17dc:	88 0f       	add	r24, r24
    17de:	99 1f       	adc	r25, r25
    17e0:	0a 94       	dec	r0
    17e2:	e2 f7       	brpl	.-8      	; 0x17dc <GPIO_writePin+0x190>
    17e4:	84 2b       	or	r24, r20
    17e6:	8c 93       	st	X, r24
    17e8:	14 c0       	rjmp	.+40     	; 0x1812 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    17ea:	a2 e3       	ldi	r26, 0x32	; 50
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	e2 e3       	ldi	r30, 0x32	; 50
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	48 2f       	mov	r20, r24
    17f6:	8a 81       	ldd	r24, Y+2	; 0x02
    17f8:	28 2f       	mov	r18, r24
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	02 2e       	mov	r0, r18
    1802:	02 c0       	rjmp	.+4      	; 0x1808 <GPIO_writePin+0x1bc>
    1804:	88 0f       	add	r24, r24
    1806:	99 1f       	adc	r25, r25
    1808:	0a 94       	dec	r0
    180a:	e2 f7       	brpl	.-8      	; 0x1804 <GPIO_writePin+0x1b8>
    180c:	80 95       	com	r24
    180e:	84 23       	and	r24, r20
    1810:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	cf 91       	pop	r28
    181e:	df 91       	pop	r29
    1820:	08 95       	ret

00001822 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1822:	df 93       	push	r29
    1824:	cf 93       	push	r28
    1826:	00 d0       	rcall	.+0      	; 0x1828 <GPIO_readPin+0x6>
    1828:	00 d0       	rcall	.+0      	; 0x182a <GPIO_readPin+0x8>
    182a:	0f 92       	push	r0
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
    1830:	8a 83       	std	Y+2, r24	; 0x02
    1832:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1834:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1836:	8b 81       	ldd	r24, Y+3	; 0x03
    1838:	88 30       	cpi	r24, 0x08	; 8
    183a:	08 f0       	brcs	.+2      	; 0x183e <GPIO_readPin+0x1c>
    183c:	84 c0       	rjmp	.+264    	; 0x1946 <GPIO_readPin+0x124>
    183e:	8a 81       	ldd	r24, Y+2	; 0x02
    1840:	84 30       	cpi	r24, 0x04	; 4
    1842:	08 f0       	brcs	.+2      	; 0x1846 <GPIO_readPin+0x24>
    1844:	80 c0       	rjmp	.+256    	; 0x1946 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	28 2f       	mov	r18, r24
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	3d 83       	std	Y+5, r19	; 0x05
    184e:	2c 83       	std	Y+4, r18	; 0x04
    1850:	4c 81       	ldd	r20, Y+4	; 0x04
    1852:	5d 81       	ldd	r21, Y+5	; 0x05
    1854:	41 30       	cpi	r20, 0x01	; 1
    1856:	51 05       	cpc	r21, r1
    1858:	79 f1       	breq	.+94     	; 0x18b8 <GPIO_readPin+0x96>
    185a:	8c 81       	ldd	r24, Y+4	; 0x04
    185c:	9d 81       	ldd	r25, Y+5	; 0x05
    185e:	82 30       	cpi	r24, 0x02	; 2
    1860:	91 05       	cpc	r25, r1
    1862:	34 f4       	brge	.+12     	; 0x1870 <GPIO_readPin+0x4e>
    1864:	2c 81       	ldd	r18, Y+4	; 0x04
    1866:	3d 81       	ldd	r19, Y+5	; 0x05
    1868:	21 15       	cp	r18, r1
    186a:	31 05       	cpc	r19, r1
    186c:	69 f0       	breq	.+26     	; 0x1888 <GPIO_readPin+0x66>
    186e:	6b c0       	rjmp	.+214    	; 0x1946 <GPIO_readPin+0x124>
    1870:	4c 81       	ldd	r20, Y+4	; 0x04
    1872:	5d 81       	ldd	r21, Y+5	; 0x05
    1874:	42 30       	cpi	r20, 0x02	; 2
    1876:	51 05       	cpc	r21, r1
    1878:	b9 f1       	breq	.+110    	; 0x18e8 <GPIO_readPin+0xc6>
    187a:	8c 81       	ldd	r24, Y+4	; 0x04
    187c:	9d 81       	ldd	r25, Y+5	; 0x05
    187e:	83 30       	cpi	r24, 0x03	; 3
    1880:	91 05       	cpc	r25, r1
    1882:	09 f4       	brne	.+2      	; 0x1886 <GPIO_readPin+0x64>
    1884:	49 c0       	rjmp	.+146    	; 0x1918 <GPIO_readPin+0xf6>
    1886:	5f c0       	rjmp	.+190    	; 0x1946 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1888:	e9 e3       	ldi	r30, 0x39	; 57
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	28 2f       	mov	r18, r24
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	8b 81       	ldd	r24, Y+3	; 0x03
    1894:	88 2f       	mov	r24, r24
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	a9 01       	movw	r20, r18
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <GPIO_readPin+0x7e>
    189c:	55 95       	asr	r21
    189e:	47 95       	ror	r20
    18a0:	8a 95       	dec	r24
    18a2:	e2 f7       	brpl	.-8      	; 0x189c <GPIO_readPin+0x7a>
    18a4:	ca 01       	movw	r24, r20
    18a6:	81 70       	andi	r24, 0x01	; 1
    18a8:	90 70       	andi	r25, 0x00	; 0
    18aa:	88 23       	and	r24, r24
    18ac:	19 f0       	breq	.+6      	; 0x18b4 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	89 83       	std	Y+1, r24	; 0x01
    18b2:	49 c0       	rjmp	.+146    	; 0x1946 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18b4:	19 82       	std	Y+1, r1	; 0x01
    18b6:	47 c0       	rjmp	.+142    	; 0x1946 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    18b8:	e6 e3       	ldi	r30, 0x36	; 54
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	28 2f       	mov	r18, r24
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	8b 81       	ldd	r24, Y+3	; 0x03
    18c4:	88 2f       	mov	r24, r24
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	a9 01       	movw	r20, r18
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <GPIO_readPin+0xae>
    18cc:	55 95       	asr	r21
    18ce:	47 95       	ror	r20
    18d0:	8a 95       	dec	r24
    18d2:	e2 f7       	brpl	.-8      	; 0x18cc <GPIO_readPin+0xaa>
    18d4:	ca 01       	movw	r24, r20
    18d6:	81 70       	andi	r24, 0x01	; 1
    18d8:	90 70       	andi	r25, 0x00	; 0
    18da:	88 23       	and	r24, r24
    18dc:	19 f0       	breq	.+6      	; 0x18e4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	89 83       	std	Y+1, r24	; 0x01
    18e2:	31 c0       	rjmp	.+98     	; 0x1946 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18e4:	19 82       	std	Y+1, r1	; 0x01
    18e6:	2f c0       	rjmp	.+94     	; 0x1946 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    18e8:	e3 e3       	ldi	r30, 0x33	; 51
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	80 81       	ld	r24, Z
    18ee:	28 2f       	mov	r18, r24
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	8b 81       	ldd	r24, Y+3	; 0x03
    18f4:	88 2f       	mov	r24, r24
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	a9 01       	movw	r20, r18
    18fa:	02 c0       	rjmp	.+4      	; 0x1900 <GPIO_readPin+0xde>
    18fc:	55 95       	asr	r21
    18fe:	47 95       	ror	r20
    1900:	8a 95       	dec	r24
    1902:	e2 f7       	brpl	.-8      	; 0x18fc <GPIO_readPin+0xda>
    1904:	ca 01       	movw	r24, r20
    1906:	81 70       	andi	r24, 0x01	; 1
    1908:	90 70       	andi	r25, 0x00	; 0
    190a:	88 23       	and	r24, r24
    190c:	19 f0       	breq	.+6      	; 0x1914 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	89 83       	std	Y+1, r24	; 0x01
    1912:	19 c0       	rjmp	.+50     	; 0x1946 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1914:	19 82       	std	Y+1, r1	; 0x01
    1916:	17 c0       	rjmp	.+46     	; 0x1946 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1918:	e0 e3       	ldi	r30, 0x30	; 48
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	28 2f       	mov	r18, r24
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	8b 81       	ldd	r24, Y+3	; 0x03
    1924:	88 2f       	mov	r24, r24
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	a9 01       	movw	r20, r18
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <GPIO_readPin+0x10e>
    192c:	55 95       	asr	r21
    192e:	47 95       	ror	r20
    1930:	8a 95       	dec	r24
    1932:	e2 f7       	brpl	.-8      	; 0x192c <GPIO_readPin+0x10a>
    1934:	ca 01       	movw	r24, r20
    1936:	81 70       	andi	r24, 0x01	; 1
    1938:	90 70       	andi	r25, 0x00	; 0
    193a:	88 23       	and	r24, r24
    193c:	19 f0       	breq	.+6      	; 0x1944 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	89 83       	std	Y+1, r24	; 0x01
    1942:	01 c0       	rjmp	.+2      	; 0x1946 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1944:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1946:	89 81       	ldd	r24, Y+1	; 0x01
}
    1948:	0f 90       	pop	r0
    194a:	0f 90       	pop	r0
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	cf 91       	pop	r28
    1954:	df 91       	pop	r29
    1956:	08 95       	ret

00001958 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1958:	df 93       	push	r29
    195a:	cf 93       	push	r28
    195c:	00 d0       	rcall	.+0      	; 0x195e <GPIO_setupPortDirection+0x6>
    195e:	00 d0       	rcall	.+0      	; 0x1960 <GPIO_setupPortDirection+0x8>
    1960:	cd b7       	in	r28, 0x3d	; 61
    1962:	de b7       	in	r29, 0x3e	; 62
    1964:	89 83       	std	Y+1, r24	; 0x01
    1966:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1968:	89 81       	ldd	r24, Y+1	; 0x01
    196a:	84 30       	cpi	r24, 0x04	; 4
    196c:	90 f5       	brcc	.+100    	; 0x19d2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    196e:	89 81       	ldd	r24, Y+1	; 0x01
    1970:	28 2f       	mov	r18, r24
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	3c 83       	std	Y+4, r19	; 0x04
    1976:	2b 83       	std	Y+3, r18	; 0x03
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	9c 81       	ldd	r25, Y+4	; 0x04
    197c:	81 30       	cpi	r24, 0x01	; 1
    197e:	91 05       	cpc	r25, r1
    1980:	d1 f0       	breq	.+52     	; 0x19b6 <GPIO_setupPortDirection+0x5e>
    1982:	2b 81       	ldd	r18, Y+3	; 0x03
    1984:	3c 81       	ldd	r19, Y+4	; 0x04
    1986:	22 30       	cpi	r18, 0x02	; 2
    1988:	31 05       	cpc	r19, r1
    198a:	2c f4       	brge	.+10     	; 0x1996 <GPIO_setupPortDirection+0x3e>
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	9c 81       	ldd	r25, Y+4	; 0x04
    1990:	00 97       	sbiw	r24, 0x00	; 0
    1992:	61 f0       	breq	.+24     	; 0x19ac <GPIO_setupPortDirection+0x54>
    1994:	1e c0       	rjmp	.+60     	; 0x19d2 <GPIO_setupPortDirection+0x7a>
    1996:	2b 81       	ldd	r18, Y+3	; 0x03
    1998:	3c 81       	ldd	r19, Y+4	; 0x04
    199a:	22 30       	cpi	r18, 0x02	; 2
    199c:	31 05       	cpc	r19, r1
    199e:	81 f0       	breq	.+32     	; 0x19c0 <GPIO_setupPortDirection+0x68>
    19a0:	8b 81       	ldd	r24, Y+3	; 0x03
    19a2:	9c 81       	ldd	r25, Y+4	; 0x04
    19a4:	83 30       	cpi	r24, 0x03	; 3
    19a6:	91 05       	cpc	r25, r1
    19a8:	81 f0       	breq	.+32     	; 0x19ca <GPIO_setupPortDirection+0x72>
    19aa:	13 c0       	rjmp	.+38     	; 0x19d2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    19ac:	ea e3       	ldi	r30, 0x3A	; 58
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	8a 81       	ldd	r24, Y+2	; 0x02
    19b2:	80 83       	st	Z, r24
    19b4:	0e c0       	rjmp	.+28     	; 0x19d2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    19b6:	e7 e3       	ldi	r30, 0x37	; 55
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	8a 81       	ldd	r24, Y+2	; 0x02
    19bc:	80 83       	st	Z, r24
    19be:	09 c0       	rjmp	.+18     	; 0x19d2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    19c0:	e4 e3       	ldi	r30, 0x34	; 52
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	8a 81       	ldd	r24, Y+2	; 0x02
    19c6:	80 83       	st	Z, r24
    19c8:	04 c0       	rjmp	.+8      	; 0x19d2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    19ca:	e1 e3       	ldi	r30, 0x31	; 49
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	8a 81       	ldd	r24, Y+2	; 0x02
    19d0:	80 83       	st	Z, r24
			break;
		}
	}
}
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	cf 91       	pop	r28
    19dc:	df 91       	pop	r29
    19de:	08 95       	ret

000019e0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    19e0:	df 93       	push	r29
    19e2:	cf 93       	push	r28
    19e4:	00 d0       	rcall	.+0      	; 0x19e6 <GPIO_writePort+0x6>
    19e6:	00 d0       	rcall	.+0      	; 0x19e8 <GPIO_writePort+0x8>
    19e8:	cd b7       	in	r28, 0x3d	; 61
    19ea:	de b7       	in	r29, 0x3e	; 62
    19ec:	89 83       	std	Y+1, r24	; 0x01
    19ee:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
    19f2:	84 30       	cpi	r24, 0x04	; 4
    19f4:	90 f5       	brcc	.+100    	; 0x1a5a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    19f6:	89 81       	ldd	r24, Y+1	; 0x01
    19f8:	28 2f       	mov	r18, r24
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	3c 83       	std	Y+4, r19	; 0x04
    19fe:	2b 83       	std	Y+3, r18	; 0x03
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	9c 81       	ldd	r25, Y+4	; 0x04
    1a04:	81 30       	cpi	r24, 0x01	; 1
    1a06:	91 05       	cpc	r25, r1
    1a08:	d1 f0       	breq	.+52     	; 0x1a3e <GPIO_writePort+0x5e>
    1a0a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a0c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a0e:	22 30       	cpi	r18, 0x02	; 2
    1a10:	31 05       	cpc	r19, r1
    1a12:	2c f4       	brge	.+10     	; 0x1a1e <GPIO_writePort+0x3e>
    1a14:	8b 81       	ldd	r24, Y+3	; 0x03
    1a16:	9c 81       	ldd	r25, Y+4	; 0x04
    1a18:	00 97       	sbiw	r24, 0x00	; 0
    1a1a:	61 f0       	breq	.+24     	; 0x1a34 <GPIO_writePort+0x54>
    1a1c:	1e c0       	rjmp	.+60     	; 0x1a5a <GPIO_writePort+0x7a>
    1a1e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a20:	3c 81       	ldd	r19, Y+4	; 0x04
    1a22:	22 30       	cpi	r18, 0x02	; 2
    1a24:	31 05       	cpc	r19, r1
    1a26:	81 f0       	breq	.+32     	; 0x1a48 <GPIO_writePort+0x68>
    1a28:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2c:	83 30       	cpi	r24, 0x03	; 3
    1a2e:	91 05       	cpc	r25, r1
    1a30:	81 f0       	breq	.+32     	; 0x1a52 <GPIO_writePort+0x72>
    1a32:	13 c0       	rjmp	.+38     	; 0x1a5a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1a34:	eb e3       	ldi	r30, 0x3B	; 59
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3a:	80 83       	st	Z, r24
    1a3c:	0e c0       	rjmp	.+28     	; 0x1a5a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1a3e:	e8 e3       	ldi	r30, 0x38	; 56
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	8a 81       	ldd	r24, Y+2	; 0x02
    1a44:	80 83       	st	Z, r24
    1a46:	09 c0       	rjmp	.+18     	; 0x1a5a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1a48:	e5 e3       	ldi	r30, 0x35	; 53
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4e:	80 83       	st	Z, r24
    1a50:	04 c0       	rjmp	.+8      	; 0x1a5a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1a52:	e2 e3       	ldi	r30, 0x32	; 50
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	8a 81       	ldd	r24, Y+2	; 0x02
    1a58:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	cf 91       	pop	r28
    1a64:	df 91       	pop	r29
    1a66:	08 95       	ret

00001a68 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1a68:	df 93       	push	r29
    1a6a:	cf 93       	push	r28
    1a6c:	00 d0       	rcall	.+0      	; 0x1a6e <GPIO_readPort+0x6>
    1a6e:	00 d0       	rcall	.+0      	; 0x1a70 <GPIO_readPort+0x8>
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
    1a74:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1a76:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a78:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7a:	84 30       	cpi	r24, 0x04	; 4
    1a7c:	90 f5       	brcc	.+100    	; 0x1ae2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a80:	28 2f       	mov	r18, r24
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	3c 83       	std	Y+4, r19	; 0x04
    1a86:	2b 83       	std	Y+3, r18	; 0x03
    1a88:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8c:	81 30       	cpi	r24, 0x01	; 1
    1a8e:	91 05       	cpc	r25, r1
    1a90:	d1 f0       	breq	.+52     	; 0x1ac6 <GPIO_readPort+0x5e>
    1a92:	2b 81       	ldd	r18, Y+3	; 0x03
    1a94:	3c 81       	ldd	r19, Y+4	; 0x04
    1a96:	22 30       	cpi	r18, 0x02	; 2
    1a98:	31 05       	cpc	r19, r1
    1a9a:	2c f4       	brge	.+10     	; 0x1aa6 <GPIO_readPort+0x3e>
    1a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa0:	00 97       	sbiw	r24, 0x00	; 0
    1aa2:	61 f0       	breq	.+24     	; 0x1abc <GPIO_readPort+0x54>
    1aa4:	1e c0       	rjmp	.+60     	; 0x1ae2 <GPIO_readPort+0x7a>
    1aa6:	2b 81       	ldd	r18, Y+3	; 0x03
    1aa8:	3c 81       	ldd	r19, Y+4	; 0x04
    1aaa:	22 30       	cpi	r18, 0x02	; 2
    1aac:	31 05       	cpc	r19, r1
    1aae:	81 f0       	breq	.+32     	; 0x1ad0 <GPIO_readPort+0x68>
    1ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab4:	83 30       	cpi	r24, 0x03	; 3
    1ab6:	91 05       	cpc	r25, r1
    1ab8:	81 f0       	breq	.+32     	; 0x1ada <GPIO_readPort+0x72>
    1aba:	13 c0       	rjmp	.+38     	; 0x1ae2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1abc:	e9 e3       	ldi	r30, 0x39	; 57
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	89 83       	std	Y+1, r24	; 0x01
    1ac4:	0e c0       	rjmp	.+28     	; 0x1ae2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1ac6:	e6 e3       	ldi	r30, 0x36	; 54
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	89 83       	std	Y+1, r24	; 0x01
    1ace:	09 c0       	rjmp	.+18     	; 0x1ae2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1ad0:	e3 e3       	ldi	r30, 0x33	; 51
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	89 83       	std	Y+1, r24	; 0x01
    1ad8:	04 c0       	rjmp	.+8      	; 0x1ae2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1ada:	e0 e3       	ldi	r30, 0x30	; 48
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1ae2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ae4:	0f 90       	pop	r0
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	cf 91       	pop	r28
    1aee:	df 91       	pop	r29
    1af0:	08 95       	ret

00001af2 <LCD_init>:
 * Description :
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void) {
    1af2:	df 93       	push	r29
    1af4:	cf 93       	push	r28
    1af6:	cd b7       	in	r28, 0x3d	; 61
    1af8:	de b7       	in	r29, 0x3e	; 62
    1afa:	2e 97       	sbiw	r28, 0x0e	; 14
    1afc:	0f b6       	in	r0, 0x3f	; 63
    1afe:	f8 94       	cli
    1b00:	de bf       	out	0x3e, r29	; 62
    1b02:	0f be       	out	0x3f, r0	; 63
    1b04:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    1b06:	83 e0       	ldi	r24, 0x03	; 3
    1b08:	60 e0       	ldi	r22, 0x00	; 0
    1b0a:	41 e0       	ldi	r20, 0x01	; 1
    1b0c:	0e 94 3b 0a 	call	0x1476	; 0x1476 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    1b10:	83 e0       	ldi	r24, 0x03	; 3
    1b12:	61 e0       	ldi	r22, 0x01	; 1
    1b14:	41 e0       	ldi	r20, 0x01	; 1
    1b16:	0e 94 3b 0a 	call	0x1476	; 0x1476 <GPIO_setupPinDirection>
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	a0 ea       	ldi	r26, 0xA0	; 160
    1b20:	b1 e4       	ldi	r27, 0x41	; 65
    1b22:	8b 87       	std	Y+11, r24	; 0x0b
    1b24:	9c 87       	std	Y+12, r25	; 0x0c
    1b26:	ad 87       	std	Y+13, r26	; 0x0d
    1b28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	4a e7       	ldi	r20, 0x7A	; 122
    1b38:	55 e4       	ldi	r21, 0x45	; 69
    1b3a:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	8f 83       	std	Y+7, r24	; 0x07
    1b44:	98 87       	std	Y+8, r25	; 0x08
    1b46:	a9 87       	std	Y+9, r26	; 0x09
    1b48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b4c:	78 85       	ldd	r23, Y+8	; 0x08
    1b4e:	89 85       	ldd	r24, Y+9	; 0x09
    1b50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	40 e8       	ldi	r20, 0x80	; 128
    1b58:	5f e3       	ldi	r21, 0x3F	; 63
    1b5a:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__ltsf2>
    1b5e:	88 23       	and	r24, r24
    1b60:	2c f4       	brge	.+10     	; 0x1b6c <LCD_init+0x7a>
		__ticks = 1;
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	9e 83       	std	Y+6, r25	; 0x06
    1b68:	8d 83       	std	Y+5, r24	; 0x05
    1b6a:	3f c0       	rjmp	.+126    	; 0x1bea <LCD_init+0xf8>
	else if (__tmp > 65535)
    1b6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b6e:	78 85       	ldd	r23, Y+8	; 0x08
    1b70:	89 85       	ldd	r24, Y+9	; 0x09
    1b72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	3f ef       	ldi	r19, 0xFF	; 255
    1b78:	4f e7       	ldi	r20, 0x7F	; 127
    1b7a:	57 e4       	ldi	r21, 0x47	; 71
    1b7c:	0e 94 18 05 	call	0xa30	; 0xa30 <__gtsf2>
    1b80:	18 16       	cp	r1, r24
    1b82:	4c f5       	brge	.+82     	; 0x1bd6 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b84:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b86:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	40 e2       	ldi	r20, 0x20	; 32
    1b92:	51 e4       	ldi	r21, 0x41	; 65
    1b94:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	bc 01       	movw	r22, r24
    1b9e:	cd 01       	movw	r24, r26
    1ba0:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	9e 83       	std	Y+6, r25	; 0x06
    1baa:	8d 83       	std	Y+5, r24	; 0x05
    1bac:	0f c0       	rjmp	.+30     	; 0x1bcc <LCD_init+0xda>
    1bae:	80 e9       	ldi	r24, 0x90	; 144
    1bb0:	91 e0       	ldi	r25, 0x01	; 1
    1bb2:	9c 83       	std	Y+4, r25	; 0x04
    1bb4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bba:	01 97       	sbiw	r24, 0x01	; 1
    1bbc:	f1 f7       	brne	.-4      	; 0x1bba <LCD_init+0xc8>
    1bbe:	9c 83       	std	Y+4, r25	; 0x04
    1bc0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc6:	01 97       	sbiw	r24, 0x01	; 1
    1bc8:	9e 83       	std	Y+6, r25	; 0x06
    1bca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bce:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd0:	00 97       	sbiw	r24, 0x00	; 0
    1bd2:	69 f7       	brne	.-38     	; 0x1bae <LCD_init+0xbc>
    1bd4:	14 c0       	rjmp	.+40     	; 0x1bfe <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd8:	78 85       	ldd	r23, Y+8	; 0x08
    1bda:	89 85       	ldd	r24, Y+9	; 0x09
    1bdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bde:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    1be2:	dc 01       	movw	r26, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	9e 83       	std	Y+6, r25	; 0x06
    1be8:	8d 83       	std	Y+5, r24	; 0x05
    1bea:	8d 81       	ldd	r24, Y+5	; 0x05
    1bec:	9e 81       	ldd	r25, Y+6	; 0x06
    1bee:	9a 83       	std	Y+2, r25	; 0x02
    1bf0:	89 83       	std	Y+1, r24	; 0x01
    1bf2:	89 81       	ldd	r24, Y+1	; 0x01
    1bf4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf6:	01 97       	sbiw	r24, 0x01	; 1
    1bf8:	f1 f7       	brne	.-4      	; 0x1bf6 <LCD_init+0x104>
    1bfa:	9a 83       	std	Y+2, r25	; 0x02
    1bfc:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    1bfe:	82 e0       	ldi	r24, 0x02	; 2
    1c00:	6f ef       	ldi	r22, 0xFF	; 255
    1c02:	0e 94 ac 0c 	call	0x1958	; 0x1958 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1c06:	88 e3       	ldi	r24, 0x38	; 56
    1c08:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1c0c:	8c e0       	ldi	r24, 0x0C	; 12
    1c0e:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <LCD_sendCommand>
}
    1c18:	2e 96       	adiw	r28, 0x0e	; 14
    1c1a:	0f b6       	in	r0, 0x3f	; 63
    1c1c:	f8 94       	cli
    1c1e:	de bf       	out	0x3e, r29	; 62
    1c20:	0f be       	out	0x3f, r0	; 63
    1c22:	cd bf       	out	0x3d, r28	; 61
    1c24:	cf 91       	pop	r28
    1c26:	df 91       	pop	r29
    1c28:	08 95       	ret

00001c2a <LCD_sendCommand>:

/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command) {
    1c2a:	df 93       	push	r29
    1c2c:	cf 93       	push	r28
    1c2e:	cd b7       	in	r28, 0x3d	; 61
    1c30:	de b7       	in	r29, 0x3e	; 62
    1c32:	e9 97       	sbiw	r28, 0x39	; 57
    1c34:	0f b6       	in	r0, 0x3f	; 63
    1c36:	f8 94       	cli
    1c38:	de bf       	out	0x3e, r29	; 62
    1c3a:	0f be       	out	0x3f, r0	; 63
    1c3c:	cd bf       	out	0x3d, r28	; 61
    1c3e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW); /* Instruction Mode RS=0 */
    1c40:	83 e0       	ldi	r24, 0x03	; 3
    1c42:	60 e0       	ldi	r22, 0x00	; 0
    1c44:	40 e0       	ldi	r20, 0x00	; 0
    1c46:	0e 94 26 0b 	call	0x164c	; 0x164c <GPIO_writePin>
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	a0 e8       	ldi	r26, 0x80	; 128
    1c50:	bf e3       	ldi	r27, 0x3F	; 63
    1c52:	8d ab       	std	Y+53, r24	; 0x35
    1c54:	9e ab       	std	Y+54, r25	; 0x36
    1c56:	af ab       	std	Y+55, r26	; 0x37
    1c58:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c5a:	6d a9       	ldd	r22, Y+53	; 0x35
    1c5c:	7e a9       	ldd	r23, Y+54	; 0x36
    1c5e:	8f a9       	ldd	r24, Y+55	; 0x37
    1c60:	98 ad       	ldd	r25, Y+56	; 0x38
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	4a e7       	ldi	r20, 0x7A	; 122
    1c68:	55 e4       	ldi	r21, 0x45	; 69
    1c6a:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	89 ab       	std	Y+49, r24	; 0x31
    1c74:	9a ab       	std	Y+50, r25	; 0x32
    1c76:	ab ab       	std	Y+51, r26	; 0x33
    1c78:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c7a:	69 a9       	ldd	r22, Y+49	; 0x31
    1c7c:	7a a9       	ldd	r23, Y+50	; 0x32
    1c7e:	8b a9       	ldd	r24, Y+51	; 0x33
    1c80:	9c a9       	ldd	r25, Y+52	; 0x34
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	40 e8       	ldi	r20, 0x80	; 128
    1c88:	5f e3       	ldi	r21, 0x3F	; 63
    1c8a:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__ltsf2>
    1c8e:	88 23       	and	r24, r24
    1c90:	2c f4       	brge	.+10     	; 0x1c9c <LCD_sendCommand+0x72>
		__ticks = 1;
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	98 ab       	std	Y+48, r25	; 0x30
    1c98:	8f a7       	std	Y+47, r24	; 0x2f
    1c9a:	3f c0       	rjmp	.+126    	; 0x1d1a <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1c9c:	69 a9       	ldd	r22, Y+49	; 0x31
    1c9e:	7a a9       	ldd	r23, Y+50	; 0x32
    1ca0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ca2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	3f ef       	ldi	r19, 0xFF	; 255
    1ca8:	4f e7       	ldi	r20, 0x7F	; 127
    1caa:	57 e4       	ldi	r21, 0x47	; 71
    1cac:	0e 94 18 05 	call	0xa30	; 0xa30 <__gtsf2>
    1cb0:	18 16       	cp	r1, r24
    1cb2:	4c f5       	brge	.+82     	; 0x1d06 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb4:	6d a9       	ldd	r22, Y+53	; 0x35
    1cb6:	7e a9       	ldd	r23, Y+54	; 0x36
    1cb8:	8f a9       	ldd	r24, Y+55	; 0x37
    1cba:	98 ad       	ldd	r25, Y+56	; 0x38
    1cbc:	20 e0       	ldi	r18, 0x00	; 0
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	40 e2       	ldi	r20, 0x20	; 32
    1cc2:	51 e4       	ldi	r21, 0x41	; 65
    1cc4:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
    1cc8:	dc 01       	movw	r26, r24
    1cca:	cb 01       	movw	r24, r22
    1ccc:	bc 01       	movw	r22, r24
    1cce:	cd 01       	movw	r24, r26
    1cd0:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	98 ab       	std	Y+48, r25	; 0x30
    1cda:	8f a7       	std	Y+47, r24	; 0x2f
    1cdc:	0f c0       	rjmp	.+30     	; 0x1cfc <LCD_sendCommand+0xd2>
    1cde:	80 e9       	ldi	r24, 0x90	; 144
    1ce0:	91 e0       	ldi	r25, 0x01	; 1
    1ce2:	9e a7       	std	Y+46, r25	; 0x2e
    1ce4:	8d a7       	std	Y+45, r24	; 0x2d
    1ce6:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ce8:	9e a5       	ldd	r25, Y+46	; 0x2e
    1cea:	01 97       	sbiw	r24, 0x01	; 1
    1cec:	f1 f7       	brne	.-4      	; 0x1cea <LCD_sendCommand+0xc0>
    1cee:	9e a7       	std	Y+46, r25	; 0x2e
    1cf0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cf4:	98 a9       	ldd	r25, Y+48	; 0x30
    1cf6:	01 97       	sbiw	r24, 0x01	; 1
    1cf8:	98 ab       	std	Y+48, r25	; 0x30
    1cfa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cfc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cfe:	98 a9       	ldd	r25, Y+48	; 0x30
    1d00:	00 97       	sbiw	r24, 0x00	; 0
    1d02:	69 f7       	brne	.-38     	; 0x1cde <LCD_sendCommand+0xb4>
    1d04:	14 c0       	rjmp	.+40     	; 0x1d2e <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d06:	69 a9       	ldd	r22, Y+49	; 0x31
    1d08:	7a a9       	ldd	r23, Y+50	; 0x32
    1d0a:	8b a9       	ldd	r24, Y+51	; 0x33
    1d0c:	9c a9       	ldd	r25, Y+52	; 0x34
    1d0e:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	98 ab       	std	Y+48, r25	; 0x30
    1d18:	8f a7       	std	Y+47, r24	; 0x2f
    1d1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d1c:	98 a9       	ldd	r25, Y+48	; 0x30
    1d1e:	9c a7       	std	Y+44, r25	; 0x2c
    1d20:	8b a7       	std	Y+43, r24	; 0x2b
    1d22:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d24:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d26:	01 97       	sbiw	r24, 0x01	; 1
    1d28:	f1 f7       	brne	.-4      	; 0x1d26 <LCD_sendCommand+0xfc>
    1d2a:	9c a7       	std	Y+44, r25	; 0x2c
    1d2c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    1d2e:	83 e0       	ldi	r24, 0x03	; 3
    1d30:	61 e0       	ldi	r22, 0x01	; 1
    1d32:	41 e0       	ldi	r20, 0x01	; 1
    1d34:	0e 94 26 0b 	call	0x164c	; 0x164c <GPIO_writePin>
    1d38:	80 e0       	ldi	r24, 0x00	; 0
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	a0 e8       	ldi	r26, 0x80	; 128
    1d3e:	bf e3       	ldi	r27, 0x3F	; 63
    1d40:	8f a3       	std	Y+39, r24	; 0x27
    1d42:	98 a7       	std	Y+40, r25	; 0x28
    1d44:	a9 a7       	std	Y+41, r26	; 0x29
    1d46:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d48:	6f a1       	ldd	r22, Y+39	; 0x27
    1d4a:	78 a5       	ldd	r23, Y+40	; 0x28
    1d4c:	89 a5       	ldd	r24, Y+41	; 0x29
    1d4e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	4a e7       	ldi	r20, 0x7A	; 122
    1d56:	55 e4       	ldi	r21, 0x45	; 69
    1d58:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	8b a3       	std	Y+35, r24	; 0x23
    1d62:	9c a3       	std	Y+36, r25	; 0x24
    1d64:	ad a3       	std	Y+37, r26	; 0x25
    1d66:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d68:	6b a1       	ldd	r22, Y+35	; 0x23
    1d6a:	7c a1       	ldd	r23, Y+36	; 0x24
    1d6c:	8d a1       	ldd	r24, Y+37	; 0x25
    1d6e:	9e a1       	ldd	r25, Y+38	; 0x26
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	40 e8       	ldi	r20, 0x80	; 128
    1d76:	5f e3       	ldi	r21, 0x3F	; 63
    1d78:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__ltsf2>
    1d7c:	88 23       	and	r24, r24
    1d7e:	2c f4       	brge	.+10     	; 0x1d8a <LCD_sendCommand+0x160>
		__ticks = 1;
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	9a a3       	std	Y+34, r25	; 0x22
    1d86:	89 a3       	std	Y+33, r24	; 0x21
    1d88:	3f c0       	rjmp	.+126    	; 0x1e08 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1d8a:	6b a1       	ldd	r22, Y+35	; 0x23
    1d8c:	7c a1       	ldd	r23, Y+36	; 0x24
    1d8e:	8d a1       	ldd	r24, Y+37	; 0x25
    1d90:	9e a1       	ldd	r25, Y+38	; 0x26
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	3f ef       	ldi	r19, 0xFF	; 255
    1d96:	4f e7       	ldi	r20, 0x7F	; 127
    1d98:	57 e4       	ldi	r21, 0x47	; 71
    1d9a:	0e 94 18 05 	call	0xa30	; 0xa30 <__gtsf2>
    1d9e:	18 16       	cp	r1, r24
    1da0:	4c f5       	brge	.+82     	; 0x1df4 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da2:	6f a1       	ldd	r22, Y+39	; 0x27
    1da4:	78 a5       	ldd	r23, Y+40	; 0x28
    1da6:	89 a5       	ldd	r24, Y+41	; 0x29
    1da8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	40 e2       	ldi	r20, 0x20	; 32
    1db0:	51 e4       	ldi	r21, 0x41	; 65
    1db2:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
    1db6:	dc 01       	movw	r26, r24
    1db8:	cb 01       	movw	r24, r22
    1dba:	bc 01       	movw	r22, r24
    1dbc:	cd 01       	movw	r24, r26
    1dbe:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	9a a3       	std	Y+34, r25	; 0x22
    1dc8:	89 a3       	std	Y+33, r24	; 0x21
    1dca:	0f c0       	rjmp	.+30     	; 0x1dea <LCD_sendCommand+0x1c0>
    1dcc:	80 e9       	ldi	r24, 0x90	; 144
    1dce:	91 e0       	ldi	r25, 0x01	; 1
    1dd0:	98 a3       	std	Y+32, r25	; 0x20
    1dd2:	8f 8f       	std	Y+31, r24	; 0x1f
    1dd4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1dd6:	98 a1       	ldd	r25, Y+32	; 0x20
    1dd8:	01 97       	sbiw	r24, 0x01	; 1
    1dda:	f1 f7       	brne	.-4      	; 0x1dd8 <LCD_sendCommand+0x1ae>
    1ddc:	98 a3       	std	Y+32, r25	; 0x20
    1dde:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de0:	89 a1       	ldd	r24, Y+33	; 0x21
    1de2:	9a a1       	ldd	r25, Y+34	; 0x22
    1de4:	01 97       	sbiw	r24, 0x01	; 1
    1de6:	9a a3       	std	Y+34, r25	; 0x22
    1de8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dea:	89 a1       	ldd	r24, Y+33	; 0x21
    1dec:	9a a1       	ldd	r25, Y+34	; 0x22
    1dee:	00 97       	sbiw	r24, 0x00	; 0
    1df0:	69 f7       	brne	.-38     	; 0x1dcc <LCD_sendCommand+0x1a2>
    1df2:	14 c0       	rjmp	.+40     	; 0x1e1c <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df4:	6b a1       	ldd	r22, Y+35	; 0x23
    1df6:	7c a1       	ldd	r23, Y+36	; 0x24
    1df8:	8d a1       	ldd	r24, Y+37	; 0x25
    1dfa:	9e a1       	ldd	r25, Y+38	; 0x26
    1dfc:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	9a a3       	std	Y+34, r25	; 0x22
    1e06:	89 a3       	std	Y+33, r24	; 0x21
    1e08:	89 a1       	ldd	r24, Y+33	; 0x21
    1e0a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e0c:	9e 8f       	std	Y+30, r25	; 0x1e
    1e0e:	8d 8f       	std	Y+29, r24	; 0x1d
    1e10:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e12:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e14:	01 97       	sbiw	r24, 0x01	; 1
    1e16:	f1 f7       	brne	.-4      	; 0x1e14 <LCD_sendCommand+0x1ea>
    1e18:	9e 8f       	std	Y+30, r25	; 0x1e
    1e1a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID, command); /* out the required command to the data bus D0 --> D7 */
    1e1c:	82 e0       	ldi	r24, 0x02	; 2
    1e1e:	69 ad       	ldd	r22, Y+57	; 0x39
    1e20:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <GPIO_writePort>
    1e24:	80 e0       	ldi	r24, 0x00	; 0
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	a0 e8       	ldi	r26, 0x80	; 128
    1e2a:	bf e3       	ldi	r27, 0x3F	; 63
    1e2c:	89 8f       	std	Y+25, r24	; 0x19
    1e2e:	9a 8f       	std	Y+26, r25	; 0x1a
    1e30:	ab 8f       	std	Y+27, r26	; 0x1b
    1e32:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e34:	69 8d       	ldd	r22, Y+25	; 0x19
    1e36:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e3c:	20 e0       	ldi	r18, 0x00	; 0
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	4a e7       	ldi	r20, 0x7A	; 122
    1e42:	55 e4       	ldi	r21, 0x45	; 69
    1e44:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	8d 8b       	std	Y+21, r24	; 0x15
    1e4e:	9e 8b       	std	Y+22, r25	; 0x16
    1e50:	af 8b       	std	Y+23, r26	; 0x17
    1e52:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e54:	6d 89       	ldd	r22, Y+21	; 0x15
    1e56:	7e 89       	ldd	r23, Y+22	; 0x16
    1e58:	8f 89       	ldd	r24, Y+23	; 0x17
    1e5a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	40 e8       	ldi	r20, 0x80	; 128
    1e62:	5f e3       	ldi	r21, 0x3F	; 63
    1e64:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__ltsf2>
    1e68:	88 23       	and	r24, r24
    1e6a:	2c f4       	brge	.+10     	; 0x1e76 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	9c 8b       	std	Y+20, r25	; 0x14
    1e72:	8b 8b       	std	Y+19, r24	; 0x13
    1e74:	3f c0       	rjmp	.+126    	; 0x1ef4 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1e76:	6d 89       	ldd	r22, Y+21	; 0x15
    1e78:	7e 89       	ldd	r23, Y+22	; 0x16
    1e7a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e7c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	3f ef       	ldi	r19, 0xFF	; 255
    1e82:	4f e7       	ldi	r20, 0x7F	; 127
    1e84:	57 e4       	ldi	r21, 0x47	; 71
    1e86:	0e 94 18 05 	call	0xa30	; 0xa30 <__gtsf2>
    1e8a:	18 16       	cp	r1, r24
    1e8c:	4c f5       	brge	.+82     	; 0x1ee0 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e8e:	69 8d       	ldd	r22, Y+25	; 0x19
    1e90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	40 e2       	ldi	r20, 0x20	; 32
    1e9c:	51 e4       	ldi	r21, 0x41	; 65
    1e9e:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	bc 01       	movw	r22, r24
    1ea8:	cd 01       	movw	r24, r26
    1eaa:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    1eae:	dc 01       	movw	r26, r24
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	9c 8b       	std	Y+20, r25	; 0x14
    1eb4:	8b 8b       	std	Y+19, r24	; 0x13
    1eb6:	0f c0       	rjmp	.+30     	; 0x1ed6 <LCD_sendCommand+0x2ac>
    1eb8:	80 e9       	ldi	r24, 0x90	; 144
    1eba:	91 e0       	ldi	r25, 0x01	; 1
    1ebc:	9a 8b       	std	Y+18, r25	; 0x12
    1ebe:	89 8b       	std	Y+17, r24	; 0x11
    1ec0:	89 89       	ldd	r24, Y+17	; 0x11
    1ec2:	9a 89       	ldd	r25, Y+18	; 0x12
    1ec4:	01 97       	sbiw	r24, 0x01	; 1
    1ec6:	f1 f7       	brne	.-4      	; 0x1ec4 <LCD_sendCommand+0x29a>
    1ec8:	9a 8b       	std	Y+18, r25	; 0x12
    1eca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ecc:	8b 89       	ldd	r24, Y+19	; 0x13
    1ece:	9c 89       	ldd	r25, Y+20	; 0x14
    1ed0:	01 97       	sbiw	r24, 0x01	; 1
    1ed2:	9c 8b       	std	Y+20, r25	; 0x14
    1ed4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ed8:	9c 89       	ldd	r25, Y+20	; 0x14
    1eda:	00 97       	sbiw	r24, 0x00	; 0
    1edc:	69 f7       	brne	.-38     	; 0x1eb8 <LCD_sendCommand+0x28e>
    1ede:	14 c0       	rjmp	.+40     	; 0x1f08 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ee2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ee4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ee6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ee8:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	9c 8b       	std	Y+20, r25	; 0x14
    1ef2:	8b 8b       	std	Y+19, r24	; 0x13
    1ef4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef8:	98 8b       	std	Y+16, r25	; 0x10
    1efa:	8f 87       	std	Y+15, r24	; 0x0f
    1efc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1efe:	98 89       	ldd	r25, Y+16	; 0x10
    1f00:	01 97       	sbiw	r24, 0x01	; 1
    1f02:	f1 f7       	brne	.-4      	; 0x1f00 <LCD_sendCommand+0x2d6>
    1f04:	98 8b       	std	Y+16, r25	; 0x10
    1f06:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    1f08:	83 e0       	ldi	r24, 0x03	; 3
    1f0a:	61 e0       	ldi	r22, 0x01	; 1
    1f0c:	40 e0       	ldi	r20, 0x00	; 0
    1f0e:	0e 94 26 0b 	call	0x164c	; 0x164c <GPIO_writePin>
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	a0 e8       	ldi	r26, 0x80	; 128
    1f18:	bf e3       	ldi	r27, 0x3F	; 63
    1f1a:	8b 87       	std	Y+11, r24	; 0x0b
    1f1c:	9c 87       	std	Y+12, r25	; 0x0c
    1f1e:	ad 87       	std	Y+13, r26	; 0x0d
    1f20:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f22:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f24:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f26:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f28:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	4a e7       	ldi	r20, 0x7A	; 122
    1f30:	55 e4       	ldi	r21, 0x45	; 69
    1f32:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	8f 83       	std	Y+7, r24	; 0x07
    1f3c:	98 87       	std	Y+8, r25	; 0x08
    1f3e:	a9 87       	std	Y+9, r26	; 0x09
    1f40:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f42:	6f 81       	ldd	r22, Y+7	; 0x07
    1f44:	78 85       	ldd	r23, Y+8	; 0x08
    1f46:	89 85       	ldd	r24, Y+9	; 0x09
    1f48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	40 e8       	ldi	r20, 0x80	; 128
    1f50:	5f e3       	ldi	r21, 0x3F	; 63
    1f52:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__ltsf2>
    1f56:	88 23       	and	r24, r24
    1f58:	2c f4       	brge	.+10     	; 0x1f64 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	9e 83       	std	Y+6, r25	; 0x06
    1f60:	8d 83       	std	Y+5, r24	; 0x05
    1f62:	3f c0       	rjmp	.+126    	; 0x1fe2 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1f64:	6f 81       	ldd	r22, Y+7	; 0x07
    1f66:	78 85       	ldd	r23, Y+8	; 0x08
    1f68:	89 85       	ldd	r24, Y+9	; 0x09
    1f6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	3f ef       	ldi	r19, 0xFF	; 255
    1f70:	4f e7       	ldi	r20, 0x7F	; 127
    1f72:	57 e4       	ldi	r21, 0x47	; 71
    1f74:	0e 94 18 05 	call	0xa30	; 0xa30 <__gtsf2>
    1f78:	18 16       	cp	r1, r24
    1f7a:	4c f5       	brge	.+82     	; 0x1fce <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	40 e2       	ldi	r20, 0x20	; 32
    1f8a:	51 e4       	ldi	r21, 0x41	; 65
    1f8c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	bc 01       	movw	r22, r24
    1f96:	cd 01       	movw	r24, r26
    1f98:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	9e 83       	std	Y+6, r25	; 0x06
    1fa2:	8d 83       	std	Y+5, r24	; 0x05
    1fa4:	0f c0       	rjmp	.+30     	; 0x1fc4 <LCD_sendCommand+0x39a>
    1fa6:	80 e9       	ldi	r24, 0x90	; 144
    1fa8:	91 e0       	ldi	r25, 0x01	; 1
    1faa:	9c 83       	std	Y+4, r25	; 0x04
    1fac:	8b 83       	std	Y+3, r24	; 0x03
    1fae:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb2:	01 97       	sbiw	r24, 0x01	; 1
    1fb4:	f1 f7       	brne	.-4      	; 0x1fb2 <LCD_sendCommand+0x388>
    1fb6:	9c 83       	std	Y+4, r25	; 0x04
    1fb8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fba:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1fbe:	01 97       	sbiw	r24, 0x01	; 1
    1fc0:	9e 83       	std	Y+6, r25	; 0x06
    1fc2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc8:	00 97       	sbiw	r24, 0x00	; 0
    1fca:	69 f7       	brne	.-38     	; 0x1fa6 <LCD_sendCommand+0x37c>
    1fcc:	14 c0       	rjmp	.+40     	; 0x1ff6 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fce:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd0:	78 85       	ldd	r23, Y+8	; 0x08
    1fd2:	89 85       	ldd	r24, Y+9	; 0x09
    1fd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd6:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	9e 83       	std	Y+6, r25	; 0x06
    1fe0:	8d 83       	std	Y+5, r24	; 0x05
    1fe2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe6:	9a 83       	std	Y+2, r25	; 0x02
    1fe8:	89 83       	std	Y+1, r24	; 0x01
    1fea:	89 81       	ldd	r24, Y+1	; 0x01
    1fec:	9a 81       	ldd	r25, Y+2	; 0x02
    1fee:	01 97       	sbiw	r24, 0x01	; 1
    1ff0:	f1 f7       	brne	.-4      	; 0x1fee <LCD_sendCommand+0x3c4>
    1ff2:	9a 83       	std	Y+2, r25	; 0x02
    1ff4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1ff6:	e9 96       	adiw	r28, 0x39	; 57
    1ff8:	0f b6       	in	r0, 0x3f	; 63
    1ffa:	f8 94       	cli
    1ffc:	de bf       	out	0x3e, r29	; 62
    1ffe:	0f be       	out	0x3f, r0	; 63
    2000:	cd bf       	out	0x3d, r28	; 61
    2002:	cf 91       	pop	r28
    2004:	df 91       	pop	r29
    2006:	08 95       	ret

00002008 <LCD_displayCharacter>:

/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data) {
    2008:	df 93       	push	r29
    200a:	cf 93       	push	r28
    200c:	cd b7       	in	r28, 0x3d	; 61
    200e:	de b7       	in	r29, 0x3e	; 62
    2010:	e9 97       	sbiw	r28, 0x39	; 57
    2012:	0f b6       	in	r0, 0x3f	; 63
    2014:	f8 94       	cli
    2016:	de bf       	out	0x3e, r29	; 62
    2018:	0f be       	out	0x3f, r0	; 63
    201a:	cd bf       	out	0x3d, r28	; 61
    201c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH); /* Data Mode RS=1 */
    201e:	83 e0       	ldi	r24, 0x03	; 3
    2020:	60 e0       	ldi	r22, 0x00	; 0
    2022:	41 e0       	ldi	r20, 0x01	; 1
    2024:	0e 94 26 0b 	call	0x164c	; 0x164c <GPIO_writePin>
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	a0 e8       	ldi	r26, 0x80	; 128
    202e:	bf e3       	ldi	r27, 0x3F	; 63
    2030:	8d ab       	std	Y+53, r24	; 0x35
    2032:	9e ab       	std	Y+54, r25	; 0x36
    2034:	af ab       	std	Y+55, r26	; 0x37
    2036:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2038:	6d a9       	ldd	r22, Y+53	; 0x35
    203a:	7e a9       	ldd	r23, Y+54	; 0x36
    203c:	8f a9       	ldd	r24, Y+55	; 0x37
    203e:	98 ad       	ldd	r25, Y+56	; 0x38
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	4a e7       	ldi	r20, 0x7A	; 122
    2046:	55 e4       	ldi	r21, 0x45	; 69
    2048:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	89 ab       	std	Y+49, r24	; 0x31
    2052:	9a ab       	std	Y+50, r25	; 0x32
    2054:	ab ab       	std	Y+51, r26	; 0x33
    2056:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2058:	69 a9       	ldd	r22, Y+49	; 0x31
    205a:	7a a9       	ldd	r23, Y+50	; 0x32
    205c:	8b a9       	ldd	r24, Y+51	; 0x33
    205e:	9c a9       	ldd	r25, Y+52	; 0x34
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	40 e8       	ldi	r20, 0x80	; 128
    2066:	5f e3       	ldi	r21, 0x3F	; 63
    2068:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__ltsf2>
    206c:	88 23       	and	r24, r24
    206e:	2c f4       	brge	.+10     	; 0x207a <LCD_displayCharacter+0x72>
		__ticks = 1;
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	98 ab       	std	Y+48, r25	; 0x30
    2076:	8f a7       	std	Y+47, r24	; 0x2f
    2078:	3f c0       	rjmp	.+126    	; 0x20f8 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    207a:	69 a9       	ldd	r22, Y+49	; 0x31
    207c:	7a a9       	ldd	r23, Y+50	; 0x32
    207e:	8b a9       	ldd	r24, Y+51	; 0x33
    2080:	9c a9       	ldd	r25, Y+52	; 0x34
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	3f ef       	ldi	r19, 0xFF	; 255
    2086:	4f e7       	ldi	r20, 0x7F	; 127
    2088:	57 e4       	ldi	r21, 0x47	; 71
    208a:	0e 94 18 05 	call	0xa30	; 0xa30 <__gtsf2>
    208e:	18 16       	cp	r1, r24
    2090:	4c f5       	brge	.+82     	; 0x20e4 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2092:	6d a9       	ldd	r22, Y+53	; 0x35
    2094:	7e a9       	ldd	r23, Y+54	; 0x36
    2096:	8f a9       	ldd	r24, Y+55	; 0x37
    2098:	98 ad       	ldd	r25, Y+56	; 0x38
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	40 e2       	ldi	r20, 0x20	; 32
    20a0:	51 e4       	ldi	r21, 0x41	; 65
    20a2:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	bc 01       	movw	r22, r24
    20ac:	cd 01       	movw	r24, r26
    20ae:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	98 ab       	std	Y+48, r25	; 0x30
    20b8:	8f a7       	std	Y+47, r24	; 0x2f
    20ba:	0f c0       	rjmp	.+30     	; 0x20da <LCD_displayCharacter+0xd2>
    20bc:	80 e9       	ldi	r24, 0x90	; 144
    20be:	91 e0       	ldi	r25, 0x01	; 1
    20c0:	9e a7       	std	Y+46, r25	; 0x2e
    20c2:	8d a7       	std	Y+45, r24	; 0x2d
    20c4:	8d a5       	ldd	r24, Y+45	; 0x2d
    20c6:	9e a5       	ldd	r25, Y+46	; 0x2e
    20c8:	01 97       	sbiw	r24, 0x01	; 1
    20ca:	f1 f7       	brne	.-4      	; 0x20c8 <LCD_displayCharacter+0xc0>
    20cc:	9e a7       	std	Y+46, r25	; 0x2e
    20ce:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    20d2:	98 a9       	ldd	r25, Y+48	; 0x30
    20d4:	01 97       	sbiw	r24, 0x01	; 1
    20d6:	98 ab       	std	Y+48, r25	; 0x30
    20d8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20da:	8f a5       	ldd	r24, Y+47	; 0x2f
    20dc:	98 a9       	ldd	r25, Y+48	; 0x30
    20de:	00 97       	sbiw	r24, 0x00	; 0
    20e0:	69 f7       	brne	.-38     	; 0x20bc <LCD_displayCharacter+0xb4>
    20e2:	14 c0       	rjmp	.+40     	; 0x210c <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e4:	69 a9       	ldd	r22, Y+49	; 0x31
    20e6:	7a a9       	ldd	r23, Y+50	; 0x32
    20e8:	8b a9       	ldd	r24, Y+51	; 0x33
    20ea:	9c a9       	ldd	r25, Y+52	; 0x34
    20ec:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    20f0:	dc 01       	movw	r26, r24
    20f2:	cb 01       	movw	r24, r22
    20f4:	98 ab       	std	Y+48, r25	; 0x30
    20f6:	8f a7       	std	Y+47, r24	; 0x2f
    20f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    20fa:	98 a9       	ldd	r25, Y+48	; 0x30
    20fc:	9c a7       	std	Y+44, r25	; 0x2c
    20fe:	8b a7       	std	Y+43, r24	; 0x2b
    2100:	8b a5       	ldd	r24, Y+43	; 0x2b
    2102:	9c a5       	ldd	r25, Y+44	; 0x2c
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	f1 f7       	brne	.-4      	; 0x2104 <LCD_displayCharacter+0xfc>
    2108:	9c a7       	std	Y+44, r25	; 0x2c
    210a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    210c:	83 e0       	ldi	r24, 0x03	; 3
    210e:	61 e0       	ldi	r22, 0x01	; 1
    2110:	41 e0       	ldi	r20, 0x01	; 1
    2112:	0e 94 26 0b 	call	0x164c	; 0x164c <GPIO_writePin>
    2116:	80 e0       	ldi	r24, 0x00	; 0
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	a0 e8       	ldi	r26, 0x80	; 128
    211c:	bf e3       	ldi	r27, 0x3F	; 63
    211e:	8f a3       	std	Y+39, r24	; 0x27
    2120:	98 a7       	std	Y+40, r25	; 0x28
    2122:	a9 a7       	std	Y+41, r26	; 0x29
    2124:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2126:	6f a1       	ldd	r22, Y+39	; 0x27
    2128:	78 a5       	ldd	r23, Y+40	; 0x28
    212a:	89 a5       	ldd	r24, Y+41	; 0x29
    212c:	9a a5       	ldd	r25, Y+42	; 0x2a
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	4a e7       	ldi	r20, 0x7A	; 122
    2134:	55 e4       	ldi	r21, 0x45	; 69
    2136:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	8b a3       	std	Y+35, r24	; 0x23
    2140:	9c a3       	std	Y+36, r25	; 0x24
    2142:	ad a3       	std	Y+37, r26	; 0x25
    2144:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2146:	6b a1       	ldd	r22, Y+35	; 0x23
    2148:	7c a1       	ldd	r23, Y+36	; 0x24
    214a:	8d a1       	ldd	r24, Y+37	; 0x25
    214c:	9e a1       	ldd	r25, Y+38	; 0x26
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	40 e8       	ldi	r20, 0x80	; 128
    2154:	5f e3       	ldi	r21, 0x3F	; 63
    2156:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__ltsf2>
    215a:	88 23       	and	r24, r24
    215c:	2c f4       	brge	.+10     	; 0x2168 <LCD_displayCharacter+0x160>
		__ticks = 1;
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	9a a3       	std	Y+34, r25	; 0x22
    2164:	89 a3       	std	Y+33, r24	; 0x21
    2166:	3f c0       	rjmp	.+126    	; 0x21e6 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2168:	6b a1       	ldd	r22, Y+35	; 0x23
    216a:	7c a1       	ldd	r23, Y+36	; 0x24
    216c:	8d a1       	ldd	r24, Y+37	; 0x25
    216e:	9e a1       	ldd	r25, Y+38	; 0x26
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	3f ef       	ldi	r19, 0xFF	; 255
    2174:	4f e7       	ldi	r20, 0x7F	; 127
    2176:	57 e4       	ldi	r21, 0x47	; 71
    2178:	0e 94 18 05 	call	0xa30	; 0xa30 <__gtsf2>
    217c:	18 16       	cp	r1, r24
    217e:	4c f5       	brge	.+82     	; 0x21d2 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2180:	6f a1       	ldd	r22, Y+39	; 0x27
    2182:	78 a5       	ldd	r23, Y+40	; 0x28
    2184:	89 a5       	ldd	r24, Y+41	; 0x29
    2186:	9a a5       	ldd	r25, Y+42	; 0x2a
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	40 e2       	ldi	r20, 0x20	; 32
    218e:	51 e4       	ldi	r21, 0x41	; 65
    2190:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	bc 01       	movw	r22, r24
    219a:	cd 01       	movw	r24, r26
    219c:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	9a a3       	std	Y+34, r25	; 0x22
    21a6:	89 a3       	std	Y+33, r24	; 0x21
    21a8:	0f c0       	rjmp	.+30     	; 0x21c8 <LCD_displayCharacter+0x1c0>
    21aa:	80 e9       	ldi	r24, 0x90	; 144
    21ac:	91 e0       	ldi	r25, 0x01	; 1
    21ae:	98 a3       	std	Y+32, r25	; 0x20
    21b0:	8f 8f       	std	Y+31, r24	; 0x1f
    21b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21b4:	98 a1       	ldd	r25, Y+32	; 0x20
    21b6:	01 97       	sbiw	r24, 0x01	; 1
    21b8:	f1 f7       	brne	.-4      	; 0x21b6 <LCD_displayCharacter+0x1ae>
    21ba:	98 a3       	std	Y+32, r25	; 0x20
    21bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21be:	89 a1       	ldd	r24, Y+33	; 0x21
    21c0:	9a a1       	ldd	r25, Y+34	; 0x22
    21c2:	01 97       	sbiw	r24, 0x01	; 1
    21c4:	9a a3       	std	Y+34, r25	; 0x22
    21c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c8:	89 a1       	ldd	r24, Y+33	; 0x21
    21ca:	9a a1       	ldd	r25, Y+34	; 0x22
    21cc:	00 97       	sbiw	r24, 0x00	; 0
    21ce:	69 f7       	brne	.-38     	; 0x21aa <LCD_displayCharacter+0x1a2>
    21d0:	14 c0       	rjmp	.+40     	; 0x21fa <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d2:	6b a1       	ldd	r22, Y+35	; 0x23
    21d4:	7c a1       	ldd	r23, Y+36	; 0x24
    21d6:	8d a1       	ldd	r24, Y+37	; 0x25
    21d8:	9e a1       	ldd	r25, Y+38	; 0x26
    21da:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	9a a3       	std	Y+34, r25	; 0x22
    21e4:	89 a3       	std	Y+33, r24	; 0x21
    21e6:	89 a1       	ldd	r24, Y+33	; 0x21
    21e8:	9a a1       	ldd	r25, Y+34	; 0x22
    21ea:	9e 8f       	std	Y+30, r25	; 0x1e
    21ec:	8d 8f       	std	Y+29, r24	; 0x1d
    21ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21f2:	01 97       	sbiw	r24, 0x01	; 1
    21f4:	f1 f7       	brne	.-4      	; 0x21f2 <LCD_displayCharacter+0x1ea>
    21f6:	9e 8f       	std	Y+30, r25	; 0x1e
    21f8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID, data); /* out the required command to the data bus D0 --> D7 */
    21fa:	82 e0       	ldi	r24, 0x02	; 2
    21fc:	69 ad       	ldd	r22, Y+57	; 0x39
    21fe:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <GPIO_writePort>
    2202:	80 e0       	ldi	r24, 0x00	; 0
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	a0 e8       	ldi	r26, 0x80	; 128
    2208:	bf e3       	ldi	r27, 0x3F	; 63
    220a:	89 8f       	std	Y+25, r24	; 0x19
    220c:	9a 8f       	std	Y+26, r25	; 0x1a
    220e:	ab 8f       	std	Y+27, r26	; 0x1b
    2210:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2212:	69 8d       	ldd	r22, Y+25	; 0x19
    2214:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2216:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2218:	9c 8d       	ldd	r25, Y+28	; 0x1c
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	4a e7       	ldi	r20, 0x7A	; 122
    2220:	55 e4       	ldi	r21, 0x45	; 69
    2222:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
    2226:	dc 01       	movw	r26, r24
    2228:	cb 01       	movw	r24, r22
    222a:	8d 8b       	std	Y+21, r24	; 0x15
    222c:	9e 8b       	std	Y+22, r25	; 0x16
    222e:	af 8b       	std	Y+23, r26	; 0x17
    2230:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2232:	6d 89       	ldd	r22, Y+21	; 0x15
    2234:	7e 89       	ldd	r23, Y+22	; 0x16
    2236:	8f 89       	ldd	r24, Y+23	; 0x17
    2238:	98 8d       	ldd	r25, Y+24	; 0x18
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	40 e8       	ldi	r20, 0x80	; 128
    2240:	5f e3       	ldi	r21, 0x3F	; 63
    2242:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__ltsf2>
    2246:	88 23       	and	r24, r24
    2248:	2c f4       	brge	.+10     	; 0x2254 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	9c 8b       	std	Y+20, r25	; 0x14
    2250:	8b 8b       	std	Y+19, r24	; 0x13
    2252:	3f c0       	rjmp	.+126    	; 0x22d2 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2254:	6d 89       	ldd	r22, Y+21	; 0x15
    2256:	7e 89       	ldd	r23, Y+22	; 0x16
    2258:	8f 89       	ldd	r24, Y+23	; 0x17
    225a:	98 8d       	ldd	r25, Y+24	; 0x18
    225c:	20 e0       	ldi	r18, 0x00	; 0
    225e:	3f ef       	ldi	r19, 0xFF	; 255
    2260:	4f e7       	ldi	r20, 0x7F	; 127
    2262:	57 e4       	ldi	r21, 0x47	; 71
    2264:	0e 94 18 05 	call	0xa30	; 0xa30 <__gtsf2>
    2268:	18 16       	cp	r1, r24
    226a:	4c f5       	brge	.+82     	; 0x22be <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    226c:	69 8d       	ldd	r22, Y+25	; 0x19
    226e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2270:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2272:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	40 e2       	ldi	r20, 0x20	; 32
    227a:	51 e4       	ldi	r21, 0x41	; 65
    227c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	bc 01       	movw	r22, r24
    2286:	cd 01       	movw	r24, r26
    2288:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	9c 8b       	std	Y+20, r25	; 0x14
    2292:	8b 8b       	std	Y+19, r24	; 0x13
    2294:	0f c0       	rjmp	.+30     	; 0x22b4 <LCD_displayCharacter+0x2ac>
    2296:	80 e9       	ldi	r24, 0x90	; 144
    2298:	91 e0       	ldi	r25, 0x01	; 1
    229a:	9a 8b       	std	Y+18, r25	; 0x12
    229c:	89 8b       	std	Y+17, r24	; 0x11
    229e:	89 89       	ldd	r24, Y+17	; 0x11
    22a0:	9a 89       	ldd	r25, Y+18	; 0x12
    22a2:	01 97       	sbiw	r24, 0x01	; 1
    22a4:	f1 f7       	brne	.-4      	; 0x22a2 <LCD_displayCharacter+0x29a>
    22a6:	9a 8b       	std	Y+18, r25	; 0x12
    22a8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22aa:	8b 89       	ldd	r24, Y+19	; 0x13
    22ac:	9c 89       	ldd	r25, Y+20	; 0x14
    22ae:	01 97       	sbiw	r24, 0x01	; 1
    22b0:	9c 8b       	std	Y+20, r25	; 0x14
    22b2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b4:	8b 89       	ldd	r24, Y+19	; 0x13
    22b6:	9c 89       	ldd	r25, Y+20	; 0x14
    22b8:	00 97       	sbiw	r24, 0x00	; 0
    22ba:	69 f7       	brne	.-38     	; 0x2296 <LCD_displayCharacter+0x28e>
    22bc:	14 c0       	rjmp	.+40     	; 0x22e6 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22be:	6d 89       	ldd	r22, Y+21	; 0x15
    22c0:	7e 89       	ldd	r23, Y+22	; 0x16
    22c2:	8f 89       	ldd	r24, Y+23	; 0x17
    22c4:	98 8d       	ldd	r25, Y+24	; 0x18
    22c6:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    22ca:	dc 01       	movw	r26, r24
    22cc:	cb 01       	movw	r24, r22
    22ce:	9c 8b       	std	Y+20, r25	; 0x14
    22d0:	8b 8b       	std	Y+19, r24	; 0x13
    22d2:	8b 89       	ldd	r24, Y+19	; 0x13
    22d4:	9c 89       	ldd	r25, Y+20	; 0x14
    22d6:	98 8b       	std	Y+16, r25	; 0x10
    22d8:	8f 87       	std	Y+15, r24	; 0x0f
    22da:	8f 85       	ldd	r24, Y+15	; 0x0f
    22dc:	98 89       	ldd	r25, Y+16	; 0x10
    22de:	01 97       	sbiw	r24, 0x01	; 1
    22e0:	f1 f7       	brne	.-4      	; 0x22de <LCD_displayCharacter+0x2d6>
    22e2:	98 8b       	std	Y+16, r25	; 0x10
    22e4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW); /* Disable LCD E=0 */
    22e6:	83 e0       	ldi	r24, 0x03	; 3
    22e8:	61 e0       	ldi	r22, 0x01	; 1
    22ea:	40 e0       	ldi	r20, 0x00	; 0
    22ec:	0e 94 26 0b 	call	0x164c	; 0x164c <GPIO_writePin>
    22f0:	80 e0       	ldi	r24, 0x00	; 0
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	a0 e8       	ldi	r26, 0x80	; 128
    22f6:	bf e3       	ldi	r27, 0x3F	; 63
    22f8:	8b 87       	std	Y+11, r24	; 0x0b
    22fa:	9c 87       	std	Y+12, r25	; 0x0c
    22fc:	ad 87       	std	Y+13, r26	; 0x0d
    22fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2300:	6b 85       	ldd	r22, Y+11	; 0x0b
    2302:	7c 85       	ldd	r23, Y+12	; 0x0c
    2304:	8d 85       	ldd	r24, Y+13	; 0x0d
    2306:	9e 85       	ldd	r25, Y+14	; 0x0e
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	4a e7       	ldi	r20, 0x7A	; 122
    230e:	55 e4       	ldi	r21, 0x45	; 69
    2310:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
    2314:	dc 01       	movw	r26, r24
    2316:	cb 01       	movw	r24, r22
    2318:	8f 83       	std	Y+7, r24	; 0x07
    231a:	98 87       	std	Y+8, r25	; 0x08
    231c:	a9 87       	std	Y+9, r26	; 0x09
    231e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2320:	6f 81       	ldd	r22, Y+7	; 0x07
    2322:	78 85       	ldd	r23, Y+8	; 0x08
    2324:	89 85       	ldd	r24, Y+9	; 0x09
    2326:	9a 85       	ldd	r25, Y+10	; 0x0a
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	40 e8       	ldi	r20, 0x80	; 128
    232e:	5f e3       	ldi	r21, 0x3F	; 63
    2330:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__ltsf2>
    2334:	88 23       	and	r24, r24
    2336:	2c f4       	brge	.+10     	; 0x2342 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	9e 83       	std	Y+6, r25	; 0x06
    233e:	8d 83       	std	Y+5, r24	; 0x05
    2340:	3f c0       	rjmp	.+126    	; 0x23c0 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2342:	6f 81       	ldd	r22, Y+7	; 0x07
    2344:	78 85       	ldd	r23, Y+8	; 0x08
    2346:	89 85       	ldd	r24, Y+9	; 0x09
    2348:	9a 85       	ldd	r25, Y+10	; 0x0a
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	3f ef       	ldi	r19, 0xFF	; 255
    234e:	4f e7       	ldi	r20, 0x7F	; 127
    2350:	57 e4       	ldi	r21, 0x47	; 71
    2352:	0e 94 18 05 	call	0xa30	; 0xa30 <__gtsf2>
    2356:	18 16       	cp	r1, r24
    2358:	4c f5       	brge	.+82     	; 0x23ac <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    235a:	6b 85       	ldd	r22, Y+11	; 0x0b
    235c:	7c 85       	ldd	r23, Y+12	; 0x0c
    235e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2360:	9e 85       	ldd	r25, Y+14	; 0x0e
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	40 e2       	ldi	r20, 0x20	; 32
    2368:	51 e4       	ldi	r21, 0x41	; 65
    236a:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	bc 01       	movw	r22, r24
    2374:	cd 01       	movw	r24, r26
    2376:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	9e 83       	std	Y+6, r25	; 0x06
    2380:	8d 83       	std	Y+5, r24	; 0x05
    2382:	0f c0       	rjmp	.+30     	; 0x23a2 <LCD_displayCharacter+0x39a>
    2384:	80 e9       	ldi	r24, 0x90	; 144
    2386:	91 e0       	ldi	r25, 0x01	; 1
    2388:	9c 83       	std	Y+4, r25	; 0x04
    238a:	8b 83       	std	Y+3, r24	; 0x03
    238c:	8b 81       	ldd	r24, Y+3	; 0x03
    238e:	9c 81       	ldd	r25, Y+4	; 0x04
    2390:	01 97       	sbiw	r24, 0x01	; 1
    2392:	f1 f7       	brne	.-4      	; 0x2390 <LCD_displayCharacter+0x388>
    2394:	9c 83       	std	Y+4, r25	; 0x04
    2396:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2398:	8d 81       	ldd	r24, Y+5	; 0x05
    239a:	9e 81       	ldd	r25, Y+6	; 0x06
    239c:	01 97       	sbiw	r24, 0x01	; 1
    239e:	9e 83       	std	Y+6, r25	; 0x06
    23a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a2:	8d 81       	ldd	r24, Y+5	; 0x05
    23a4:	9e 81       	ldd	r25, Y+6	; 0x06
    23a6:	00 97       	sbiw	r24, 0x00	; 0
    23a8:	69 f7       	brne	.-38     	; 0x2384 <LCD_displayCharacter+0x37c>
    23aa:	14 c0       	rjmp	.+40     	; 0x23d4 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ac:	6f 81       	ldd	r22, Y+7	; 0x07
    23ae:	78 85       	ldd	r23, Y+8	; 0x08
    23b0:	89 85       	ldd	r24, Y+9	; 0x09
    23b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b4:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    23b8:	dc 01       	movw	r26, r24
    23ba:	cb 01       	movw	r24, r22
    23bc:	9e 83       	std	Y+6, r25	; 0x06
    23be:	8d 83       	std	Y+5, r24	; 0x05
    23c0:	8d 81       	ldd	r24, Y+5	; 0x05
    23c2:	9e 81       	ldd	r25, Y+6	; 0x06
    23c4:	9a 83       	std	Y+2, r25	; 0x02
    23c6:	89 83       	std	Y+1, r24	; 0x01
    23c8:	89 81       	ldd	r24, Y+1	; 0x01
    23ca:	9a 81       	ldd	r25, Y+2	; 0x02
    23cc:	01 97       	sbiw	r24, 0x01	; 1
    23ce:	f1 f7       	brne	.-4      	; 0x23cc <LCD_displayCharacter+0x3c4>
    23d0:	9a 83       	std	Y+2, r25	; 0x02
    23d2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    23d4:	e9 96       	adiw	r28, 0x39	; 57
    23d6:	0f b6       	in	r0, 0x3f	; 63
    23d8:	f8 94       	cli
    23da:	de bf       	out	0x3e, r29	; 62
    23dc:	0f be       	out	0x3f, r0	; 63
    23de:	cd bf       	out	0x3d, r28	; 61
    23e0:	cf 91       	pop	r28
    23e2:	df 91       	pop	r29
    23e4:	08 95       	ret

000023e6 <LCD_displayString>:

/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str) {
    23e6:	df 93       	push	r29
    23e8:	cf 93       	push	r28
    23ea:	00 d0       	rcall	.+0      	; 0x23ec <LCD_displayString+0x6>
    23ec:	0f 92       	push	r0
    23ee:	cd b7       	in	r28, 0x3d	; 61
    23f0:	de b7       	in	r29, 0x3e	; 62
    23f2:	9b 83       	std	Y+3, r25	; 0x03
    23f4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    23f6:	19 82       	std	Y+1, r1	; 0x01
    23f8:	0e c0       	rjmp	.+28     	; 0x2416 <LCD_displayString+0x30>
	while (Str[i] != '\0') {
		LCD_displayCharacter(Str[i]);
    23fa:	89 81       	ldd	r24, Y+1	; 0x01
    23fc:	28 2f       	mov	r18, r24
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	8a 81       	ldd	r24, Y+2	; 0x02
    2402:	9b 81       	ldd	r25, Y+3	; 0x03
    2404:	fc 01       	movw	r30, r24
    2406:	e2 0f       	add	r30, r18
    2408:	f3 1f       	adc	r31, r19
    240a:	80 81       	ld	r24, Z
    240c:	0e 94 04 10 	call	0x2008	; 0x2008 <LCD_displayCharacter>
		i++;
    2410:	89 81       	ldd	r24, Y+1	; 0x01
    2412:	8f 5f       	subi	r24, 0xFF	; 255
    2414:	89 83       	std	Y+1, r24	; 0x01
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str) {
	uint8 i = 0;
	while (Str[i] != '\0') {
    2416:	89 81       	ldd	r24, Y+1	; 0x01
    2418:	28 2f       	mov	r18, r24
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	8a 81       	ldd	r24, Y+2	; 0x02
    241e:	9b 81       	ldd	r25, Y+3	; 0x03
    2420:	fc 01       	movw	r30, r24
    2422:	e2 0f       	add	r30, r18
    2424:	f3 1f       	adc	r31, r19
    2426:	80 81       	ld	r24, Z
    2428:	88 23       	and	r24, r24
    242a:	39 f7       	brne	.-50     	; 0x23fa <LCD_displayString+0x14>
	 {
	 LCD_displayCharacter(*Str);
	 Str++;
	 }
	 *********************************************************/
}
    242c:	0f 90       	pop	r0
    242e:	0f 90       	pop	r0
    2430:	0f 90       	pop	r0
    2432:	cf 91       	pop	r28
    2434:	df 91       	pop	r29
    2436:	08 95       	ret

00002438 <LCD_moveCursor>:

/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row, uint8 col) {
    2438:	df 93       	push	r29
    243a:	cf 93       	push	r28
    243c:	00 d0       	rcall	.+0      	; 0x243e <LCD_moveCursor+0x6>
    243e:	00 d0       	rcall	.+0      	; 0x2440 <LCD_moveCursor+0x8>
    2440:	0f 92       	push	r0
    2442:	cd b7       	in	r28, 0x3d	; 61
    2444:	de b7       	in	r29, 0x3e	; 62
    2446:	8a 83       	std	Y+2, r24	; 0x02
    2448:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch (row) {
    244a:	8a 81       	ldd	r24, Y+2	; 0x02
    244c:	28 2f       	mov	r18, r24
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	3d 83       	std	Y+5, r19	; 0x05
    2452:	2c 83       	std	Y+4, r18	; 0x04
    2454:	8c 81       	ldd	r24, Y+4	; 0x04
    2456:	9d 81       	ldd	r25, Y+5	; 0x05
    2458:	81 30       	cpi	r24, 0x01	; 1
    245a:	91 05       	cpc	r25, r1
    245c:	c1 f0       	breq	.+48     	; 0x248e <LCD_moveCursor+0x56>
    245e:	2c 81       	ldd	r18, Y+4	; 0x04
    2460:	3d 81       	ldd	r19, Y+5	; 0x05
    2462:	22 30       	cpi	r18, 0x02	; 2
    2464:	31 05       	cpc	r19, r1
    2466:	2c f4       	brge	.+10     	; 0x2472 <LCD_moveCursor+0x3a>
    2468:	8c 81       	ldd	r24, Y+4	; 0x04
    246a:	9d 81       	ldd	r25, Y+5	; 0x05
    246c:	00 97       	sbiw	r24, 0x00	; 0
    246e:	61 f0       	breq	.+24     	; 0x2488 <LCD_moveCursor+0x50>
    2470:	19 c0       	rjmp	.+50     	; 0x24a4 <LCD_moveCursor+0x6c>
    2472:	2c 81       	ldd	r18, Y+4	; 0x04
    2474:	3d 81       	ldd	r19, Y+5	; 0x05
    2476:	22 30       	cpi	r18, 0x02	; 2
    2478:	31 05       	cpc	r19, r1
    247a:	69 f0       	breq	.+26     	; 0x2496 <LCD_moveCursor+0x5e>
    247c:	8c 81       	ldd	r24, Y+4	; 0x04
    247e:	9d 81       	ldd	r25, Y+5	; 0x05
    2480:	83 30       	cpi	r24, 0x03	; 3
    2482:	91 05       	cpc	r25, r1
    2484:	61 f0       	breq	.+24     	; 0x249e <LCD_moveCursor+0x66>
    2486:	0e c0       	rjmp	.+28     	; 0x24a4 <LCD_moveCursor+0x6c>
	case 0:
		lcd_memory_address = col;
    2488:	8b 81       	ldd	r24, Y+3	; 0x03
    248a:	89 83       	std	Y+1, r24	; 0x01
    248c:	0b c0       	rjmp	.+22     	; 0x24a4 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address = col + 0x40;
    248e:	8b 81       	ldd	r24, Y+3	; 0x03
    2490:	80 5c       	subi	r24, 0xC0	; 192
    2492:	89 83       	std	Y+1, r24	; 0x01
    2494:	07 c0       	rjmp	.+14     	; 0x24a4 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address = col + 0x10;
    2496:	8b 81       	ldd	r24, Y+3	; 0x03
    2498:	80 5f       	subi	r24, 0xF0	; 240
    249a:	89 83       	std	Y+1, r24	; 0x01
    249c:	03 c0       	rjmp	.+6      	; 0x24a4 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address = col + 0x50;
    249e:	8b 81       	ldd	r24, Y+3	; 0x03
    24a0:	80 5b       	subi	r24, 0xB0	; 176
    24a2:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    24a4:	89 81       	ldd	r24, Y+1	; 0x01
    24a6:	80 68       	ori	r24, 0x80	; 128
    24a8:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <LCD_sendCommand>
}
    24ac:	0f 90       	pop	r0
    24ae:	0f 90       	pop	r0
    24b0:	0f 90       	pop	r0
    24b2:	0f 90       	pop	r0
    24b4:	0f 90       	pop	r0
    24b6:	cf 91       	pop	r28
    24b8:	df 91       	pop	r29
    24ba:	08 95       	ret

000024bc <LCD_displayStringRowColumn>:

/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row, uint8 col, const char *Str) {
    24bc:	df 93       	push	r29
    24be:	cf 93       	push	r28
    24c0:	00 d0       	rcall	.+0      	; 0x24c2 <LCD_displayStringRowColumn+0x6>
    24c2:	00 d0       	rcall	.+0      	; 0x24c4 <LCD_displayStringRowColumn+0x8>
    24c4:	cd b7       	in	r28, 0x3d	; 61
    24c6:	de b7       	in	r29, 0x3e	; 62
    24c8:	89 83       	std	Y+1, r24	; 0x01
    24ca:	6a 83       	std	Y+2, r22	; 0x02
    24cc:	5c 83       	std	Y+4, r21	; 0x04
    24ce:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row, col); /* go to to the required LCD position */
    24d0:	89 81       	ldd	r24, Y+1	; 0x01
    24d2:	6a 81       	ldd	r22, Y+2	; 0x02
    24d4:	0e 94 1c 12 	call	0x2438	; 0x2438 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    24d8:	8b 81       	ldd	r24, Y+3	; 0x03
    24da:	9c 81       	ldd	r25, Y+4	; 0x04
    24dc:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <LCD_displayString>
}
    24e0:	0f 90       	pop	r0
    24e2:	0f 90       	pop	r0
    24e4:	0f 90       	pop	r0
    24e6:	0f 90       	pop	r0
    24e8:	cf 91       	pop	r28
    24ea:	df 91       	pop	r29
    24ec:	08 95       	ret

000024ee <LCD_intgerToString>:

/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data) {
    24ee:	df 93       	push	r29
    24f0:	cf 93       	push	r28
    24f2:	cd b7       	in	r28, 0x3d	; 61
    24f4:	de b7       	in	r29, 0x3e	; 62
    24f6:	62 97       	sbiw	r28, 0x12	; 18
    24f8:	0f b6       	in	r0, 0x3f	; 63
    24fa:	f8 94       	cli
    24fc:	de bf       	out	0x3e, r29	; 62
    24fe:	0f be       	out	0x3f, r0	; 63
    2500:	cd bf       	out	0x3d, r28	; 61
    2502:	9a 8b       	std	Y+18, r25	; 0x12
    2504:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ascii result */
	itoa(data, buff, 10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2506:	89 89       	ldd	r24, Y+17	; 0x11
    2508:	9a 89       	ldd	r25, Y+18	; 0x12
    250a:	9e 01       	movw	r18, r28
    250c:	2f 5f       	subi	r18, 0xFF	; 255
    250e:	3f 4f       	sbci	r19, 0xFF	; 255
    2510:	b9 01       	movw	r22, r18
    2512:	4a e0       	ldi	r20, 0x0A	; 10
    2514:	50 e0       	ldi	r21, 0x00	; 0
    2516:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <itoa>
	LCD_displayString(buff); /* Display the string */
    251a:	ce 01       	movw	r24, r28
    251c:	01 96       	adiw	r24, 0x01	; 1
    251e:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <LCD_displayString>
}
    2522:	62 96       	adiw	r28, 0x12	; 18
    2524:	0f b6       	in	r0, 0x3f	; 63
    2526:	f8 94       	cli
    2528:	de bf       	out	0x3e, r29	; 62
    252a:	0f be       	out	0x3f, r0	; 63
    252c:	cd bf       	out	0x3d, r28	; 61
    252e:	cf 91       	pop	r28
    2530:	df 91       	pop	r29
    2532:	08 95       	ret

00002534 <LCD_clearScreen>:

/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void) {
    2534:	df 93       	push	r29
    2536:	cf 93       	push	r28
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    253c:	81 e0       	ldi	r24, 0x01	; 1
    253e:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <LCD_sendCommand>
}
    2542:	cf 91       	pop	r28
    2544:	df 91       	pop	r29
    2546:	08 95       	ret

00002548 <LDR_getLightIntensity>:
 *
 * Return: unsigned 16-bit integer of light intensity value
 *
 */
uint16 LDR_getLightIntensity(void)
{
    2548:	af 92       	push	r10
    254a:	bf 92       	push	r11
    254c:	cf 92       	push	r12
    254e:	df 92       	push	r13
    2550:	ef 92       	push	r14
    2552:	ff 92       	push	r15
    2554:	0f 93       	push	r16
    2556:	1f 93       	push	r17
    2558:	df 93       	push	r29
    255a:	cf 93       	push	r28
    255c:	cd b7       	in	r28, 0x3d	; 61
    255e:	de b7       	in	r29, 0x3e	; 62
    2560:	c2 55       	subi	r28, 0x52	; 82
    2562:	d0 40       	sbci	r29, 0x00	; 0
    2564:	0f b6       	in	r0, 0x3f	; 63
    2566:	f8 94       	cli
    2568:	de bf       	out	0x3e, r29	; 62
    256a:	0f be       	out	0x3f, r0	; 63
    256c:	cd bf       	out	0x3d, r28	; 61
	ADC_init();
    256e:	0e 94 47 09 	call	0x128e	; 0x128e <ADC_init>
	uint16 ldr_value = 0;
    2572:	1c 82       	std	Y+4, r1	; 0x04
    2574:	1b 82       	std	Y+3, r1	; 0x03
	uint16 adc_value = 0;
    2576:	1a 82       	std	Y+2, r1	; 0x02
    2578:	19 82       	std	Y+1, r1	; 0x01

	/* Read ADC channel where the LDR sensor is connected */
	adc_value = ADC_readChannel(LDR_SENSOR_CHANNEL_ID);
    257a:	80 e0       	ldi	r24, 0x00	; 0
    257c:	0e 94 56 09 	call	0x12ac	; 0x12ac <ADC_readChannel>
    2580:	9a 83       	std	Y+2, r25	; 0x02
    2582:	89 83       	std	Y+1, r24	; 0x01
	/* Calculate the LDR from the ADC value*/
	ldr_value = (uint16) (((uint64) adc_value * LDR_SENSOR_MAX_LIGHT_INTENSITY * ADC_REF_VOLT_VALUE)
    2584:	89 81       	ldd	r24, Y+1	; 0x01
    2586:	9a 81       	ldd	r25, Y+2	; 0x02
    2588:	9c 01       	movw	r18, r24
    258a:	40 e0       	ldi	r20, 0x00	; 0
    258c:	50 e0       	ldi	r21, 0x00	; 0
    258e:	60 e0       	ldi	r22, 0x00	; 0
    2590:	70 e0       	ldi	r23, 0x00	; 0
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	a2 2e       	mov	r10, r18
    2598:	b3 2e       	mov	r11, r19
    259a:	c4 2e       	mov	r12, r20
    259c:	d5 2e       	mov	r13, r21
    259e:	e6 2e       	mov	r14, r22
    25a0:	f7 2e       	mov	r15, r23
    25a2:	08 2f       	mov	r16, r24
    25a4:	19 2f       	mov	r17, r25
    25a6:	2a 2d       	mov	r18, r10
    25a8:	3b 2d       	mov	r19, r11
    25aa:	4c 2d       	mov	r20, r12
    25ac:	5d 2d       	mov	r21, r13
    25ae:	6e 2d       	mov	r22, r14
    25b0:	7f 2d       	mov	r23, r15
    25b2:	80 2f       	mov	r24, r16
    25b4:	91 2f       	mov	r25, r17
    25b6:	02 e0       	ldi	r16, 0x02	; 2
    25b8:	0e 94 41 00 	call	0x82	; 0x82 <__ashldi3>
    25bc:	2d 83       	std	Y+5, r18	; 0x05
    25be:	3e 83       	std	Y+6, r19	; 0x06
    25c0:	4f 83       	std	Y+7, r20	; 0x07
    25c2:	58 87       	std	Y+8, r21	; 0x08
    25c4:	69 87       	std	Y+9, r22	; 0x09
    25c6:	7a 87       	std	Y+10, r23	; 0x0a
    25c8:	8b 87       	std	Y+11, r24	; 0x0b
    25ca:	9c 87       	std	Y+12, r25	; 0x0c
    25cc:	2d 81       	ldd	r18, Y+5	; 0x05
    25ce:	3e 81       	ldd	r19, Y+6	; 0x06
    25d0:	4f 81       	ldd	r20, Y+7	; 0x07
    25d2:	58 85       	ldd	r21, Y+8	; 0x08
    25d4:	69 85       	ldd	r22, Y+9	; 0x09
    25d6:	7a 85       	ldd	r23, Y+10	; 0x0a
    25d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    25da:	9c 85       	ldd	r25, Y+12	; 0x0c
    25dc:	02 e0       	ldi	r16, 0x02	; 2
    25de:	0e 94 41 00 	call	0x82	; 0x82 <__ashldi3>
    25e2:	2d 87       	std	Y+13, r18	; 0x0d
    25e4:	3e 87       	std	Y+14, r19	; 0x0e
    25e6:	4f 87       	std	Y+15, r20	; 0x0f
    25e8:	58 8b       	std	Y+16, r21	; 0x10
    25ea:	69 8b       	std	Y+17, r22	; 0x11
    25ec:	7a 8b       	std	Y+18, r23	; 0x12
    25ee:	8b 8b       	std	Y+19, r24	; 0x13
    25f0:	9c 8b       	std	Y+20, r25	; 0x14
    25f2:	8d 81       	ldd	r24, Y+5	; 0x05
    25f4:	9d 85       	ldd	r25, Y+13	; 0x0d
    25f6:	89 0f       	add	r24, r25
    25f8:	8d 8b       	std	Y+21, r24	; 0x15
    25fa:	81 e0       	ldi	r24, 0x01	; 1
    25fc:	8d 8f       	std	Y+29, r24	; 0x1d
    25fe:	9d 89       	ldd	r25, Y+21	; 0x15
    2600:	8d 81       	ldd	r24, Y+5	; 0x05
    2602:	98 17       	cp	r25, r24
    2604:	08 f0       	brcs	.+2      	; 0x2608 <LDR_getLightIntensity+0xc0>
    2606:	1d 8e       	std	Y+29, r1	; 0x1d
    2608:	9e 81       	ldd	r25, Y+6	; 0x06
    260a:	8e 85       	ldd	r24, Y+14	; 0x0e
    260c:	98 0f       	add	r25, r24
    260e:	9e 8b       	std	Y+22, r25	; 0x16
    2610:	91 e0       	ldi	r25, 0x01	; 1
    2612:	9e 8f       	std	Y+30, r25	; 0x1e
    2614:	8e 89       	ldd	r24, Y+22	; 0x16
    2616:	9e 81       	ldd	r25, Y+6	; 0x06
    2618:	89 17       	cp	r24, r25
    261a:	08 f0       	brcs	.+2      	; 0x261e <LDR_getLightIntensity+0xd6>
    261c:	1e 8e       	std	Y+30, r1	; 0x1e
    261e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2620:	9e 89       	ldd	r25, Y+22	; 0x16
    2622:	89 0f       	add	r24, r25
    2624:	8f 8f       	std	Y+31, r24	; 0x1f
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	88 a3       	std	Y+32, r24	; 0x20
    262a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    262c:	8e 89       	ldd	r24, Y+22	; 0x16
    262e:	98 17       	cp	r25, r24
    2630:	08 f0       	brcs	.+2      	; 0x2634 <LDR_getLightIntensity+0xec>
    2632:	18 a2       	std	Y+32, r1	; 0x20
    2634:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2636:	88 a1       	ldd	r24, Y+32	; 0x20
    2638:	98 2b       	or	r25, r24
    263a:	9e 8f       	std	Y+30, r25	; 0x1e
    263c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    263e:	9e 8b       	std	Y+22, r25	; 0x16
    2640:	8f 81       	ldd	r24, Y+7	; 0x07
    2642:	9f 85       	ldd	r25, Y+15	; 0x0f
    2644:	89 0f       	add	r24, r25
    2646:	8f 8b       	std	Y+23, r24	; 0x17
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	89 a3       	std	Y+33, r24	; 0x21
    264c:	9f 89       	ldd	r25, Y+23	; 0x17
    264e:	8f 81       	ldd	r24, Y+7	; 0x07
    2650:	98 17       	cp	r25, r24
    2652:	08 f0       	brcs	.+2      	; 0x2656 <LDR_getLightIntensity+0x10e>
    2654:	19 a2       	std	Y+33, r1	; 0x21
    2656:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2658:	8f 89       	ldd	r24, Y+23	; 0x17
    265a:	98 0f       	add	r25, r24
    265c:	9a a3       	std	Y+34, r25	; 0x22
    265e:	91 e0       	ldi	r25, 0x01	; 1
    2660:	9b a3       	std	Y+35, r25	; 0x23
    2662:	8a a1       	ldd	r24, Y+34	; 0x22
    2664:	9f 89       	ldd	r25, Y+23	; 0x17
    2666:	89 17       	cp	r24, r25
    2668:	08 f0       	brcs	.+2      	; 0x266c <LDR_getLightIntensity+0x124>
    266a:	1b a2       	std	Y+35, r1	; 0x23
    266c:	89 a1       	ldd	r24, Y+33	; 0x21
    266e:	9b a1       	ldd	r25, Y+35	; 0x23
    2670:	89 2b       	or	r24, r25
    2672:	89 a3       	std	Y+33, r24	; 0x21
    2674:	8a a1       	ldd	r24, Y+34	; 0x22
    2676:	8f 8b       	std	Y+23, r24	; 0x17
    2678:	98 85       	ldd	r25, Y+8	; 0x08
    267a:	88 89       	ldd	r24, Y+16	; 0x10
    267c:	98 0f       	add	r25, r24
    267e:	98 8f       	std	Y+24, r25	; 0x18
    2680:	91 e0       	ldi	r25, 0x01	; 1
    2682:	9c a3       	std	Y+36, r25	; 0x24
    2684:	88 8d       	ldd	r24, Y+24	; 0x18
    2686:	98 85       	ldd	r25, Y+8	; 0x08
    2688:	89 17       	cp	r24, r25
    268a:	08 f0       	brcs	.+2      	; 0x268e <LDR_getLightIntensity+0x146>
    268c:	1c a2       	std	Y+36, r1	; 0x24
    268e:	89 a1       	ldd	r24, Y+33	; 0x21
    2690:	98 8d       	ldd	r25, Y+24	; 0x18
    2692:	89 0f       	add	r24, r25
    2694:	8d a3       	std	Y+37, r24	; 0x25
    2696:	81 e0       	ldi	r24, 0x01	; 1
    2698:	8e a3       	std	Y+38, r24	; 0x26
    269a:	9d a1       	ldd	r25, Y+37	; 0x25
    269c:	88 8d       	ldd	r24, Y+24	; 0x18
    269e:	98 17       	cp	r25, r24
    26a0:	08 f0       	brcs	.+2      	; 0x26a4 <LDR_getLightIntensity+0x15c>
    26a2:	1e a2       	std	Y+38, r1	; 0x26
    26a4:	9c a1       	ldd	r25, Y+36	; 0x24
    26a6:	8e a1       	ldd	r24, Y+38	; 0x26
    26a8:	98 2b       	or	r25, r24
    26aa:	9c a3       	std	Y+36, r25	; 0x24
    26ac:	9d a1       	ldd	r25, Y+37	; 0x25
    26ae:	98 8f       	std	Y+24, r25	; 0x18
    26b0:	89 85       	ldd	r24, Y+9	; 0x09
    26b2:	99 89       	ldd	r25, Y+17	; 0x11
    26b4:	89 0f       	add	r24, r25
    26b6:	89 8f       	std	Y+25, r24	; 0x19
    26b8:	81 e0       	ldi	r24, 0x01	; 1
    26ba:	8f a3       	std	Y+39, r24	; 0x27
    26bc:	99 8d       	ldd	r25, Y+25	; 0x19
    26be:	89 85       	ldd	r24, Y+9	; 0x09
    26c0:	98 17       	cp	r25, r24
    26c2:	08 f0       	brcs	.+2      	; 0x26c6 <LDR_getLightIntensity+0x17e>
    26c4:	1f a2       	std	Y+39, r1	; 0x27
    26c6:	9c a1       	ldd	r25, Y+36	; 0x24
    26c8:	89 8d       	ldd	r24, Y+25	; 0x19
    26ca:	98 0f       	add	r25, r24
    26cc:	98 a7       	std	Y+40, r25	; 0x28
    26ce:	91 e0       	ldi	r25, 0x01	; 1
    26d0:	99 a7       	std	Y+41, r25	; 0x29
    26d2:	88 a5       	ldd	r24, Y+40	; 0x28
    26d4:	99 8d       	ldd	r25, Y+25	; 0x19
    26d6:	89 17       	cp	r24, r25
    26d8:	08 f0       	brcs	.+2      	; 0x26dc <LDR_getLightIntensity+0x194>
    26da:	19 a6       	std	Y+41, r1	; 0x29
    26dc:	8f a1       	ldd	r24, Y+39	; 0x27
    26de:	99 a5       	ldd	r25, Y+41	; 0x29
    26e0:	89 2b       	or	r24, r25
    26e2:	8f a3       	std	Y+39, r24	; 0x27
    26e4:	88 a5       	ldd	r24, Y+40	; 0x28
    26e6:	89 8f       	std	Y+25, r24	; 0x19
    26e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ea:	8a 89       	ldd	r24, Y+18	; 0x12
    26ec:	98 0f       	add	r25, r24
    26ee:	9a 8f       	std	Y+26, r25	; 0x1a
    26f0:	91 e0       	ldi	r25, 0x01	; 1
    26f2:	9a a7       	std	Y+42, r25	; 0x2a
    26f4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    26f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26f8:	89 17       	cp	r24, r25
    26fa:	08 f0       	brcs	.+2      	; 0x26fe <LDR_getLightIntensity+0x1b6>
    26fc:	1a a6       	std	Y+42, r1	; 0x2a
    26fe:	8f a1       	ldd	r24, Y+39	; 0x27
    2700:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2702:	89 0f       	add	r24, r25
    2704:	8b a7       	std	Y+43, r24	; 0x2b
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	8c a7       	std	Y+44, r24	; 0x2c
    270a:	9b a5       	ldd	r25, Y+43	; 0x2b
    270c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    270e:	98 17       	cp	r25, r24
    2710:	08 f0       	brcs	.+2      	; 0x2714 <LDR_getLightIntensity+0x1cc>
    2712:	1c a6       	std	Y+44, r1	; 0x2c
    2714:	9a a5       	ldd	r25, Y+42	; 0x2a
    2716:	8c a5       	ldd	r24, Y+44	; 0x2c
    2718:	98 2b       	or	r25, r24
    271a:	9a a7       	std	Y+42, r25	; 0x2a
    271c:	9b a5       	ldd	r25, Y+43	; 0x2b
    271e:	9a 8f       	std	Y+26, r25	; 0x1a
    2720:	8b 85       	ldd	r24, Y+11	; 0x0b
    2722:	9b 89       	ldd	r25, Y+19	; 0x13
    2724:	89 0f       	add	r24, r25
    2726:	8b 8f       	std	Y+27, r24	; 0x1b
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	8d a7       	std	Y+45, r24	; 0x2d
    272c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    272e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2730:	98 17       	cp	r25, r24
    2732:	08 f0       	brcs	.+2      	; 0x2736 <LDR_getLightIntensity+0x1ee>
    2734:	1d a6       	std	Y+45, r1	; 0x2d
    2736:	9a a5       	ldd	r25, Y+42	; 0x2a
    2738:	8b 8d       	ldd	r24, Y+27	; 0x1b
    273a:	98 0f       	add	r25, r24
    273c:	9e a7       	std	Y+46, r25	; 0x2e
    273e:	91 e0       	ldi	r25, 0x01	; 1
    2740:	9f a7       	std	Y+47, r25	; 0x2f
    2742:	8e a5       	ldd	r24, Y+46	; 0x2e
    2744:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2746:	89 17       	cp	r24, r25
    2748:	08 f0       	brcs	.+2      	; 0x274c <LDR_getLightIntensity+0x204>
    274a:	1f a6       	std	Y+47, r1	; 0x2f
    274c:	8d a5       	ldd	r24, Y+45	; 0x2d
    274e:	9f a5       	ldd	r25, Y+47	; 0x2f
    2750:	89 2b       	or	r24, r25
    2752:	8d a7       	std	Y+45, r24	; 0x2d
    2754:	8e a5       	ldd	r24, Y+46	; 0x2e
    2756:	8b 8f       	std	Y+27, r24	; 0x1b
    2758:	9c 85       	ldd	r25, Y+12	; 0x0c
    275a:	8c 89       	ldd	r24, Y+20	; 0x14
    275c:	98 0f       	add	r25, r24
    275e:	9c 8f       	std	Y+28, r25	; 0x1c
    2760:	8d a5       	ldd	r24, Y+45	; 0x2d
    2762:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2764:	89 0f       	add	r24, r25
    2766:	8c 8f       	std	Y+28, r24	; 0x1c
    2768:	8d 89       	ldd	r24, Y+21	; 0x15
    276a:	8d 83       	std	Y+5, r24	; 0x05
    276c:	9e 89       	ldd	r25, Y+22	; 0x16
    276e:	9e 83       	std	Y+6, r25	; 0x06
    2770:	8f 89       	ldd	r24, Y+23	; 0x17
    2772:	8f 83       	std	Y+7, r24	; 0x07
    2774:	98 8d       	ldd	r25, Y+24	; 0x18
    2776:	98 87       	std	Y+8, r25	; 0x08
    2778:	89 8d       	ldd	r24, Y+25	; 0x19
    277a:	89 87       	std	Y+9, r24	; 0x09
    277c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    277e:	9a 87       	std	Y+10, r25	; 0x0a
    2780:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2782:	8b 87       	std	Y+11, r24	; 0x0b
    2784:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2786:	9c 87       	std	Y+12, r25	; 0x0c
    2788:	2d 81       	ldd	r18, Y+5	; 0x05
    278a:	3e 81       	ldd	r19, Y+6	; 0x06
    278c:	4f 81       	ldd	r20, Y+7	; 0x07
    278e:	58 85       	ldd	r21, Y+8	; 0x08
    2790:	69 85       	ldd	r22, Y+9	; 0x09
    2792:	7a 85       	ldd	r23, Y+10	; 0x0a
    2794:	8b 85       	ldd	r24, Y+11	; 0x0b
    2796:	9c 85       	ldd	r25, Y+12	; 0x0c
    2798:	02 e0       	ldi	r16, 0x02	; 2
    279a:	0e 94 41 00 	call	0x82	; 0x82 <__ashldi3>
    279e:	28 ab       	std	Y+48, r18	; 0x30
    27a0:	39 ab       	std	Y+49, r19	; 0x31
    27a2:	4a ab       	std	Y+50, r20	; 0x32
    27a4:	5b ab       	std	Y+51, r21	; 0x33
    27a6:	6c ab       	std	Y+52, r22	; 0x34
    27a8:	7d ab       	std	Y+53, r23	; 0x35
    27aa:	8e ab       	std	Y+54, r24	; 0x36
    27ac:	9f ab       	std	Y+55, r25	; 0x37
    27ae:	8d 81       	ldd	r24, Y+5	; 0x05
    27b0:	98 a9       	ldd	r25, Y+48	; 0x30
    27b2:	89 0f       	add	r24, r25
    27b4:	88 af       	std	Y+56, r24	; 0x38
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	21 96       	adiw	r28, 0x01	; 1
    27ba:	8f af       	std	Y+63, r24	; 0x3f
    27bc:	21 97       	sbiw	r28, 0x01	; 1
    27be:	98 ad       	ldd	r25, Y+56	; 0x38
    27c0:	8d 81       	ldd	r24, Y+5	; 0x05
    27c2:	98 17       	cp	r25, r24
    27c4:	18 f0       	brcs	.+6      	; 0x27cc <LDR_getLightIntensity+0x284>
    27c6:	21 96       	adiw	r28, 0x01	; 1
    27c8:	1f ae       	std	Y+63, r1	; 0x3f
    27ca:	21 97       	sbiw	r28, 0x01	; 1
    27cc:	9e 81       	ldd	r25, Y+6	; 0x06
    27ce:	89 a9       	ldd	r24, Y+49	; 0x31
    27d0:	98 0f       	add	r25, r24
    27d2:	99 af       	std	Y+57, r25	; 0x39
    27d4:	91 e0       	ldi	r25, 0x01	; 1
    27d6:	22 96       	adiw	r28, 0x02	; 2
    27d8:	9f af       	std	Y+63, r25	; 0x3f
    27da:	22 97       	sbiw	r28, 0x02	; 2
    27dc:	89 ad       	ldd	r24, Y+57	; 0x39
    27de:	9e 81       	ldd	r25, Y+6	; 0x06
    27e0:	89 17       	cp	r24, r25
    27e2:	18 f0       	brcs	.+6      	; 0x27ea <LDR_getLightIntensity+0x2a2>
    27e4:	22 96       	adiw	r28, 0x02	; 2
    27e6:	1f ae       	std	Y+63, r1	; 0x3f
    27e8:	22 97       	sbiw	r28, 0x02	; 2
    27ea:	21 96       	adiw	r28, 0x01	; 1
    27ec:	8f ad       	ldd	r24, Y+63	; 0x3f
    27ee:	21 97       	sbiw	r28, 0x01	; 1
    27f0:	99 ad       	ldd	r25, Y+57	; 0x39
    27f2:	89 0f       	add	r24, r25
    27f4:	23 96       	adiw	r28, 0x03	; 3
    27f6:	8f af       	std	Y+63, r24	; 0x3f
    27f8:	23 97       	sbiw	r28, 0x03	; 3
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	24 96       	adiw	r28, 0x04	; 4
    27fe:	8f af       	std	Y+63, r24	; 0x3f
    2800:	24 97       	sbiw	r28, 0x04	; 4
    2802:	23 96       	adiw	r28, 0x03	; 3
    2804:	9f ad       	ldd	r25, Y+63	; 0x3f
    2806:	23 97       	sbiw	r28, 0x03	; 3
    2808:	89 ad       	ldd	r24, Y+57	; 0x39
    280a:	98 17       	cp	r25, r24
    280c:	18 f0       	brcs	.+6      	; 0x2814 <LDR_getLightIntensity+0x2cc>
    280e:	24 96       	adiw	r28, 0x04	; 4
    2810:	1f ae       	std	Y+63, r1	; 0x3f
    2812:	24 97       	sbiw	r28, 0x04	; 4
    2814:	22 96       	adiw	r28, 0x02	; 2
    2816:	9f ad       	ldd	r25, Y+63	; 0x3f
    2818:	22 97       	sbiw	r28, 0x02	; 2
    281a:	24 96       	adiw	r28, 0x04	; 4
    281c:	8f ad       	ldd	r24, Y+63	; 0x3f
    281e:	24 97       	sbiw	r28, 0x04	; 4
    2820:	98 2b       	or	r25, r24
    2822:	22 96       	adiw	r28, 0x02	; 2
    2824:	9f af       	std	Y+63, r25	; 0x3f
    2826:	22 97       	sbiw	r28, 0x02	; 2
    2828:	23 96       	adiw	r28, 0x03	; 3
    282a:	9f ad       	ldd	r25, Y+63	; 0x3f
    282c:	23 97       	sbiw	r28, 0x03	; 3
    282e:	99 af       	std	Y+57, r25	; 0x39
    2830:	8f 81       	ldd	r24, Y+7	; 0x07
    2832:	9a a9       	ldd	r25, Y+50	; 0x32
    2834:	89 0f       	add	r24, r25
    2836:	8a af       	std	Y+58, r24	; 0x3a
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	25 96       	adiw	r28, 0x05	; 5
    283c:	8f af       	std	Y+63, r24	; 0x3f
    283e:	25 97       	sbiw	r28, 0x05	; 5
    2840:	9a ad       	ldd	r25, Y+58	; 0x3a
    2842:	8f 81       	ldd	r24, Y+7	; 0x07
    2844:	98 17       	cp	r25, r24
    2846:	18 f0       	brcs	.+6      	; 0x284e <LDR_getLightIntensity+0x306>
    2848:	25 96       	adiw	r28, 0x05	; 5
    284a:	1f ae       	std	Y+63, r1	; 0x3f
    284c:	25 97       	sbiw	r28, 0x05	; 5
    284e:	22 96       	adiw	r28, 0x02	; 2
    2850:	9f ad       	ldd	r25, Y+63	; 0x3f
    2852:	22 97       	sbiw	r28, 0x02	; 2
    2854:	8a ad       	ldd	r24, Y+58	; 0x3a
    2856:	98 0f       	add	r25, r24
    2858:	26 96       	adiw	r28, 0x06	; 6
    285a:	9f af       	std	Y+63, r25	; 0x3f
    285c:	26 97       	sbiw	r28, 0x06	; 6
    285e:	91 e0       	ldi	r25, 0x01	; 1
    2860:	27 96       	adiw	r28, 0x07	; 7
    2862:	9f af       	std	Y+63, r25	; 0x3f
    2864:	27 97       	sbiw	r28, 0x07	; 7
    2866:	26 96       	adiw	r28, 0x06	; 6
    2868:	8f ad       	ldd	r24, Y+63	; 0x3f
    286a:	26 97       	sbiw	r28, 0x06	; 6
    286c:	9a ad       	ldd	r25, Y+58	; 0x3a
    286e:	89 17       	cp	r24, r25
    2870:	18 f0       	brcs	.+6      	; 0x2878 <LDR_getLightIntensity+0x330>
    2872:	27 96       	adiw	r28, 0x07	; 7
    2874:	1f ae       	std	Y+63, r1	; 0x3f
    2876:	27 97       	sbiw	r28, 0x07	; 7
    2878:	25 96       	adiw	r28, 0x05	; 5
    287a:	8f ad       	ldd	r24, Y+63	; 0x3f
    287c:	25 97       	sbiw	r28, 0x05	; 5
    287e:	27 96       	adiw	r28, 0x07	; 7
    2880:	9f ad       	ldd	r25, Y+63	; 0x3f
    2882:	27 97       	sbiw	r28, 0x07	; 7
    2884:	89 2b       	or	r24, r25
    2886:	25 96       	adiw	r28, 0x05	; 5
    2888:	8f af       	std	Y+63, r24	; 0x3f
    288a:	25 97       	sbiw	r28, 0x05	; 5
    288c:	26 96       	adiw	r28, 0x06	; 6
    288e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2890:	26 97       	sbiw	r28, 0x06	; 6
    2892:	8a af       	std	Y+58, r24	; 0x3a
    2894:	98 85       	ldd	r25, Y+8	; 0x08
    2896:	8b a9       	ldd	r24, Y+51	; 0x33
    2898:	98 0f       	add	r25, r24
    289a:	9b af       	std	Y+59, r25	; 0x3b
    289c:	91 e0       	ldi	r25, 0x01	; 1
    289e:	28 96       	adiw	r28, 0x08	; 8
    28a0:	9f af       	std	Y+63, r25	; 0x3f
    28a2:	28 97       	sbiw	r28, 0x08	; 8
    28a4:	8b ad       	ldd	r24, Y+59	; 0x3b
    28a6:	98 85       	ldd	r25, Y+8	; 0x08
    28a8:	89 17       	cp	r24, r25
    28aa:	18 f0       	brcs	.+6      	; 0x28b2 <LDR_getLightIntensity+0x36a>
    28ac:	28 96       	adiw	r28, 0x08	; 8
    28ae:	1f ae       	std	Y+63, r1	; 0x3f
    28b0:	28 97       	sbiw	r28, 0x08	; 8
    28b2:	25 96       	adiw	r28, 0x05	; 5
    28b4:	8f ad       	ldd	r24, Y+63	; 0x3f
    28b6:	25 97       	sbiw	r28, 0x05	; 5
    28b8:	9b ad       	ldd	r25, Y+59	; 0x3b
    28ba:	89 0f       	add	r24, r25
    28bc:	29 96       	adiw	r28, 0x09	; 9
    28be:	8f af       	std	Y+63, r24	; 0x3f
    28c0:	29 97       	sbiw	r28, 0x09	; 9
    28c2:	81 e0       	ldi	r24, 0x01	; 1
    28c4:	2a 96       	adiw	r28, 0x0a	; 10
    28c6:	8f af       	std	Y+63, r24	; 0x3f
    28c8:	2a 97       	sbiw	r28, 0x0a	; 10
    28ca:	29 96       	adiw	r28, 0x09	; 9
    28cc:	9f ad       	ldd	r25, Y+63	; 0x3f
    28ce:	29 97       	sbiw	r28, 0x09	; 9
    28d0:	8b ad       	ldd	r24, Y+59	; 0x3b
    28d2:	98 17       	cp	r25, r24
    28d4:	18 f0       	brcs	.+6      	; 0x28dc <LDR_getLightIntensity+0x394>
    28d6:	2a 96       	adiw	r28, 0x0a	; 10
    28d8:	1f ae       	std	Y+63, r1	; 0x3f
    28da:	2a 97       	sbiw	r28, 0x0a	; 10
    28dc:	28 96       	adiw	r28, 0x08	; 8
    28de:	9f ad       	ldd	r25, Y+63	; 0x3f
    28e0:	28 97       	sbiw	r28, 0x08	; 8
    28e2:	2a 96       	adiw	r28, 0x0a	; 10
    28e4:	8f ad       	ldd	r24, Y+63	; 0x3f
    28e6:	2a 97       	sbiw	r28, 0x0a	; 10
    28e8:	98 2b       	or	r25, r24
    28ea:	28 96       	adiw	r28, 0x08	; 8
    28ec:	9f af       	std	Y+63, r25	; 0x3f
    28ee:	28 97       	sbiw	r28, 0x08	; 8
    28f0:	29 96       	adiw	r28, 0x09	; 9
    28f2:	9f ad       	ldd	r25, Y+63	; 0x3f
    28f4:	29 97       	sbiw	r28, 0x09	; 9
    28f6:	9b af       	std	Y+59, r25	; 0x3b
    28f8:	89 85       	ldd	r24, Y+9	; 0x09
    28fa:	9c a9       	ldd	r25, Y+52	; 0x34
    28fc:	89 0f       	add	r24, r25
    28fe:	8c af       	std	Y+60, r24	; 0x3c
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	2b 96       	adiw	r28, 0x0b	; 11
    2904:	8f af       	std	Y+63, r24	; 0x3f
    2906:	2b 97       	sbiw	r28, 0x0b	; 11
    2908:	9c ad       	ldd	r25, Y+60	; 0x3c
    290a:	89 85       	ldd	r24, Y+9	; 0x09
    290c:	98 17       	cp	r25, r24
    290e:	18 f0       	brcs	.+6      	; 0x2916 <LDR_getLightIntensity+0x3ce>
    2910:	2b 96       	adiw	r28, 0x0b	; 11
    2912:	1f ae       	std	Y+63, r1	; 0x3f
    2914:	2b 97       	sbiw	r28, 0x0b	; 11
    2916:	28 96       	adiw	r28, 0x08	; 8
    2918:	9f ad       	ldd	r25, Y+63	; 0x3f
    291a:	28 97       	sbiw	r28, 0x08	; 8
    291c:	8c ad       	ldd	r24, Y+60	; 0x3c
    291e:	98 0f       	add	r25, r24
    2920:	2c 96       	adiw	r28, 0x0c	; 12
    2922:	9f af       	std	Y+63, r25	; 0x3f
    2924:	2c 97       	sbiw	r28, 0x0c	; 12
    2926:	91 e0       	ldi	r25, 0x01	; 1
    2928:	2d 96       	adiw	r28, 0x0d	; 13
    292a:	9f af       	std	Y+63, r25	; 0x3f
    292c:	2d 97       	sbiw	r28, 0x0d	; 13
    292e:	2c 96       	adiw	r28, 0x0c	; 12
    2930:	8f ad       	ldd	r24, Y+63	; 0x3f
    2932:	2c 97       	sbiw	r28, 0x0c	; 12
    2934:	9c ad       	ldd	r25, Y+60	; 0x3c
    2936:	89 17       	cp	r24, r25
    2938:	18 f0       	brcs	.+6      	; 0x2940 <LDR_getLightIntensity+0x3f8>
    293a:	2d 96       	adiw	r28, 0x0d	; 13
    293c:	1f ae       	std	Y+63, r1	; 0x3f
    293e:	2d 97       	sbiw	r28, 0x0d	; 13
    2940:	2b 96       	adiw	r28, 0x0b	; 11
    2942:	8f ad       	ldd	r24, Y+63	; 0x3f
    2944:	2b 97       	sbiw	r28, 0x0b	; 11
    2946:	2d 96       	adiw	r28, 0x0d	; 13
    2948:	9f ad       	ldd	r25, Y+63	; 0x3f
    294a:	2d 97       	sbiw	r28, 0x0d	; 13
    294c:	89 2b       	or	r24, r25
    294e:	2b 96       	adiw	r28, 0x0b	; 11
    2950:	8f af       	std	Y+63, r24	; 0x3f
    2952:	2b 97       	sbiw	r28, 0x0b	; 11
    2954:	2c 96       	adiw	r28, 0x0c	; 12
    2956:	8f ad       	ldd	r24, Y+63	; 0x3f
    2958:	2c 97       	sbiw	r28, 0x0c	; 12
    295a:	8c af       	std	Y+60, r24	; 0x3c
    295c:	9a 85       	ldd	r25, Y+10	; 0x0a
    295e:	8d a9       	ldd	r24, Y+53	; 0x35
    2960:	98 0f       	add	r25, r24
    2962:	9d af       	std	Y+61, r25	; 0x3d
    2964:	91 e0       	ldi	r25, 0x01	; 1
    2966:	2e 96       	adiw	r28, 0x0e	; 14
    2968:	9f af       	std	Y+63, r25	; 0x3f
    296a:	2e 97       	sbiw	r28, 0x0e	; 14
    296c:	8d ad       	ldd	r24, Y+61	; 0x3d
    296e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2970:	89 17       	cp	r24, r25
    2972:	18 f0       	brcs	.+6      	; 0x297a <LDR_getLightIntensity+0x432>
    2974:	2e 96       	adiw	r28, 0x0e	; 14
    2976:	1f ae       	std	Y+63, r1	; 0x3f
    2978:	2e 97       	sbiw	r28, 0x0e	; 14
    297a:	2b 96       	adiw	r28, 0x0b	; 11
    297c:	8f ad       	ldd	r24, Y+63	; 0x3f
    297e:	2b 97       	sbiw	r28, 0x0b	; 11
    2980:	9d ad       	ldd	r25, Y+61	; 0x3d
    2982:	89 0f       	add	r24, r25
    2984:	2f 96       	adiw	r28, 0x0f	; 15
    2986:	8f af       	std	Y+63, r24	; 0x3f
    2988:	2f 97       	sbiw	r28, 0x0f	; 15
    298a:	81 e0       	ldi	r24, 0x01	; 1
    298c:	60 96       	adiw	r28, 0x10	; 16
    298e:	8f af       	std	Y+63, r24	; 0x3f
    2990:	60 97       	sbiw	r28, 0x10	; 16
    2992:	2f 96       	adiw	r28, 0x0f	; 15
    2994:	9f ad       	ldd	r25, Y+63	; 0x3f
    2996:	2f 97       	sbiw	r28, 0x0f	; 15
    2998:	8d ad       	ldd	r24, Y+61	; 0x3d
    299a:	98 17       	cp	r25, r24
    299c:	18 f0       	brcs	.+6      	; 0x29a4 <LDR_getLightIntensity+0x45c>
    299e:	60 96       	adiw	r28, 0x10	; 16
    29a0:	1f ae       	std	Y+63, r1	; 0x3f
    29a2:	60 97       	sbiw	r28, 0x10	; 16
    29a4:	2e 96       	adiw	r28, 0x0e	; 14
    29a6:	9f ad       	ldd	r25, Y+63	; 0x3f
    29a8:	2e 97       	sbiw	r28, 0x0e	; 14
    29aa:	60 96       	adiw	r28, 0x10	; 16
    29ac:	8f ad       	ldd	r24, Y+63	; 0x3f
    29ae:	60 97       	sbiw	r28, 0x10	; 16
    29b0:	98 2b       	or	r25, r24
    29b2:	2e 96       	adiw	r28, 0x0e	; 14
    29b4:	9f af       	std	Y+63, r25	; 0x3f
    29b6:	2e 97       	sbiw	r28, 0x0e	; 14
    29b8:	2f 96       	adiw	r28, 0x0f	; 15
    29ba:	9f ad       	ldd	r25, Y+63	; 0x3f
    29bc:	2f 97       	sbiw	r28, 0x0f	; 15
    29be:	9d af       	std	Y+61, r25	; 0x3d
    29c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    29c2:	9e a9       	ldd	r25, Y+54	; 0x36
    29c4:	89 0f       	add	r24, r25
    29c6:	8e af       	std	Y+62, r24	; 0x3e
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	61 96       	adiw	r28, 0x11	; 17
    29cc:	8f af       	std	Y+63, r24	; 0x3f
    29ce:	61 97       	sbiw	r28, 0x11	; 17
    29d0:	9e ad       	ldd	r25, Y+62	; 0x3e
    29d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    29d4:	98 17       	cp	r25, r24
    29d6:	18 f0       	brcs	.+6      	; 0x29de <LDR_getLightIntensity+0x496>
    29d8:	61 96       	adiw	r28, 0x11	; 17
    29da:	1f ae       	std	Y+63, r1	; 0x3f
    29dc:	61 97       	sbiw	r28, 0x11	; 17
    29de:	2e 96       	adiw	r28, 0x0e	; 14
    29e0:	9f ad       	ldd	r25, Y+63	; 0x3f
    29e2:	2e 97       	sbiw	r28, 0x0e	; 14
    29e4:	8e ad       	ldd	r24, Y+62	; 0x3e
    29e6:	98 0f       	add	r25, r24
    29e8:	62 96       	adiw	r28, 0x12	; 18
    29ea:	9f af       	std	Y+63, r25	; 0x3f
    29ec:	62 97       	sbiw	r28, 0x12	; 18
    29ee:	91 e0       	ldi	r25, 0x01	; 1
    29f0:	63 96       	adiw	r28, 0x13	; 19
    29f2:	9f af       	std	Y+63, r25	; 0x3f
    29f4:	63 97       	sbiw	r28, 0x13	; 19
    29f6:	62 96       	adiw	r28, 0x12	; 18
    29f8:	8f ad       	ldd	r24, Y+63	; 0x3f
    29fa:	62 97       	sbiw	r28, 0x12	; 18
    29fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    29fe:	89 17       	cp	r24, r25
    2a00:	18 f0       	brcs	.+6      	; 0x2a08 <LDR_getLightIntensity+0x4c0>
    2a02:	63 96       	adiw	r28, 0x13	; 19
    2a04:	1f ae       	std	Y+63, r1	; 0x3f
    2a06:	63 97       	sbiw	r28, 0x13	; 19
    2a08:	61 96       	adiw	r28, 0x11	; 17
    2a0a:	8f ad       	ldd	r24, Y+63	; 0x3f
    2a0c:	61 97       	sbiw	r28, 0x11	; 17
    2a0e:	63 96       	adiw	r28, 0x13	; 19
    2a10:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a12:	63 97       	sbiw	r28, 0x13	; 19
    2a14:	89 2b       	or	r24, r25
    2a16:	61 96       	adiw	r28, 0x11	; 17
    2a18:	8f af       	std	Y+63, r24	; 0x3f
    2a1a:	61 97       	sbiw	r28, 0x11	; 17
    2a1c:	62 96       	adiw	r28, 0x12	; 18
    2a1e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2a20:	62 97       	sbiw	r28, 0x12	; 18
    2a22:	8e af       	std	Y+62, r24	; 0x3e
    2a24:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a26:	8f a9       	ldd	r24, Y+55	; 0x37
    2a28:	98 0f       	add	r25, r24
    2a2a:	9f af       	std	Y+63, r25	; 0x3f
    2a2c:	61 96       	adiw	r28, 0x11	; 17
    2a2e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2a30:	61 97       	sbiw	r28, 0x11	; 17
    2a32:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a34:	89 0f       	add	r24, r25
    2a36:	8f af       	std	Y+63, r24	; 0x3f
    2a38:	a8 ac       	ldd	r10, Y+56	; 0x38
    2a3a:	b9 ac       	ldd	r11, Y+57	; 0x39
    2a3c:	ca ac       	ldd	r12, Y+58	; 0x3a
    2a3e:	db ac       	ldd	r13, Y+59	; 0x3b
    2a40:	ec ac       	ldd	r14, Y+60	; 0x3c
    2a42:	fd ac       	ldd	r15, Y+61	; 0x3d
    2a44:	0e ad       	ldd	r16, Y+62	; 0x3e
    2a46:	1f ad       	ldd	r17, Y+63	; 0x3f
    2a48:	2a 2d       	mov	r18, r10
    2a4a:	3b 2d       	mov	r19, r11
    2a4c:	4c 2d       	mov	r20, r12
    2a4e:	5d 2d       	mov	r21, r13
    2a50:	6e 2d       	mov	r22, r14
    2a52:	7f 2d       	mov	r23, r15
    2a54:	80 2f       	mov	r24, r16
    2a56:	91 2f       	mov	r25, r17
    2a58:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <__floatundisf>
    2a5c:	dc 01       	movw	r26, r24
    2a5e:	cb 01       	movw	r24, r22
    2a60:	bc 01       	movw	r22, r24
    2a62:	cd 01       	movw	r24, r26
    2a64:	2a e0       	ldi	r18, 0x0A	; 10
    2a66:	37 ed       	ldi	r19, 0xD7	; 215
    2a68:	43 e2       	ldi	r20, 0x23	; 35
    2a6a:	50 e4       	ldi	r21, 0x40	; 64
    2a6c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	bc 01       	movw	r22, r24
    2a76:	cd 01       	movw	r24, r26
    2a78:	24 e1       	ldi	r18, 0x14	; 20
    2a7a:	3e ea       	ldi	r19, 0xAE	; 174
    2a7c:	43 e2       	ldi	r20, 0x23	; 35
    2a7e:	55 e4       	ldi	r21, 0x45	; 69
    2a80:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__divsf3>
    2a84:	dc 01       	movw	r26, r24
    2a86:	cb 01       	movw	r24, r22
    2a88:	bc 01       	movw	r22, r24
    2a8a:	cd 01       	movw	r24, r26
    2a8c:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    2a90:	dc 01       	movw	r26, r24
    2a92:	cb 01       	movw	r24, r22
    2a94:	9c 83       	std	Y+4, r25	; 0x04
    2a96:	8b 83       	std	Y+3, r24	; 0x03
			/ (ADC_MAXIMUM_VALUE * LDR_SENSOR_MAX_VOLT_VALUE));

	return ldr_value;
    2a98:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9a:	9c 81       	ldd	r25, Y+4	; 0x04
}
    2a9c:	ce 5a       	subi	r28, 0xAE	; 174
    2a9e:	df 4f       	sbci	r29, 0xFF	; 255
    2aa0:	0f b6       	in	r0, 0x3f	; 63
    2aa2:	f8 94       	cli
    2aa4:	de bf       	out	0x3e, r29	; 62
    2aa6:	0f be       	out	0x3f, r0	; 63
    2aa8:	cd bf       	out	0x3d, r28	; 61
    2aaa:	cf 91       	pop	r28
    2aac:	df 91       	pop	r29
    2aae:	1f 91       	pop	r17
    2ab0:	0f 91       	pop	r16
    2ab2:	ff 90       	pop	r15
    2ab4:	ef 90       	pop	r14
    2ab6:	df 90       	pop	r13
    2ab8:	cf 90       	pop	r12
    2aba:	bf 90       	pop	r11
    2abc:	af 90       	pop	r10
    2abe:	08 95       	ret

00002ac0 <LEDS_init>:
 *
 * Return: void
 *
 */
void LEDS_init(void)
{
    2ac0:	df 93       	push	r29
    2ac2:	cf 93       	push	r28
    2ac4:	cd b7       	in	r28, 0x3d	; 61
    2ac6:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(LED_PORTB, LED_RED, PIN_OUTPUT);
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	65 e0       	ldi	r22, 0x05	; 5
    2acc:	41 e0       	ldi	r20, 0x01	; 1
    2ace:	0e 94 3b 0a 	call	0x1476	; 0x1476 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LED_PORTB, LED_GREEN, PIN_OUTPUT);
    2ad2:	81 e0       	ldi	r24, 0x01	; 1
    2ad4:	66 e0       	ldi	r22, 0x06	; 6
    2ad6:	41 e0       	ldi	r20, 0x01	; 1
    2ad8:	0e 94 3b 0a 	call	0x1476	; 0x1476 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LED_PORTB, LED_BLUE, PIN_OUTPUT);
    2adc:	81 e0       	ldi	r24, 0x01	; 1
    2ade:	67 e0       	ldi	r22, 0x07	; 7
    2ae0:	41 e0       	ldi	r20, 0x01	; 1
    2ae2:	0e 94 3b 0a 	call	0x1476	; 0x1476 <GPIO_setupPinDirection>
#if LOGIC_CONNECTION
	GPIO_writePin(LED_PORTB, LED_RED, LOGIC_LOW);
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	65 e0       	ldi	r22, 0x05	; 5
    2aea:	40 e0       	ldi	r20, 0x00	; 0
    2aec:	0e 94 26 0b 	call	0x164c	; 0x164c <GPIO_writePin>
	GPIO_writePin(LED_PORTB, LED_GREEN, LOGIC_LOW);
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	66 e0       	ldi	r22, 0x06	; 6
    2af4:	40 e0       	ldi	r20, 0x00	; 0
    2af6:	0e 94 26 0b 	call	0x164c	; 0x164c <GPIO_writePin>
	GPIO_writePin(LED_PORTB, LED_BLUE, LOGIC_LOW);
    2afa:	81 e0       	ldi	r24, 0x01	; 1
    2afc:	67 e0       	ldi	r22, 0x07	; 7
    2afe:	40 e0       	ldi	r20, 0x00	; 0
    2b00:	0e 94 26 0b 	call	0x164c	; 0x164c <GPIO_writePin>
#else
	GPIO_writePin(LED_PORTB, LED_RED, LOGIC_HIGH);
	GPIO_writePin(LED_PORTB, LED_GREEN, LOGIC_HIGH);
	GPIO_writePin(LED_PORTB, LED_BLUE, LOGIC_HIGH);
#endif
}
    2b04:	cf 91       	pop	r28
    2b06:	df 91       	pop	r29
    2b08:	08 95       	ret

00002b0a <LED_on>:
 *
 * Return: void
 *
 */
void LED_on(LED_ID id)
{
    2b0a:	df 93       	push	r29
    2b0c:	cf 93       	push	r28
    2b0e:	0f 92       	push	r0
    2b10:	cd b7       	in	r28, 0x3d	; 61
    2b12:	de b7       	in	r29, 0x3e	; 62
    2b14:	89 83       	std	Y+1, r24	; 0x01
#if LOGIC_CONNECTION
	GPIO_writePin(LED_PORTB, id, LOGIC_HIGH);
    2b16:	81 e0       	ldi	r24, 0x01	; 1
    2b18:	69 81       	ldd	r22, Y+1	; 0x01
    2b1a:	41 e0       	ldi	r20, 0x01	; 1
    2b1c:	0e 94 26 0b 	call	0x164c	; 0x164c <GPIO_writePin>
#else
	GPIO_writePin(LED_PORTB, id, LOGIC_LOW);
#endif
}
    2b20:	0f 90       	pop	r0
    2b22:	cf 91       	pop	r28
    2b24:	df 91       	pop	r29
    2b26:	08 95       	ret

00002b28 <LED_off>:
 *
 * Return: void
 *
 */
void LED_off(LED_ID id)
{
    2b28:	df 93       	push	r29
    2b2a:	cf 93       	push	r28
    2b2c:	0f 92       	push	r0
    2b2e:	cd b7       	in	r28, 0x3d	; 61
    2b30:	de b7       	in	r29, 0x3e	; 62
    2b32:	89 83       	std	Y+1, r24	; 0x01
#if LOGIC_CONNECTION
	GPIO_writePin(LED_PORTB, id, LOGIC_LOW);
    2b34:	81 e0       	ldi	r24, 0x01	; 1
    2b36:	69 81       	ldd	r22, Y+1	; 0x01
    2b38:	40 e0       	ldi	r20, 0x00	; 0
    2b3a:	0e 94 26 0b 	call	0x164c	; 0x164c <GPIO_writePin>
#else
	GPIO_writePin(LED_PORTB, id, LOGIC_HIGH);
#endif
}
    2b3e:	0f 90       	pop	r0
    2b40:	cf 91       	pop	r28
    2b42:	df 91       	pop	r29
    2b44:	08 95       	ret

00002b46 <LM35_getTemperature>:
/*
 * Description :
 * Function responsible for calculate the temperature from the ADC digital value.
 */
uint8 LM35_getTemperature(void)
{
    2b46:	df 93       	push	r29
    2b48:	cf 93       	push	r28
    2b4a:	00 d0       	rcall	.+0      	; 0x2b4c <LM35_getTemperature+0x6>
    2b4c:	0f 92       	push	r0
    2b4e:	cd b7       	in	r28, 0x3d	; 61
    2b50:	de b7       	in	r29, 0x3e	; 62
	ADC_init();
    2b52:	0e 94 47 09 	call	0x128e	; 0x128e <ADC_init>
	uint8 temp_value = 0;
    2b56:	1b 82       	std	Y+3, r1	; 0x03

	uint16 adc_value = 0;
    2b58:	1a 82       	std	Y+2, r1	; 0x02
    2b5a:	19 82       	std	Y+1, r1	; 0x01

	/* Read ADC channel where the temperature sensor is connected */
	adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
    2b5c:	81 e0       	ldi	r24, 0x01	; 1
    2b5e:	0e 94 56 09 	call	0x12ac	; 0x12ac <ADC_readChannel>
    2b62:	9a 83       	std	Y+2, r25	; 0x02
    2b64:	89 83       	std	Y+1, r24	; 0x01

	/* Calculate the temperature from the ADC value*/
	temp_value = (uint8)(((uint32)adc_value*SENSOR_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
    2b66:	89 81       	ldd	r24, Y+1	; 0x01
    2b68:	9a 81       	ldd	r25, Y+2	; 0x02
    2b6a:	cc 01       	movw	r24, r24
    2b6c:	a0 e0       	ldi	r26, 0x00	; 0
    2b6e:	b0 e0       	ldi	r27, 0x00	; 0
    2b70:	26 e9       	ldi	r18, 0x96	; 150
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	40 e0       	ldi	r20, 0x00	; 0
    2b76:	50 e0       	ldi	r21, 0x00	; 0
    2b78:	bc 01       	movw	r22, r24
    2b7a:	cd 01       	movw	r24, r26
    2b7c:	0e 94 12 17 	call	0x2e24	; 0x2e24 <__mulsi3>
    2b80:	dc 01       	movw	r26, r24
    2b82:	cb 01       	movw	r24, r22
    2b84:	bc 01       	movw	r22, r24
    2b86:	cd 01       	movw	r24, r26
    2b88:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__floatunsisf>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	bc 01       	movw	r22, r24
    2b92:	cd 01       	movw	r24, r26
    2b94:	2a e0       	ldi	r18, 0x0A	; 10
    2b96:	37 ed       	ldi	r19, 0xD7	; 215
    2b98:	43 e2       	ldi	r20, 0x23	; 35
    2b9a:	50 e4       	ldi	r21, 0x40	; 64
    2b9c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3>
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	cb 01       	movw	r24, r22
    2ba4:	bc 01       	movw	r22, r24
    2ba6:	cd 01       	movw	r24, r26
    2ba8:	20 e0       	ldi	r18, 0x00	; 0
    2baa:	30 ed       	ldi	r19, 0xD0	; 208
    2bac:	4f eb       	ldi	r20, 0xBF	; 191
    2bae:	54 e4       	ldi	r21, 0x44	; 68
    2bb0:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__divsf3>
    2bb4:	dc 01       	movw	r26, r24
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	bc 01       	movw	r22, r24
    2bba:	cd 01       	movw	r24, r26
    2bbc:	0e 94 c0 00 	call	0x180	; 0x180 <__fixunssfsi>
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	cb 01       	movw	r24, r22
    2bc4:	8b 83       	std	Y+3, r24	; 0x03

	return temp_value;
    2bc6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2bc8:	0f 90       	pop	r0
    2bca:	0f 90       	pop	r0
    2bcc:	0f 90       	pop	r0
    2bce:	cf 91       	pop	r28
    2bd0:	df 91       	pop	r29
    2bd2:	08 95       	ret

00002bd4 <PWM_Timer0_Start>:
 *
 * Return: void
 *
 */
void PWM_Timer0_Start(uint8 duty_cycle)
{
    2bd4:	df 93       	push	r29
    2bd6:	cf 93       	push	r28
    2bd8:	0f 92       	push	r0
    2bda:	cd b7       	in	r28, 0x3d	; 61
    2bdc:	de b7       	in	r29, 0x3e	; 62
    2bde:	89 83       	std	Y+1, r24	; 0x01
	CLEAR_BIT(TCCR0, FOC0);
    2be0:	a3 e5       	ldi	r26, 0x53	; 83
    2be2:	b0 e0       	ldi	r27, 0x00	; 0
    2be4:	e3 e5       	ldi	r30, 0x53	; 83
    2be6:	f0 e0       	ldi	r31, 0x00	; 0
    2be8:	80 81       	ld	r24, Z
    2bea:	8f 77       	andi	r24, 0x7F	; 127
    2bec:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM00);
    2bee:	a3 e5       	ldi	r26, 0x53	; 83
    2bf0:	b0 e0       	ldi	r27, 0x00	; 0
    2bf2:	e3 e5       	ldi	r30, 0x53	; 83
    2bf4:	f0 e0       	ldi	r31, 0x00	; 0
    2bf6:	80 81       	ld	r24, Z
    2bf8:	80 64       	ori	r24, 0x40	; 64
    2bfa:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM01);
    2bfc:	a3 e5       	ldi	r26, 0x53	; 83
    2bfe:	b0 e0       	ldi	r27, 0x00	; 0
    2c00:	e3 e5       	ldi	r30, 0x53	; 83
    2c02:	f0 e0       	ldi	r31, 0x00	; 0
    2c04:	80 81       	ld	r24, Z
    2c06:	88 60       	ori	r24, 0x08	; 8
    2c08:	8c 93       	st	X, r24

#if PWM_TIMER0_MODE == PWM_MODE_NON_INVERTING
	SET_BIT(TCCR0, COM01);
    2c0a:	a3 e5       	ldi	r26, 0x53	; 83
    2c0c:	b0 e0       	ldi	r27, 0x00	; 0
    2c0e:	e3 e5       	ldi	r30, 0x53	; 83
    2c10:	f0 e0       	ldi	r31, 0x00	; 0
    2c12:	80 81       	ld	r24, Z
    2c14:	80 62       	ori	r24, 0x20	; 32
    2c16:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0, COM00);
    2c18:	a3 e5       	ldi	r26, 0x53	; 83
    2c1a:	b0 e0       	ldi	r27, 0x00	; 0
    2c1c:	e3 e5       	ldi	r30, 0x53	; 83
    2c1e:	f0 e0       	ldi	r31, 0x00	; 0
    2c20:	80 81       	ld	r24, Z
    2c22:	8f 7e       	andi	r24, 0xEF	; 239
    2c24:	8c 93       	st	X, r24
    #elif PWM_TIMER0_PRESCALER == PWM_TIMER0_PRESCALER_256
        SET_BIT(TCCR0, CS02);
        CLEAR_BIT(TCCR0, CS01);
        CLEAR_BIT(TCCR0, CS00);
    #elif PWM_TIMER0_PRESCALER == PWM_TIMER0_PRESCALER_1024
	SET_BIT(TCCR0, CS02);
    2c26:	a3 e5       	ldi	r26, 0x53	; 83
    2c28:	b0 e0       	ldi	r27, 0x00	; 0
    2c2a:	e3 e5       	ldi	r30, 0x53	; 83
    2c2c:	f0 e0       	ldi	r31, 0x00	; 0
    2c2e:	80 81       	ld	r24, Z
    2c30:	84 60       	ori	r24, 0x04	; 4
    2c32:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0, CS01);
    2c34:	a3 e5       	ldi	r26, 0x53	; 83
    2c36:	b0 e0       	ldi	r27, 0x00	; 0
    2c38:	e3 e5       	ldi	r30, 0x53	; 83
    2c3a:	f0 e0       	ldi	r31, 0x00	; 0
    2c3c:	80 81       	ld	r24, Z
    2c3e:	8d 7f       	andi	r24, 0xFD	; 253
    2c40:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS00);
    2c42:	a3 e5       	ldi	r26, 0x53	; 83
    2c44:	b0 e0       	ldi	r27, 0x00	; 0
    2c46:	e3 e5       	ldi	r30, 0x53	; 83
    2c48:	f0 e0       	ldi	r31, 0x00	; 0
    2c4a:	80 81       	ld	r24, Z
    2c4c:	81 60       	ori	r24, 0x01	; 1
    2c4e:	8c 93       	st	X, r24
#else
#error "Invalid PWM_PRESCALER setting"
#endif

	GPIO_setupPinDirection(PWM_TIMER0_PORT, PWM_TIMER0_PIN, PIN_OUTPUT);
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	63 e0       	ldi	r22, 0x03	; 3
    2c54:	41 e0       	ldi	r20, 0x01	; 1
    2c56:	0e 94 3b 0a 	call	0x1476	; 0x1476 <GPIO_setupPinDirection>

	TCNT0 = 0;
    2c5a:	e2 e5       	ldi	r30, 0x52	; 82
    2c5c:	f0 e0       	ldi	r31, 0x00	; 0
    2c5e:	10 82       	st	Z, r1
	if (duty_cycle > MAX_DUTY_CYCLE)
    2c60:	89 81       	ldd	r24, Y+1	; 0x01
    2c62:	85 36       	cpi	r24, 0x65	; 101
    2c64:	10 f0       	brcs	.+4      	; 0x2c6a <PWM_Timer0_Start+0x96>
	{
		duty_cycle = MAX_DUTY_CYCLE;
    2c66:	84 e6       	ldi	r24, 0x64	; 100
    2c68:	89 83       	std	Y+1, r24	; 0x01
	else if (duty_cycle < MIN_DUTY_CYCLE)
	{
		duty_cycle = MIN_DUTY_CYCLE;
	}
#if PWM_TIMER0_MODE == PWM_MODE_NON_INVERTING
	OCR0 = (uint8) (((uint16) duty_cycle * TIMER0_MAX_COUNT) / MAX_DUTY_CYCLE);
    2c6a:	ec e5       	ldi	r30, 0x5C	; 92
    2c6c:	f0 e0       	ldi	r31, 0x00	; 0
    2c6e:	89 81       	ldd	r24, Y+1	; 0x01
    2c70:	48 2f       	mov	r20, r24
    2c72:	50 e0       	ldi	r21, 0x00	; 0
    2c74:	ca 01       	movw	r24, r20
    2c76:	9c 01       	movw	r18, r24
    2c78:	22 0f       	add	r18, r18
    2c7a:	33 1f       	adc	r19, r19
    2c7c:	c9 01       	movw	r24, r18
    2c7e:	96 95       	lsr	r25
    2c80:	98 2f       	mov	r25, r24
    2c82:	88 27       	eor	r24, r24
    2c84:	97 95       	ror	r25
    2c86:	87 95       	ror	r24
    2c88:	82 1b       	sub	r24, r18
    2c8a:	93 0b       	sbc	r25, r19
    2c8c:	84 0f       	add	r24, r20
    2c8e:	95 1f       	adc	r25, r21
    2c90:	24 e6       	ldi	r18, 0x64	; 100
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	b9 01       	movw	r22, r18
    2c96:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__udivmodhi4>
    2c9a:	cb 01       	movw	r24, r22
    2c9c:	80 83       	st	Z, r24
#else
	OCR0 = (uint8) (TIMER0_MAX_COUNT - (((uint16) duty_cycle * TIMER0_MAX_COUNT) / MAX_DUTY_CYCLE));
#endif

}
    2c9e:	0f 90       	pop	r0
    2ca0:	cf 91       	pop	r28
    2ca2:	df 91       	pop	r29
    2ca4:	08 95       	ret

00002ca6 <main>:
#include "flame_sensor.h"

#include "std_types.h"

int main(void)
{
    2ca6:	df 93       	push	r29
    2ca8:	cf 93       	push	r28
    2caa:	00 d0       	rcall	.+0      	; 0x2cac <main+0x6>
    2cac:	00 d0       	rcall	.+0      	; 0x2cae <main+0x8>
    2cae:	cd b7       	in	r28, 0x3d	; 61
    2cb0:	de b7       	in	r29, 0x3e	; 62
	uint16 ldr_intensity;
	uint8 temp_value;
	DcMotor_State dc_state = CW;
    2cb2:	81 e0       	ldi	r24, 0x01	; 1
    2cb4:	89 83       	std	Y+1, r24	; 0x01
	LEDS_init();
    2cb6:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <LEDS_init>
	DcMotor_Init();
    2cba:	0e 94 b6 09 	call	0x136c	; 0x136c <DcMotor_Init>
	FlameSensor_init();
    2cbe:	0e 94 1b 0a 	call	0x1436	; 0x1436 <FlameSensor_init>
	LCD_init();
    2cc2:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <LCD_init>
	Buzzer_init();
    2cc6:	0e 94 8d 09 	call	0x131a	; 0x131a <Buzzer_init>
	while (1)
	{
		ldr_intensity = LDR_getLightIntensity();
    2cca:	0e 94 a4 12 	call	0x2548	; 0x2548 <LDR_getLightIntensity>
    2cce:	9c 83       	std	Y+4, r25	; 0x04
    2cd0:	8b 83       	std	Y+3, r24	; 0x03
		if (ldr_intensity > 70)
    2cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd4:	9c 81       	ldd	r25, Y+4	; 0x04
    2cd6:	87 34       	cpi	r24, 0x47	; 71
    2cd8:	91 05       	cpc	r25, r1
    2cda:	50 f0       	brcs	.+20     	; 0x2cf0 <main+0x4a>
		{
			LED_off(LED_RED);
    2cdc:	85 e0       	ldi	r24, 0x05	; 5
    2cde:	0e 94 94 15 	call	0x2b28	; 0x2b28 <LED_off>
			LED_off(LED_GREEN);
    2ce2:	86 e0       	ldi	r24, 0x06	; 6
    2ce4:	0e 94 94 15 	call	0x2b28	; 0x2b28 <LED_off>
			LED_off(LED_BLUE);
    2ce8:	87 e0       	ldi	r24, 0x07	; 7
    2cea:	0e 94 94 15 	call	0x2b28	; 0x2b28 <LED_off>
    2cee:	27 c0       	rjmp	.+78     	; 0x2d3e <main+0x98>
		}
		else if (ldr_intensity > 51)
    2cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf2:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf4:	84 33       	cpi	r24, 0x34	; 52
    2cf6:	91 05       	cpc	r25, r1
    2cf8:	50 f0       	brcs	.+20     	; 0x2d0e <main+0x68>
		{
			LED_on(LED_RED);
    2cfa:	85 e0       	ldi	r24, 0x05	; 5
    2cfc:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <LED_on>
			LED_off(LED_GREEN);
    2d00:	86 e0       	ldi	r24, 0x06	; 6
    2d02:	0e 94 94 15 	call	0x2b28	; 0x2b28 <LED_off>
			LED_off(LED_BLUE);
    2d06:	87 e0       	ldi	r24, 0x07	; 7
    2d08:	0e 94 94 15 	call	0x2b28	; 0x2b28 <LED_off>
    2d0c:	18 c0       	rjmp	.+48     	; 0x2d3e <main+0x98>
		}
		else if (ldr_intensity > 16)
    2d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d10:	9c 81       	ldd	r25, Y+4	; 0x04
    2d12:	81 31       	cpi	r24, 0x11	; 17
    2d14:	91 05       	cpc	r25, r1
    2d16:	50 f0       	brcs	.+20     	; 0x2d2c <main+0x86>
		{
			LED_on(LED_RED);
    2d18:	85 e0       	ldi	r24, 0x05	; 5
    2d1a:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <LED_on>
			LED_on(LED_GREEN);
    2d1e:	86 e0       	ldi	r24, 0x06	; 6
    2d20:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <LED_on>
			LED_off(LED_BLUE);
    2d24:	87 e0       	ldi	r24, 0x07	; 7
    2d26:	0e 94 94 15 	call	0x2b28	; 0x2b28 <LED_off>
    2d2a:	09 c0       	rjmp	.+18     	; 0x2d3e <main+0x98>
		}
		else
		{
			LED_on(LED_RED);
    2d2c:	85 e0       	ldi	r24, 0x05	; 5
    2d2e:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <LED_on>
			LED_on(LED_GREEN);
    2d32:	86 e0       	ldi	r24, 0x06	; 6
    2d34:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <LED_on>
			LED_on(LED_BLUE);
    2d38:	87 e0       	ldi	r24, 0x07	; 7
    2d3a:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <LED_on>
		}
		LCD_displayStringRowColumn(1, 0, "Temp=");
    2d3e:	20 e6       	ldi	r18, 0x60	; 96
    2d40:	30 e0       	ldi	r19, 0x00	; 0
    2d42:	81 e0       	ldi	r24, 0x01	; 1
    2d44:	60 e0       	ldi	r22, 0x00	; 0
    2d46:	a9 01       	movw	r20, r18
    2d48:	0e 94 5e 12 	call	0x24bc	; 0x24bc <LCD_displayStringRowColumn>
		temp_value = LM35_getTemperature();
    2d4c:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <LM35_getTemperature>
    2d50:	8a 83       	std	Y+2, r24	; 0x02
		LCD_intgerToString(temp_value);
    2d52:	8a 81       	ldd	r24, Y+2	; 0x02
    2d54:	88 2f       	mov	r24, r24
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	0e 94 77 12 	call	0x24ee	; 0x24ee <LCD_intgerToString>
		LCD_displayCharacter(' ');
    2d5c:	80 e2       	ldi	r24, 0x20	; 32
    2d5e:	0e 94 04 10 	call	0x2008	; 0x2008 <LCD_displayCharacter>
		LCD_displayString("LDR=");
    2d62:	86 e6       	ldi	r24, 0x66	; 102
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <LCD_displayString>
		LCD_intgerToString(ldr_intensity);
    2d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d6e:	0e 94 77 12 	call	0x24ee	; 0x24ee <LCD_intgerToString>
		LCD_displayString("%  ");
    2d72:	8b e6       	ldi	r24, 0x6B	; 107
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <LCD_displayString>

		if (temp_value >= 40)
    2d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7c:	88 32       	cpi	r24, 0x28	; 40
    2d7e:	38 f0       	brcs	.+14     	; 0x2d8e <main+0xe8>
		{
			dc_state = CW;
    2d80:	81 e0       	ldi	r24, 0x01	; 1
    2d82:	89 83       	std	Y+1, r24	; 0x01
			DcMotor_Rotate(dc_state, 100);
    2d84:	89 81       	ldd	r24, Y+1	; 0x01
    2d86:	64 e6       	ldi	r22, 0x64	; 100
    2d88:	0e 94 d6 09 	call	0x13ac	; 0x13ac <DcMotor_Rotate>
    2d8c:	23 c0       	rjmp	.+70     	; 0x2dd4 <main+0x12e>
		}
		else if (temp_value >= 35)
    2d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d90:	83 32       	cpi	r24, 0x23	; 35
    2d92:	38 f0       	brcs	.+14     	; 0x2da2 <main+0xfc>
		{
			dc_state = CW;
    2d94:	81 e0       	ldi	r24, 0x01	; 1
    2d96:	89 83       	std	Y+1, r24	; 0x01
			DcMotor_Rotate(dc_state, 75);
    2d98:	89 81       	ldd	r24, Y+1	; 0x01
    2d9a:	6b e4       	ldi	r22, 0x4B	; 75
    2d9c:	0e 94 d6 09 	call	0x13ac	; 0x13ac <DcMotor_Rotate>
    2da0:	19 c0       	rjmp	.+50     	; 0x2dd4 <main+0x12e>
		}
		else if (temp_value >= 30)
    2da2:	8a 81       	ldd	r24, Y+2	; 0x02
    2da4:	8e 31       	cpi	r24, 0x1E	; 30
    2da6:	38 f0       	brcs	.+14     	; 0x2db6 <main+0x110>
		{
			dc_state = CW;
    2da8:	81 e0       	ldi	r24, 0x01	; 1
    2daa:	89 83       	std	Y+1, r24	; 0x01
			DcMotor_Rotate(dc_state, 50);
    2dac:	89 81       	ldd	r24, Y+1	; 0x01
    2dae:	62 e3       	ldi	r22, 0x32	; 50
    2db0:	0e 94 d6 09 	call	0x13ac	; 0x13ac <DcMotor_Rotate>
    2db4:	0f c0       	rjmp	.+30     	; 0x2dd4 <main+0x12e>
		}
		else if (temp_value >= 25)
    2db6:	8a 81       	ldd	r24, Y+2	; 0x02
    2db8:	89 31       	cpi	r24, 0x19	; 25
    2dba:	38 f0       	brcs	.+14     	; 0x2dca <main+0x124>
		{
			dc_state = CW;
    2dbc:	81 e0       	ldi	r24, 0x01	; 1
    2dbe:	89 83       	std	Y+1, r24	; 0x01
			DcMotor_Rotate(dc_state, 25);
    2dc0:	89 81       	ldd	r24, Y+1	; 0x01
    2dc2:	69 e1       	ldi	r22, 0x19	; 25
    2dc4:	0e 94 d6 09 	call	0x13ac	; 0x13ac <DcMotor_Rotate>
    2dc8:	05 c0       	rjmp	.+10     	; 0x2dd4 <main+0x12e>
		}
		else
		{
			dc_state = OFF;
    2dca:	19 82       	std	Y+1, r1	; 0x01
			DcMotor_Rotate(dc_state, 0);
    2dcc:	89 81       	ldd	r24, Y+1	; 0x01
    2dce:	60 e0       	ldi	r22, 0x00	; 0
    2dd0:	0e 94 d6 09 	call	0x13ac	; 0x13ac <DcMotor_Rotate>
		}
		if (dc_state)
    2dd4:	89 81       	ldd	r24, Y+1	; 0x01
    2dd6:	88 23       	and	r24, r24
    2dd8:	41 f0       	breq	.+16     	; 0x2dea <main+0x144>
		{
			LCD_displayStringRowColumn(0, 4, "FAN is ON ");
    2dda:	2f e6       	ldi	r18, 0x6F	; 111
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	80 e0       	ldi	r24, 0x00	; 0
    2de0:	64 e0       	ldi	r22, 0x04	; 4
    2de2:	a9 01       	movw	r20, r18
    2de4:	0e 94 5e 12 	call	0x24bc	; 0x24bc <LCD_displayStringRowColumn>
    2de8:	07 c0       	rjmp	.+14     	; 0x2df8 <main+0x152>
		}
		else
		{
			LCD_displayStringRowColumn(0, 4, "FAN is OFF");
    2dea:	2a e7       	ldi	r18, 0x7A	; 122
    2dec:	30 e0       	ldi	r19, 0x00	; 0
    2dee:	80 e0       	ldi	r24, 0x00	; 0
    2df0:	64 e0       	ldi	r22, 0x04	; 4
    2df2:	a9 01       	movw	r20, r18
    2df4:	0e 94 5e 12 	call	0x24bc	; 0x24bc <LCD_displayStringRowColumn>
		}
		if (FlameSensor_getValue())
    2df8:	0e 94 27 0a 	call	0x144e	; 0x144e <FlameSensor_getValue>
    2dfc:	88 23       	and	r24, r24
    2dfe:	79 f0       	breq	.+30     	; 0x2e1e <main+0x178>
		{
			LCD_clearScreen();
    2e00:	0e 94 9a 12 	call	0x2534	; 0x2534 <LCD_clearScreen>
			LCD_displayString("Critical alert!");
    2e04:	85 e8       	ldi	r24, 0x85	; 133
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <LCD_displayString>
			Buzzer_on();
    2e0c:	0e 94 9e 09 	call	0x133c	; 0x133c <Buzzer_on>
			while (FlameSensor_getValue())
    2e10:	0e 94 27 0a 	call	0x144e	; 0x144e <FlameSensor_getValue>
    2e14:	88 23       	and	r24, r24
    2e16:	e1 f7       	brne	.-8      	; 0x2e10 <main+0x16a>
				;
			LCD_clearScreen();
    2e18:	0e 94 9a 12 	call	0x2534	; 0x2534 <LCD_clearScreen>
    2e1c:	56 cf       	rjmp	.-340    	; 0x2cca <main+0x24>
		}
		else
		{
			Buzzer_off();
    2e1e:	0e 94 aa 09 	call	0x1354	; 0x1354 <Buzzer_off>
    2e22:	53 cf       	rjmp	.-346    	; 0x2cca <main+0x24>

00002e24 <__mulsi3>:
    2e24:	62 9f       	mul	r22, r18
    2e26:	d0 01       	movw	r26, r0
    2e28:	73 9f       	mul	r23, r19
    2e2a:	f0 01       	movw	r30, r0
    2e2c:	82 9f       	mul	r24, r18
    2e2e:	e0 0d       	add	r30, r0
    2e30:	f1 1d       	adc	r31, r1
    2e32:	64 9f       	mul	r22, r20
    2e34:	e0 0d       	add	r30, r0
    2e36:	f1 1d       	adc	r31, r1
    2e38:	92 9f       	mul	r25, r18
    2e3a:	f0 0d       	add	r31, r0
    2e3c:	83 9f       	mul	r24, r19
    2e3e:	f0 0d       	add	r31, r0
    2e40:	74 9f       	mul	r23, r20
    2e42:	f0 0d       	add	r31, r0
    2e44:	65 9f       	mul	r22, r21
    2e46:	f0 0d       	add	r31, r0
    2e48:	99 27       	eor	r25, r25
    2e4a:	72 9f       	mul	r23, r18
    2e4c:	b0 0d       	add	r27, r0
    2e4e:	e1 1d       	adc	r30, r1
    2e50:	f9 1f       	adc	r31, r25
    2e52:	63 9f       	mul	r22, r19
    2e54:	b0 0d       	add	r27, r0
    2e56:	e1 1d       	adc	r30, r1
    2e58:	f9 1f       	adc	r31, r25
    2e5a:	bd 01       	movw	r22, r26
    2e5c:	cf 01       	movw	r24, r30
    2e5e:	11 24       	eor	r1, r1
    2e60:	08 95       	ret

00002e62 <__udivmodhi4>:
    2e62:	aa 1b       	sub	r26, r26
    2e64:	bb 1b       	sub	r27, r27
    2e66:	51 e1       	ldi	r21, 0x11	; 17
    2e68:	07 c0       	rjmp	.+14     	; 0x2e78 <__udivmodhi4_ep>

00002e6a <__udivmodhi4_loop>:
    2e6a:	aa 1f       	adc	r26, r26
    2e6c:	bb 1f       	adc	r27, r27
    2e6e:	a6 17       	cp	r26, r22
    2e70:	b7 07       	cpc	r27, r23
    2e72:	10 f0       	brcs	.+4      	; 0x2e78 <__udivmodhi4_ep>
    2e74:	a6 1b       	sub	r26, r22
    2e76:	b7 0b       	sbc	r27, r23

00002e78 <__udivmodhi4_ep>:
    2e78:	88 1f       	adc	r24, r24
    2e7a:	99 1f       	adc	r25, r25
    2e7c:	5a 95       	dec	r21
    2e7e:	a9 f7       	brne	.-22     	; 0x2e6a <__udivmodhi4_loop>
    2e80:	80 95       	com	r24
    2e82:	90 95       	com	r25
    2e84:	bc 01       	movw	r22, r24
    2e86:	cd 01       	movw	r24, r26
    2e88:	08 95       	ret

00002e8a <__prologue_saves__>:
    2e8a:	2f 92       	push	r2
    2e8c:	3f 92       	push	r3
    2e8e:	4f 92       	push	r4
    2e90:	5f 92       	push	r5
    2e92:	6f 92       	push	r6
    2e94:	7f 92       	push	r7
    2e96:	8f 92       	push	r8
    2e98:	9f 92       	push	r9
    2e9a:	af 92       	push	r10
    2e9c:	bf 92       	push	r11
    2e9e:	cf 92       	push	r12
    2ea0:	df 92       	push	r13
    2ea2:	ef 92       	push	r14
    2ea4:	ff 92       	push	r15
    2ea6:	0f 93       	push	r16
    2ea8:	1f 93       	push	r17
    2eaa:	cf 93       	push	r28
    2eac:	df 93       	push	r29
    2eae:	cd b7       	in	r28, 0x3d	; 61
    2eb0:	de b7       	in	r29, 0x3e	; 62
    2eb2:	ca 1b       	sub	r28, r26
    2eb4:	db 0b       	sbc	r29, r27
    2eb6:	0f b6       	in	r0, 0x3f	; 63
    2eb8:	f8 94       	cli
    2eba:	de bf       	out	0x3e, r29	; 62
    2ebc:	0f be       	out	0x3f, r0	; 63
    2ebe:	cd bf       	out	0x3d, r28	; 61
    2ec0:	09 94       	ijmp

00002ec2 <__epilogue_restores__>:
    2ec2:	2a 88       	ldd	r2, Y+18	; 0x12
    2ec4:	39 88       	ldd	r3, Y+17	; 0x11
    2ec6:	48 88       	ldd	r4, Y+16	; 0x10
    2ec8:	5f 84       	ldd	r5, Y+15	; 0x0f
    2eca:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ecc:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ece:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ed0:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ed2:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ed4:	b9 84       	ldd	r11, Y+9	; 0x09
    2ed6:	c8 84       	ldd	r12, Y+8	; 0x08
    2ed8:	df 80       	ldd	r13, Y+7	; 0x07
    2eda:	ee 80       	ldd	r14, Y+6	; 0x06
    2edc:	fd 80       	ldd	r15, Y+5	; 0x05
    2ede:	0c 81       	ldd	r16, Y+4	; 0x04
    2ee0:	1b 81       	ldd	r17, Y+3	; 0x03
    2ee2:	aa 81       	ldd	r26, Y+2	; 0x02
    2ee4:	b9 81       	ldd	r27, Y+1	; 0x01
    2ee6:	ce 0f       	add	r28, r30
    2ee8:	d1 1d       	adc	r29, r1
    2eea:	0f b6       	in	r0, 0x3f	; 63
    2eec:	f8 94       	cli
    2eee:	de bf       	out	0x3e, r29	; 62
    2ef0:	0f be       	out	0x3f, r0	; 63
    2ef2:	cd bf       	out	0x3d, r28	; 61
    2ef4:	ed 01       	movw	r28, r26
    2ef6:	08 95       	ret

00002ef8 <itoa>:
    2ef8:	fb 01       	movw	r30, r22
    2efa:	9f 01       	movw	r18, r30
    2efc:	e8 94       	clt
    2efe:	42 30       	cpi	r20, 0x02	; 2
    2f00:	c4 f0       	brlt	.+48     	; 0x2f32 <itoa+0x3a>
    2f02:	45 32       	cpi	r20, 0x25	; 37
    2f04:	b4 f4       	brge	.+44     	; 0x2f32 <itoa+0x3a>
    2f06:	4a 30       	cpi	r20, 0x0A	; 10
    2f08:	29 f4       	brne	.+10     	; 0x2f14 <itoa+0x1c>
    2f0a:	97 fb       	bst	r25, 7
    2f0c:	1e f4       	brtc	.+6      	; 0x2f14 <itoa+0x1c>
    2f0e:	90 95       	com	r25
    2f10:	81 95       	neg	r24
    2f12:	9f 4f       	sbci	r25, 0xFF	; 255
    2f14:	64 2f       	mov	r22, r20
    2f16:	77 27       	eor	r23, r23
    2f18:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__udivmodhi4>
    2f1c:	80 5d       	subi	r24, 0xD0	; 208
    2f1e:	8a 33       	cpi	r24, 0x3A	; 58
    2f20:	0c f0       	brlt	.+2      	; 0x2f24 <itoa+0x2c>
    2f22:	89 5d       	subi	r24, 0xD9	; 217
    2f24:	81 93       	st	Z+, r24
    2f26:	cb 01       	movw	r24, r22
    2f28:	00 97       	sbiw	r24, 0x00	; 0
    2f2a:	a1 f7       	brne	.-24     	; 0x2f14 <itoa+0x1c>
    2f2c:	16 f4       	brtc	.+4      	; 0x2f32 <itoa+0x3a>
    2f2e:	5d e2       	ldi	r21, 0x2D	; 45
    2f30:	51 93       	st	Z+, r21
    2f32:	10 82       	st	Z, r1
    2f34:	c9 01       	movw	r24, r18
    2f36:	0c 94 9d 17 	jmp	0x2f3a	; 0x2f3a <strrev>

00002f3a <strrev>:
    2f3a:	dc 01       	movw	r26, r24
    2f3c:	fc 01       	movw	r30, r24
    2f3e:	67 2f       	mov	r22, r23
    2f40:	71 91       	ld	r23, Z+
    2f42:	77 23       	and	r23, r23
    2f44:	e1 f7       	brne	.-8      	; 0x2f3e <strrev+0x4>
    2f46:	32 97       	sbiw	r30, 0x02	; 2
    2f48:	04 c0       	rjmp	.+8      	; 0x2f52 <strrev+0x18>
    2f4a:	7c 91       	ld	r23, X
    2f4c:	6d 93       	st	X+, r22
    2f4e:	70 83       	st	Z, r23
    2f50:	62 91       	ld	r22, -Z
    2f52:	ae 17       	cp	r26, r30
    2f54:	bf 07       	cpc	r27, r31
    2f56:	c8 f3       	brcs	.-14     	; 0x2f4a <strrev+0x10>
    2f58:	08 95       	ret

00002f5a <_exit>:
    2f5a:	f8 94       	cli

00002f5c <__stop_program>:
    2f5c:	ff cf       	rjmp	.-2      	; 0x2f5c <__stop_program>
